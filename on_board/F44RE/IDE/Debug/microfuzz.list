
microfuzz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  20000000  20000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003354  200001d0  200001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  20003524  20003524  00004524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000363c  2000363c  000046b4  2**0
                  CONTENTS
  4 .ARM          00000008  2000363c  2000363c  0000463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20003644  200036b4  000046b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20003644  20003644  00004644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  20003648  20003648  00004648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  2000364c  2000364c  0000464c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200036b4  200036b4  000046b4  2**2
                  ALLOC
 10 ._user_heap_stack 000060e4  200039c4  200039c4  000046b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000046b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000045e3  00000000  00000000  000046e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d2  00000000  00000000  00008cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000568  00000000  00000000  00009fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003e0  00000000  00000000  0000a508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216c7  00000000  00000000  0000a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006cfb  00000000  00000000  0002bfaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7a38  00000000  00000000  00032caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa6e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d14  00000000  00000000  000fa728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000fc43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001d0 <__do_global_dtors_aux>:
200001d0:	b510      	push	{r4, lr}
200001d2:	4c05      	ldr	r4, [pc, #20]	@ (200001e8 <__do_global_dtors_aux+0x18>)
200001d4:	7823      	ldrb	r3, [r4, #0]
200001d6:	b933      	cbnz	r3, 200001e6 <__do_global_dtors_aux+0x16>
200001d8:	4b04      	ldr	r3, [pc, #16]	@ (200001ec <__do_global_dtors_aux+0x1c>)
200001da:	b113      	cbz	r3, 200001e2 <__do_global_dtors_aux+0x12>
200001dc:	4804      	ldr	r0, [pc, #16]	@ (200001f0 <__do_global_dtors_aux+0x20>)
200001de:	f3af 8000 	nop.w
200001e2:	2301      	movs	r3, #1
200001e4:	7023      	strb	r3, [r4, #0]
200001e6:	bd10      	pop	{r4, pc}
200001e8:	200036b4 	.word	0x200036b4
200001ec:	00000000 	.word	0x00000000
200001f0:	2000350c 	.word	0x2000350c

200001f4 <frame_dummy>:
200001f4:	b508      	push	{r3, lr}
200001f6:	4b03      	ldr	r3, [pc, #12]	@ (20000204 <frame_dummy+0x10>)
200001f8:	b11b      	cbz	r3, 20000202 <frame_dummy+0xe>
200001fa:	4903      	ldr	r1, [pc, #12]	@ (20000208 <frame_dummy+0x14>)
200001fc:	4803      	ldr	r0, [pc, #12]	@ (2000020c <frame_dummy+0x18>)
200001fe:	f3af 8000 	nop.w
20000202:	bd08      	pop	{r3, pc}
20000204:	00000000 	.word	0x00000000
20000208:	200036b8 	.word	0x200036b8
2000020c:	2000350c 	.word	0x2000350c

20000210 <_coverage_trace>:
    .global _coverage_trace
    .extern g_coverageList, g_sutStartPtr, g_covListPtr, g_isIncreasing //Theses variables are defined in fuzz.c

_coverage_trace:
    //Let's store the register context by pushing everything to the stack.
    PUSH {lr}
20000210:	b500      	push	{lr}
    PUSH {r0}
20000212:	b401      	push	{r0}
    PUSH {r1}
20000214:	b402      	push	{r1}
    PUSH {r2}
20000216:	b404      	push	{r2}
    PUSH {r3}
20000218:	b408      	push	{r3}
    PUSH {r4}
2000021a:	b410      	push	{r4}
    PUSH {r5}
2000021c:	b420      	push	{r5}
    PUSH {r6}
2000021e:	b440      	push	{r6}
    PUSH {r7}
20000220:	b480      	push	{r7}
    SUB sp, sp, #12				//Maintain stack alignment
20000222:	b083      	sub	sp, #12
    //PUSH {r9}
    //PUSH {r10}
    //PUSH {r11}
    //PUSH {r12}

    MOV r0, lr                  //Store Return Address in R0.
20000224:	4670      	mov	r0, lr
    SUB r0, #5                   //Minus 5 from the return address to get to the start of the call .
20000226:	3805      	subs	r0, #5
    NOP
20000228:	46c0      	nop			@ (mov r8, r8)

    MOV r1, #0xBF               //Store NOP instruction in R1. Only can fit 0xBF
2000022a:	21bf      	movs	r1, #191	@ 0xbf
    LSL r1, r1, #8				//Logical Left Shift to 0xBF00
2000022c:	0209      	lsls	r1, r1, #8
    STRH r1, [r0]               //Overwrite coverage call. Stores half a word which is 16-bits
2000022e:	8001      	strh	r1, [r0, #0]
    ADD r0, #2					//Move to next half word
20000230:	3002      	adds	r0, #2
    STRH r1, [r0]				//Write another NOP instruction at next half word
20000232:	8001      	strh	r1, [r0, #0]
    							//NOTE: Calls are word sized while Nops are half-word sized.
    //Okay we have overwritten the coverage call, time to track where we have hit.
    LDR r1, =g_sutStartPtr
20000234:	490a      	ldr	r1, [pc, #40]	@ (20000260 <_coverage_trace+0x50>)
    LDR r2, [r1]
20000236:	680a      	ldr	r2, [r1, #0]
    SUB r0, r0, r2              //RetAddress - SutStartAddress = list value.
20000238:	1a80      	subs	r0, r0, r2

    LDR r2, =g_covListPtr
2000023a:	4a0a      	ldr	r2, [pc, #40]	@ (20000264 <_coverage_trace+0x54>)
    LDR r3, [r2]
2000023c:	6813      	ldr	r3, [r2, #0]
    STR r0, [r3]                //Store the found coverage offset in the list.
2000023e:	6018      	str	r0, [r3, #0]

    ADD r3, #1                  //Add one to the head pointer.
20000240:	3301      	adds	r3, #1
    STR r3, [r2]                //Store the new head pointer value.
20000242:	6013      	str	r3, [r2, #0]

    LDR r4, =g_isIncreasing
20000244:	4c08      	ldr	r4, [pc, #32]	@ (20000268 <_coverage_trace+0x58>)
    LDR r3, [r4]
20000246:	6823      	ldr	r3, [r4, #0]
    ADD r3, r3, #1
20000248:	3301      	adds	r3, #1
    STR r3, [r4]
2000024a:	6023      	str	r3, [r4, #0]
    //POP {r12}
    //POP {r11}
    //POP {r10}
    //POP {r9}
    //POP {r8}
    ADD sp, sp, #12 				//Align the stack
2000024c:	b003      	add	sp, #12
    POP {r7}
2000024e:	bc80      	pop	{r7}
    POP {r6}
20000250:	bc40      	pop	{r6}
    POP {r5}
20000252:	bc20      	pop	{r5}
    POP {r4}
20000254:	bc10      	pop	{r4}
    POP {r3}
20000256:	bc08      	pop	{r3}
    POP {r2}
20000258:	bc04      	pop	{r2}
    POP {r1}
2000025a:	bc02      	pop	{r1}
    POP {r0}
2000025c:	bc01      	pop	{r0}
    //POP {lr}
    //BX lr
    POP {pc}
2000025e:	bd00      	pop	{pc}
    LDR r1, =g_sutStartPtr
20000260:	20003864 	.word	0x20003864
    LDR r2, =g_covListPtr
20000264:	20003860 	.word	0x20003860
    LDR r4, =g_isIncreasing
20000268:	20003868 	.word	0x20003868
2000026c:	00000000 	.word	0x00000000

20000270 <memchr>:
20000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
20000274:	2a10      	cmp	r2, #16
20000276:	db2b      	blt.n	200002d0 <memchr+0x60>
20000278:	f010 0f07 	tst.w	r0, #7
2000027c:	d008      	beq.n	20000290 <memchr+0x20>
2000027e:	f810 3b01 	ldrb.w	r3, [r0], #1
20000282:	3a01      	subs	r2, #1
20000284:	428b      	cmp	r3, r1
20000286:	d02d      	beq.n	200002e4 <memchr+0x74>
20000288:	f010 0f07 	tst.w	r0, #7
2000028c:	b342      	cbz	r2, 200002e0 <memchr+0x70>
2000028e:	d1f6      	bne.n	2000027e <memchr+0xe>
20000290:	b4f0      	push	{r4, r5, r6, r7}
20000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
20000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2000029a:	f022 0407 	bic.w	r4, r2, #7
2000029e:	f07f 0700 	mvns.w	r7, #0
200002a2:	2300      	movs	r3, #0
200002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
200002a8:	3c08      	subs	r4, #8
200002aa:	ea85 0501 	eor.w	r5, r5, r1
200002ae:	ea86 0601 	eor.w	r6, r6, r1
200002b2:	fa85 f547 	uadd8	r5, r5, r7
200002b6:	faa3 f587 	sel	r5, r3, r7
200002ba:	fa86 f647 	uadd8	r6, r6, r7
200002be:	faa5 f687 	sel	r6, r5, r7
200002c2:	b98e      	cbnz	r6, 200002e8 <memchr+0x78>
200002c4:	d1ee      	bne.n	200002a4 <memchr+0x34>
200002c6:	bcf0      	pop	{r4, r5, r6, r7}
200002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
200002cc:	f002 0207 	and.w	r2, r2, #7
200002d0:	b132      	cbz	r2, 200002e0 <memchr+0x70>
200002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
200002d6:	3a01      	subs	r2, #1
200002d8:	ea83 0301 	eor.w	r3, r3, r1
200002dc:	b113      	cbz	r3, 200002e4 <memchr+0x74>
200002de:	d1f8      	bne.n	200002d2 <memchr+0x62>
200002e0:	2000      	movs	r0, #0
200002e2:	4770      	bx	lr
200002e4:	3801      	subs	r0, #1
200002e6:	4770      	bx	lr
200002e8:	2d00      	cmp	r5, #0
200002ea:	bf06      	itte	eq
200002ec:	4635      	moveq	r5, r6
200002ee:	3803      	subeq	r0, #3
200002f0:	3807      	subne	r0, #7
200002f2:	f015 0f01 	tst.w	r5, #1
200002f6:	d107      	bne.n	20000308 <memchr+0x98>
200002f8:	3001      	adds	r0, #1
200002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
200002fe:	bf02      	ittt	eq
20000300:	3001      	addeq	r0, #1
20000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
20000306:	3001      	addeq	r0, #1
20000308:	bcf0      	pop	{r4, r5, r6, r7}
2000030a:	3801      	subs	r0, #1
2000030c:	4770      	bx	lr
2000030e:	bf00      	nop

20000310 <__aeabi_uldivmod>:
20000310:	b953      	cbnz	r3, 20000328 <__aeabi_uldivmod+0x18>
20000312:	b94a      	cbnz	r2, 20000328 <__aeabi_uldivmod+0x18>
20000314:	2900      	cmp	r1, #0
20000316:	bf08      	it	eq
20000318:	2800      	cmpeq	r0, #0
2000031a:	bf1c      	itt	ne
2000031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
20000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
20000324:	f000 b96a 	b.w	200005fc <__aeabi_idiv0>
20000328:	f1ad 0c08 	sub.w	ip, sp, #8
2000032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000330:	f000 f806 	bl	20000340 <__udivmoddi4>
20000334:	f8dd e004 	ldr.w	lr, [sp, #4]
20000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000033c:	b004      	add	sp, #16
2000033e:	4770      	bx	lr

20000340 <__udivmoddi4>:
20000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20000344:	9d08      	ldr	r5, [sp, #32]
20000346:	460c      	mov	r4, r1
20000348:	2b00      	cmp	r3, #0
2000034a:	d14e      	bne.n	200003ea <__udivmoddi4+0xaa>
2000034c:	4694      	mov	ip, r2
2000034e:	458c      	cmp	ip, r1
20000350:	4686      	mov	lr, r0
20000352:	fab2 f282 	clz	r2, r2
20000356:	d962      	bls.n	2000041e <__udivmoddi4+0xde>
20000358:	b14a      	cbz	r2, 2000036e <__udivmoddi4+0x2e>
2000035a:	f1c2 0320 	rsb	r3, r2, #32
2000035e:	4091      	lsls	r1, r2
20000360:	fa20 f303 	lsr.w	r3, r0, r3
20000364:	fa0c fc02 	lsl.w	ip, ip, r2
20000368:	4319      	orrs	r1, r3
2000036a:	fa00 fe02 	lsl.w	lr, r0, r2
2000036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
20000372:	fa1f f68c 	uxth.w	r6, ip
20000376:	fbb1 f4f7 	udiv	r4, r1, r7
2000037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
2000037e:	fb07 1114 	mls	r1, r7, r4, r1
20000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
20000386:	fb04 f106 	mul.w	r1, r4, r6
2000038a:	4299      	cmp	r1, r3
2000038c:	d90a      	bls.n	200003a4 <__udivmoddi4+0x64>
2000038e:	eb1c 0303 	adds.w	r3, ip, r3
20000392:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
20000396:	f080 8112 	bcs.w	200005be <__udivmoddi4+0x27e>
2000039a:	4299      	cmp	r1, r3
2000039c:	f240 810f 	bls.w	200005be <__udivmoddi4+0x27e>
200003a0:	3c02      	subs	r4, #2
200003a2:	4463      	add	r3, ip
200003a4:	1a59      	subs	r1, r3, r1
200003a6:	fa1f f38e 	uxth.w	r3, lr
200003aa:	fbb1 f0f7 	udiv	r0, r1, r7
200003ae:	fb07 1110 	mls	r1, r7, r0, r1
200003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
200003b6:	fb00 f606 	mul.w	r6, r0, r6
200003ba:	429e      	cmp	r6, r3
200003bc:	d90a      	bls.n	200003d4 <__udivmoddi4+0x94>
200003be:	eb1c 0303 	adds.w	r3, ip, r3
200003c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
200003c6:	f080 80fc 	bcs.w	200005c2 <__udivmoddi4+0x282>
200003ca:	429e      	cmp	r6, r3
200003cc:	f240 80f9 	bls.w	200005c2 <__udivmoddi4+0x282>
200003d0:	4463      	add	r3, ip
200003d2:	3802      	subs	r0, #2
200003d4:	1b9b      	subs	r3, r3, r6
200003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
200003da:	2100      	movs	r1, #0
200003dc:	b11d      	cbz	r5, 200003e6 <__udivmoddi4+0xa6>
200003de:	40d3      	lsrs	r3, r2
200003e0:	2200      	movs	r2, #0
200003e2:	e9c5 3200 	strd	r3, r2, [r5]
200003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200003ea:	428b      	cmp	r3, r1
200003ec:	d905      	bls.n	200003fa <__udivmoddi4+0xba>
200003ee:	b10d      	cbz	r5, 200003f4 <__udivmoddi4+0xb4>
200003f0:	e9c5 0100 	strd	r0, r1, [r5]
200003f4:	2100      	movs	r1, #0
200003f6:	4608      	mov	r0, r1
200003f8:	e7f5      	b.n	200003e6 <__udivmoddi4+0xa6>
200003fa:	fab3 f183 	clz	r1, r3
200003fe:	2900      	cmp	r1, #0
20000400:	d146      	bne.n	20000490 <__udivmoddi4+0x150>
20000402:	42a3      	cmp	r3, r4
20000404:	d302      	bcc.n	2000040c <__udivmoddi4+0xcc>
20000406:	4290      	cmp	r0, r2
20000408:	f0c0 80f0 	bcc.w	200005ec <__udivmoddi4+0x2ac>
2000040c:	1a86      	subs	r6, r0, r2
2000040e:	eb64 0303 	sbc.w	r3, r4, r3
20000412:	2001      	movs	r0, #1
20000414:	2d00      	cmp	r5, #0
20000416:	d0e6      	beq.n	200003e6 <__udivmoddi4+0xa6>
20000418:	e9c5 6300 	strd	r6, r3, [r5]
2000041c:	e7e3      	b.n	200003e6 <__udivmoddi4+0xa6>
2000041e:	2a00      	cmp	r2, #0
20000420:	f040 8090 	bne.w	20000544 <__udivmoddi4+0x204>
20000424:	eba1 040c 	sub.w	r4, r1, ip
20000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
2000042c:	fa1f f78c 	uxth.w	r7, ip
20000430:	2101      	movs	r1, #1
20000432:	fbb4 f6f8 	udiv	r6, r4, r8
20000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
2000043a:	fb08 4416 	mls	r4, r8, r6, r4
2000043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
20000442:	fb07 f006 	mul.w	r0, r7, r6
20000446:	4298      	cmp	r0, r3
20000448:	d908      	bls.n	2000045c <__udivmoddi4+0x11c>
2000044a:	eb1c 0303 	adds.w	r3, ip, r3
2000044e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
20000452:	d202      	bcs.n	2000045a <__udivmoddi4+0x11a>
20000454:	4298      	cmp	r0, r3
20000456:	f200 80cd 	bhi.w	200005f4 <__udivmoddi4+0x2b4>
2000045a:	4626      	mov	r6, r4
2000045c:	1a1c      	subs	r4, r3, r0
2000045e:	fa1f f38e 	uxth.w	r3, lr
20000462:	fbb4 f0f8 	udiv	r0, r4, r8
20000466:	fb08 4410 	mls	r4, r8, r0, r4
2000046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
2000046e:	fb00 f707 	mul.w	r7, r0, r7
20000472:	429f      	cmp	r7, r3
20000474:	d908      	bls.n	20000488 <__udivmoddi4+0x148>
20000476:	eb1c 0303 	adds.w	r3, ip, r3
2000047a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
2000047e:	d202      	bcs.n	20000486 <__udivmoddi4+0x146>
20000480:	429f      	cmp	r7, r3
20000482:	f200 80b0 	bhi.w	200005e6 <__udivmoddi4+0x2a6>
20000486:	4620      	mov	r0, r4
20000488:	1bdb      	subs	r3, r3, r7
2000048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
2000048e:	e7a5      	b.n	200003dc <__udivmoddi4+0x9c>
20000490:	f1c1 0620 	rsb	r6, r1, #32
20000494:	408b      	lsls	r3, r1
20000496:	fa22 f706 	lsr.w	r7, r2, r6
2000049a:	431f      	orrs	r7, r3
2000049c:	fa20 fc06 	lsr.w	ip, r0, r6
200004a0:	fa04 f301 	lsl.w	r3, r4, r1
200004a4:	ea43 030c 	orr.w	r3, r3, ip
200004a8:	40f4      	lsrs	r4, r6
200004aa:	fa00 f801 	lsl.w	r8, r0, r1
200004ae:	0c38      	lsrs	r0, r7, #16
200004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
200004b4:	fbb4 fef0 	udiv	lr, r4, r0
200004b8:	fa1f fc87 	uxth.w	ip, r7
200004bc:	fb00 441e 	mls	r4, r0, lr, r4
200004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200004c4:	fb0e f90c 	mul.w	r9, lr, ip
200004c8:	45a1      	cmp	r9, r4
200004ca:	fa02 f201 	lsl.w	r2, r2, r1
200004ce:	d90a      	bls.n	200004e6 <__udivmoddi4+0x1a6>
200004d0:	193c      	adds	r4, r7, r4
200004d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
200004d6:	f080 8084 	bcs.w	200005e2 <__udivmoddi4+0x2a2>
200004da:	45a1      	cmp	r9, r4
200004dc:	f240 8081 	bls.w	200005e2 <__udivmoddi4+0x2a2>
200004e0:	f1ae 0e02 	sub.w	lr, lr, #2
200004e4:	443c      	add	r4, r7
200004e6:	eba4 0409 	sub.w	r4, r4, r9
200004ea:	fa1f f983 	uxth.w	r9, r3
200004ee:	fbb4 f3f0 	udiv	r3, r4, r0
200004f2:	fb00 4413 	mls	r4, r0, r3, r4
200004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200004fa:	fb03 fc0c 	mul.w	ip, r3, ip
200004fe:	45a4      	cmp	ip, r4
20000500:	d907      	bls.n	20000512 <__udivmoddi4+0x1d2>
20000502:	193c      	adds	r4, r7, r4
20000504:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
20000508:	d267      	bcs.n	200005da <__udivmoddi4+0x29a>
2000050a:	45a4      	cmp	ip, r4
2000050c:	d965      	bls.n	200005da <__udivmoddi4+0x29a>
2000050e:	3b02      	subs	r3, #2
20000510:	443c      	add	r4, r7
20000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
20000516:	fba0 9302 	umull	r9, r3, r0, r2
2000051a:	eba4 040c 	sub.w	r4, r4, ip
2000051e:	429c      	cmp	r4, r3
20000520:	46ce      	mov	lr, r9
20000522:	469c      	mov	ip, r3
20000524:	d351      	bcc.n	200005ca <__udivmoddi4+0x28a>
20000526:	d04e      	beq.n	200005c6 <__udivmoddi4+0x286>
20000528:	b155      	cbz	r5, 20000540 <__udivmoddi4+0x200>
2000052a:	ebb8 030e 	subs.w	r3, r8, lr
2000052e:	eb64 040c 	sbc.w	r4, r4, ip
20000532:	fa04 f606 	lsl.w	r6, r4, r6
20000536:	40cb      	lsrs	r3, r1
20000538:	431e      	orrs	r6, r3
2000053a:	40cc      	lsrs	r4, r1
2000053c:	e9c5 6400 	strd	r6, r4, [r5]
20000540:	2100      	movs	r1, #0
20000542:	e750      	b.n	200003e6 <__udivmoddi4+0xa6>
20000544:	f1c2 0320 	rsb	r3, r2, #32
20000548:	fa20 f103 	lsr.w	r1, r0, r3
2000054c:	fa0c fc02 	lsl.w	ip, ip, r2
20000550:	fa24 f303 	lsr.w	r3, r4, r3
20000554:	4094      	lsls	r4, r2
20000556:	430c      	orrs	r4, r1
20000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
2000055c:	fa00 fe02 	lsl.w	lr, r0, r2
20000560:	fa1f f78c 	uxth.w	r7, ip
20000564:	fbb3 f0f8 	udiv	r0, r3, r8
20000568:	fb08 3110 	mls	r1, r8, r0, r3
2000056c:	0c23      	lsrs	r3, r4, #16
2000056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
20000572:	fb00 f107 	mul.w	r1, r0, r7
20000576:	4299      	cmp	r1, r3
20000578:	d908      	bls.n	2000058c <__udivmoddi4+0x24c>
2000057a:	eb1c 0303 	adds.w	r3, ip, r3
2000057e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
20000582:	d22c      	bcs.n	200005de <__udivmoddi4+0x29e>
20000584:	4299      	cmp	r1, r3
20000586:	d92a      	bls.n	200005de <__udivmoddi4+0x29e>
20000588:	3802      	subs	r0, #2
2000058a:	4463      	add	r3, ip
2000058c:	1a5b      	subs	r3, r3, r1
2000058e:	b2a4      	uxth	r4, r4
20000590:	fbb3 f1f8 	udiv	r1, r3, r8
20000594:	fb08 3311 	mls	r3, r8, r1, r3
20000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
2000059c:	fb01 f307 	mul.w	r3, r1, r7
200005a0:	42a3      	cmp	r3, r4
200005a2:	d908      	bls.n	200005b6 <__udivmoddi4+0x276>
200005a4:	eb1c 0404 	adds.w	r4, ip, r4
200005a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
200005ac:	d213      	bcs.n	200005d6 <__udivmoddi4+0x296>
200005ae:	42a3      	cmp	r3, r4
200005b0:	d911      	bls.n	200005d6 <__udivmoddi4+0x296>
200005b2:	3902      	subs	r1, #2
200005b4:	4464      	add	r4, ip
200005b6:	1ae4      	subs	r4, r4, r3
200005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
200005bc:	e739      	b.n	20000432 <__udivmoddi4+0xf2>
200005be:	4604      	mov	r4, r0
200005c0:	e6f0      	b.n	200003a4 <__udivmoddi4+0x64>
200005c2:	4608      	mov	r0, r1
200005c4:	e706      	b.n	200003d4 <__udivmoddi4+0x94>
200005c6:	45c8      	cmp	r8, r9
200005c8:	d2ae      	bcs.n	20000528 <__udivmoddi4+0x1e8>
200005ca:	ebb9 0e02 	subs.w	lr, r9, r2
200005ce:	eb63 0c07 	sbc.w	ip, r3, r7
200005d2:	3801      	subs	r0, #1
200005d4:	e7a8      	b.n	20000528 <__udivmoddi4+0x1e8>
200005d6:	4631      	mov	r1, r6
200005d8:	e7ed      	b.n	200005b6 <__udivmoddi4+0x276>
200005da:	4603      	mov	r3, r0
200005dc:	e799      	b.n	20000512 <__udivmoddi4+0x1d2>
200005de:	4630      	mov	r0, r6
200005e0:	e7d4      	b.n	2000058c <__udivmoddi4+0x24c>
200005e2:	46d6      	mov	lr, sl
200005e4:	e77f      	b.n	200004e6 <__udivmoddi4+0x1a6>
200005e6:	4463      	add	r3, ip
200005e8:	3802      	subs	r0, #2
200005ea:	e74d      	b.n	20000488 <__udivmoddi4+0x148>
200005ec:	4606      	mov	r6, r0
200005ee:	4623      	mov	r3, r4
200005f0:	4608      	mov	r0, r1
200005f2:	e70f      	b.n	20000414 <__udivmoddi4+0xd4>
200005f4:	3e02      	subs	r6, #2
200005f6:	4463      	add	r3, ip
200005f8:	e730      	b.n	2000045c <__udivmoddi4+0x11c>
200005fa:	bf00      	nop

200005fc <__aeabi_idiv0>:
200005fc:	4770      	bx	lr
200005fe:	bf00      	nop

20000600 <branch_test>:
#include <stdio.h>
#include <stdint.h>
#include <string.h>

int16_t branch_test(uint8_t * args, size_t size){
20000600:	b580      	push	{r7, lr}
20000602:	b082      	sub	sp, #8
20000604:	af00      	add	r7, sp, #0
20000606:	6078      	str	r0, [r7, #4]
20000608:	6039      	str	r1, [r7, #0]
_coverage_trace();
2000060a:	f7ff fe01 	bl	20000210 <_coverage_trace>
	if(args[0] == 'D'){
2000060e:	687b      	ldr	r3, [r7, #4]
20000610:	781b      	ldrb	r3, [r3, #0]
20000612:	2b44      	cmp	r3, #68	@ 0x44
20000614:	d132      	bne.n	2000067c <branch_test+0x7c>
		_coverage_trace();
20000616:	f7ff fdfb 	bl	20000210 <_coverage_trace>
//		printf("Hit the D case\n");
		if(args[1] == 'E'){
2000061a:	687b      	ldr	r3, [r7, #4]
2000061c:	3301      	adds	r3, #1
2000061e:	781b      	ldrb	r3, [r3, #0]
20000620:	2b45      	cmp	r3, #69	@ 0x45
20000622:	d12b      	bne.n	2000067c <branch_test+0x7c>
			_coverage_trace();
20000624:	f7ff fdf4 	bl	20000210 <_coverage_trace>
//			printf("Hit the E case\n");
			if(args[2]== 'A'){
20000628:	687b      	ldr	r3, [r7, #4]
2000062a:	3302      	adds	r3, #2
2000062c:	781b      	ldrb	r3, [r3, #0]
2000062e:	2b41      	cmp	r3, #65	@ 0x41
20000630:	d124      	bne.n	2000067c <branch_test+0x7c>
				_coverage_trace();
20000632:	f7ff fded 	bl	20000210 <_coverage_trace>
//				printf("Hit the A case \n");
				if(args[3] == 'D'){
20000636:	687b      	ldr	r3, [r7, #4]
20000638:	3303      	adds	r3, #3
2000063a:	781b      	ldrb	r3, [r3, #0]
2000063c:	2b44      	cmp	r3, #68	@ 0x44
2000063e:	d11d      	bne.n	2000067c <branch_test+0x7c>
					_coverage_trace();		
20000640:	f7ff fde6 	bl	20000210 <_coverage_trace>
//					printf("Hit the D case \n");
						if(args[4] == 'B'){
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	3304      	adds	r3, #4
20000648:	781b      	ldrb	r3, [r3, #0]
2000064a:	2b42      	cmp	r3, #66	@ 0x42
2000064c:	d116      	bne.n	2000067c <branch_test+0x7c>
						_coverage_trace();		
2000064e:	f7ff fddf 	bl	20000210 <_coverage_trace>
//						printf("Hit the D case\n");
						if(args[5] == 'E'){
20000652:	687b      	ldr	r3, [r7, #4]
20000654:	3305      	adds	r3, #5
20000656:	781b      	ldrb	r3, [r3, #0]
20000658:	2b45      	cmp	r3, #69	@ 0x45
2000065a:	d10f      	bne.n	2000067c <branch_test+0x7c>
							_coverage_trace();		
2000065c:	f7ff fdd8 	bl	20000210 <_coverage_trace>
//							printf("Hit the E case\n");
							if(args[6]== 'E'){
20000660:	687b      	ldr	r3, [r7, #4]
20000662:	3306      	adds	r3, #6
20000664:	781b      	ldrb	r3, [r3, #0]
20000666:	2b45      	cmp	r3, #69	@ 0x45
20000668:	d108      	bne.n	2000067c <branch_test+0x7c>
								_coverage_trace();		
2000066a:	f7ff fdd1 	bl	20000210 <_coverage_trace>
//								printf("Hit the E case \n");
								if(args[7] == 'F'){
2000066e:	687b      	ldr	r3, [r7, #4]
20000670:	3307      	adds	r3, #7
20000672:	781b      	ldrb	r3, [r3, #0]
20000674:	2b46      	cmp	r3, #70	@ 0x46
20000676:	d101      	bne.n	2000067c <branch_test+0x7c>
									_coverage_trace();		
20000678:	f7ff fdca 	bl	20000210 <_coverage_trace>
					}
				}
			}
		}
	}
	return 0;
2000067c:	2300      	movs	r3, #0
}
2000067e:	4618      	mov	r0, r3
20000680:	3708      	adds	r7, #8
20000682:	46bd      	mov	sp, r7
20000684:	bd80      	pop	{r7, pc}
	...

20000688 <fuzzer_setup>:
void crash_void(){ //The place where all bad errors go
    while(1);
}


int16_t fuzzer_setup(void * funPtr, mutationContext_t * mutPtr, poolContext_t * poolPtr){
20000688:	b580      	push	{r7, lr}
2000068a:	b084      	sub	sp, #16
2000068c:	af00      	add	r7, sp, #0
2000068e:	60f8      	str	r0, [r7, #12]
20000690:	60b9      	str	r1, [r7, #8]
20000692:	607a      	str	r2, [r7, #4]
 * 			poolPtr: Pointer to poolContext
 * @return 0 on success, -1 on failure
********************************************************/


	mutPtr->stageCycles = 0;
20000694:	68bb      	ldr	r3, [r7, #8]
20000696:	2200      	movs	r2, #0
20000698:	701a      	strb	r2, [r3, #0]
	mutPtr->mutationDegression = 1;
2000069a:	68bb      	ldr	r3, [r7, #8]
2000069c:	2201      	movs	r2, #1
2000069e:	805a      	strh	r2, [r3, #2]
	mutPtr->currentMutation = BITFLIP1_1;
200006a0:	68bb      	ldr	r3, [r7, #8]
200006a2:	2200      	movs	r2, #0
200006a4:	809a      	strh	r2, [r3, #4]
	mutPtr->testCaseBuffer = calloc(1, sizeof(testCase_t));
200006a6:	f44f 7182 	mov.w	r1, #260	@ 0x104
200006aa:	2001      	movs	r0, #1
200006ac:	f001 fee8 	bl	20002480 <calloc>
200006b0:	4603      	mov	r3, r0
200006b2:	461a      	mov	r2, r3
200006b4:	68bb      	ldr	r3, [r7, #8]
200006b6:	609a      	str	r2, [r3, #8]

	if(mutPtr->testCaseBuffer == NULL){
200006b8:	68bb      	ldr	r3, [r7, #8]
200006ba:	689b      	ldr	r3, [r3, #8]
200006bc:	2b00      	cmp	r3, #0
200006be:	d105      	bne.n	200006cc <fuzzer_setup+0x44>
		printf("Failed to get memory for input buffer.\n");
200006c0:	4817      	ldr	r0, [pc, #92]	@ (20000720 <fuzzer_setup+0x98>)
200006c2:	f002 f90f 	bl	200028e4 <puts>
		return -1;
200006c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
200006ca:	e025      	b.n	20000718 <fuzzer_setup+0x90>
	}


	poolPtr->nSeeds = 0;	/*To be loaded later by the debugger*/
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	2200      	movs	r2, #0
200006d0:	f8c3 2f40 	str.w	r2, [r3, #3904]	@ 0xf40
	poolPtr->poolCycles = 0;
200006d4:	687b      	ldr	r3, [r7, #4]
200006d6:	2200      	movs	r2, #0
200006d8:	805a      	strh	r2, [r3, #2]
	poolPtr->seedHead = 0;
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	2200      	movs	r2, #0
200006de:	701a      	strb	r2, [r3, #0]
	poolPtr->seedTail = LOCAL_POOL_SIZE - 1;
200006e0:	687b      	ldr	r3, [r7, #4]
200006e2:	220e      	movs	r2, #14
200006e4:	705a      	strb	r2, [r3, #1]
	memset(poolPtr->localPool, 0, sizeof(poolPtr->localPool));
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	3304      	adds	r3, #4
200006ea:	f640 723c 	movw	r2, #3900	@ 0xf3c
200006ee:	2100      	movs	r1, #0
200006f0:	4618      	mov	r0, r3
200006f2:	f002 f9d7 	bl	20002aa4 <memset>


	memset(g_coverageList,0,sizeof(g_coverageList));
200006f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
200006fa:	2100      	movs	r1, #0
200006fc:	4809      	ldr	r0, [pc, #36]	@ (20000724 <fuzzer_setup+0x9c>)
200006fe:	f002 f9d1 	bl	20002aa4 <memset>
    g_coverageList[0] = UINT_MAX;
20000702:	4b08      	ldr	r3, [pc, #32]	@ (20000724 <fuzzer_setup+0x9c>)
20000704:	f64f 72ff 	movw	r2, #65535	@ 0xffff
20000708:	801a      	strh	r2, [r3, #0]

    g_covListPtr = g_coverageList; //Used in ASM function to point to the coverage list
2000070a:	4b07      	ldr	r3, [pc, #28]	@ (20000728 <fuzzer_setup+0xa0>)
2000070c:	4a05      	ldr	r2, [pc, #20]	@ (20000724 <fuzzer_setup+0x9c>)
2000070e:	601a      	str	r2, [r3, #0]
    g_sutStartPtr = (uint32_t *)funPtr;
20000710:	4a06      	ldr	r2, [pc, #24]	@ (2000072c <fuzzer_setup+0xa4>)
20000712:	68fb      	ldr	r3, [r7, #12]
20000714:	6013      	str	r3, [r2, #0]

//    sut_start_address = ((uint32_t *)function_pointer); /*Finds the offset in memory of the start of our sut */


   return 0;
20000716:	2300      	movs	r3, #0

}
20000718:	4618      	mov	r0, r3
2000071a:	3710      	adds	r7, #16
2000071c:	46bd      	mov	sp, r7
2000071e:	bd80      	pop	{r7, pc}
20000720:	20003524 	.word	0x20003524
20000724:	200036d0 	.word	0x200036d0
20000728:	20003860 	.word	0x20003860
2000072c:	20003864 	.word	0x20003864

20000730 <mutator>:



int16_t  mutator(mutationContext_t * mutPtr, poolContext_t * poolPtr){
20000730:	b580      	push	{r7, lr}
20000732:	b08c      	sub	sp, #48	@ 0x30
20000734:	af00      	add	r7, sp, #0
20000736:	6078      	str	r0, [r7, #4]
20000738:	6039      	str	r1, [r7, #0]
 * @return void
 ********************************************************/
#define bitflip(value, b) (value ^ (1 << (b)))

	size_t i,j;
	uint8_t b = 0;
2000073a:	2300      	movs	r3, #0
2000073c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    size_t rndByte = 0;
20000740:	2300      	movs	r3, #0
20000742:	623b      	str	r3, [r7, #32]
    uint8_t rndBit = 0;
20000744:	2300      	movs	r3, #0
20000746:	75fb      	strb	r3, [r7, #23]
    uint8_t rndValue = 0;
20000748:	2300      	movs	r3, #0
2000074a:	75bb      	strb	r3, [r7, #22]

    uint8_t mutationPick = 0;
2000074c:	2300      	movs	r3, #0
2000074e:	757b      	strb	r3, [r7, #21]

    //TEST
    mutPtr->testCaseBuffer->size = 15;
20000750:	687b      	ldr	r3, [r7, #4]
20000752:	689b      	ldr	r3, [r3, #8]
20000754:	220f      	movs	r2, #15
20000756:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

    size_t inputSize = mutPtr->testCaseBuffer->size; //For readablity
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	689b      	ldr	r3, [r3, #8]
2000075e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
20000762:	613b      	str	r3, [r7, #16]
    volatile uint8_t * testCase = mutPtr->testCaseBuffer->testCase;
20000764:	687b      	ldr	r3, [r7, #4]
20000766:	689b      	ldr	r3, [r3, #8]
20000768:	60fb      	str	r3, [r7, #12]



    if(mutPtr == NULL){
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	2b00      	cmp	r3, #0
2000076e:	d103      	bne.n	20000778 <mutator+0x48>
		return -1;
20000770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
20000774:	f000 bce6 	b.w	20001144 <mutator+0xa14>
    }

    if(inputSize < MIN_TESTCASE_LEN || inputSize > MAX_TESTCASE_LEN){
20000778:	693b      	ldr	r3, [r7, #16]
2000077a:	2b03      	cmp	r3, #3
2000077c:	d903      	bls.n	20000786 <mutator+0x56>
2000077e:	693b      	ldr	r3, [r7, #16]
20000780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20000784:	d903      	bls.n	2000078e <mutator+0x5e>
        return -2;
20000786:	f06f 0301 	mvn.w	r3, #1
2000078a:	f000 bcdb 	b.w	20001144 <mutator+0xa14>
    }

    /*Mutation type calced here to increase readability. Readable out of struct easier from host*/
    if(mutPtr->stageCycles >= 192 || mutPtr->mutationDegression > 1){
2000078e:	687b      	ldr	r3, [r7, #4]
20000790:	781b      	ldrb	r3, [r3, #0]
20000792:	2bbf      	cmp	r3, #191	@ 0xbf
20000794:	d803      	bhi.n	2000079e <mutator+0x6e>
20000796:	687b      	ldr	r3, [r7, #4]
20000798:	885b      	ldrh	r3, [r3, #2]
2000079a:	2b01      	cmp	r3, #1
2000079c:	d903      	bls.n	200007a6 <mutator+0x76>
    	mutPtr->currentMutation = RANDOM;
2000079e:	687b      	ldr	r3, [r7, #4]
200007a0:	2208      	movs	r2, #8
200007a2:	809a      	strh	r2, [r3, #4]
200007a4:	e05b      	b.n	2000085e <mutator+0x12e>
    }
    else if(mutPtr->stageCycles < 2){
200007a6:	687b      	ldr	r3, [r7, #4]
200007a8:	781b      	ldrb	r3, [r3, #0]
200007aa:	2b01      	cmp	r3, #1
200007ac:	d803      	bhi.n	200007b6 <mutator+0x86>
    	mutPtr->currentMutation = BITFLIP1_1;
200007ae:	687b      	ldr	r3, [r7, #4]
200007b0:	2200      	movs	r2, #0
200007b2:	809a      	strh	r2, [r3, #4]
200007b4:	e053      	b.n	2000085e <mutator+0x12e>
    }
    else if(mutPtr->stageCycles < 4){
200007b6:	687b      	ldr	r3, [r7, #4]
200007b8:	781b      	ldrb	r3, [r3, #0]
200007ba:	2b03      	cmp	r3, #3
200007bc:	d803      	bhi.n	200007c6 <mutator+0x96>
		mutPtr->currentMutation = BITFLIP2_1;
200007be:	687b      	ldr	r3, [r7, #4]
200007c0:	2201      	movs	r2, #1
200007c2:	809a      	strh	r2, [r3, #4]
200007c4:	e04b      	b.n	2000085e <mutator+0x12e>
	}
    else if(mutPtr->stageCycles < 6){
200007c6:	687b      	ldr	r3, [r7, #4]
200007c8:	781b      	ldrb	r3, [r3, #0]
200007ca:	2b05      	cmp	r3, #5
200007cc:	d803      	bhi.n	200007d6 <mutator+0xa6>
		mutPtr->currentMutation = BITFLIP4_1;
200007ce:	687b      	ldr	r3, [r7, #4]
200007d0:	2202      	movs	r2, #2
200007d2:	809a      	strh	r2, [r3, #4]
200007d4:	e043      	b.n	2000085e <mutator+0x12e>
	}
    else if(mutPtr->stageCycles < 8){
200007d6:	687b      	ldr	r3, [r7, #4]
200007d8:	781b      	ldrb	r3, [r3, #0]
200007da:	2b07      	cmp	r3, #7
200007dc:	d803      	bhi.n	200007e6 <mutator+0xb6>
		mutPtr->currentMutation = BYTEFLIP1_1;
200007de:	687b      	ldr	r3, [r7, #4]
200007e0:	2203      	movs	r2, #3
200007e2:	809a      	strh	r2, [r3, #4]
200007e4:	e03b      	b.n	2000085e <mutator+0x12e>
	}
    else if(mutPtr->stageCycles < 10){
200007e6:	687b      	ldr	r3, [r7, #4]
200007e8:	781b      	ldrb	r3, [r3, #0]
200007ea:	2b09      	cmp	r3, #9
200007ec:	d803      	bhi.n	200007f6 <mutator+0xc6>
		mutPtr->currentMutation = BYTEFLIP2_1;
200007ee:	687b      	ldr	r3, [r7, #4]
200007f0:	2204      	movs	r2, #4
200007f2:	809a      	strh	r2, [r3, #4]
200007f4:	e033      	b.n	2000085e <mutator+0x12e>
	}
    else if(mutPtr->stageCycles < 12){
200007f6:	687b      	ldr	r3, [r7, #4]
200007f8:	781b      	ldrb	r3, [r3, #0]
200007fa:	2b0b      	cmp	r3, #11
200007fc:	d803      	bhi.n	20000806 <mutator+0xd6>
		mutPtr->currentMutation = BYTEFLIP4_1;
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	2205      	movs	r2, #5
20000802:	809a      	strh	r2, [r3, #4]
20000804:	e02b      	b.n	2000085e <mutator+0x12e>
	}
    else if(mutPtr->stageCycles < 82){
20000806:	687b      	ldr	r3, [r7, #4]
20000808:	781b      	ldrb	r3, [r3, #0]
2000080a:	2b51      	cmp	r3, #81	@ 0x51
2000080c:	d803      	bhi.n	20000816 <mutator+0xe6>
		mutPtr->currentMutation = ADDINTVALUE;
2000080e:	687b      	ldr	r3, [r7, #4]
20000810:	2206      	movs	r2, #6
20000812:	809a      	strh	r2, [r3, #4]
20000814:	e023      	b.n	2000085e <mutator+0x12e>
	}
    else if(mutPtr->stageCycles < 152){
20000816:	687b      	ldr	r3, [r7, #4]
20000818:	781b      	ldrb	r3, [r3, #0]
2000081a:	2b97      	cmp	r3, #151	@ 0x97
2000081c:	d803      	bhi.n	20000826 <mutator+0xf6>
		mutPtr->currentMutation = SUBINTVALUE;
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	2207      	movs	r2, #7
20000822:	809a      	strh	r2, [r3, #4]
20000824:	e01b      	b.n	2000085e <mutator+0x12e>
	}
    else if(mutPtr->stageCycles < 172 && poolPtr->nSeeds > 1){
20000826:	687b      	ldr	r3, [r7, #4]
20000828:	781b      	ldrb	r3, [r3, #0]
2000082a:	2bab      	cmp	r3, #171	@ 0xab
2000082c:	d808      	bhi.n	20000840 <mutator+0x110>
2000082e:	683b      	ldr	r3, [r7, #0]
20000830:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	@ 0xf40
20000834:	2b01      	cmp	r3, #1
20000836:	d903      	bls.n	20000840 <mutator+0x110>
    	//TODO: Add checks for input size here.
    	mutPtr->currentMutation = SPLICE;
20000838:	687b      	ldr	r3, [r7, #4]
2000083a:	2209      	movs	r2, #9
2000083c:	809a      	strh	r2, [r3, #4]
2000083e:	e00e      	b.n	2000085e <mutator+0x12e>
    }
    else if(mutPtr->stageCycles < 182){
20000840:	687b      	ldr	r3, [r7, #4]
20000842:	781b      	ldrb	r3, [r3, #0]
20000844:	2bb5      	cmp	r3, #181	@ 0xb5
20000846:	d803      	bhi.n	20000850 <mutator+0x120>
    	mutPtr->currentMutation = SHRINK;
20000848:	687b      	ldr	r3, [r7, #4]
2000084a:	220a      	movs	r2, #10
2000084c:	809a      	strh	r2, [r3, #4]
2000084e:	e006      	b.n	2000085e <mutator+0x12e>
    }
    else if(mutPtr->stageCycles < 192){
20000850:	687b      	ldr	r3, [r7, #4]
20000852:	781b      	ldrb	r3, [r3, #0]
20000854:	2bbf      	cmp	r3, #191	@ 0xbf
20000856:	d802      	bhi.n	2000085e <mutator+0x12e>
		mutPtr->currentMutation = PAD;
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	220b      	movs	r2, #11
2000085c:	809a      	strh	r2, [r3, #4]
    }


/*-------------------------Mutator Body--------------------------------*/

    if(mutPtr->currentMutation == BITFLIP1_1){
2000085e:	687b      	ldr	r3, [r7, #4]
20000860:	889b      	ldrh	r3, [r3, #4]
20000862:	2b00      	cmp	r3, #0
20000864:	d129      	bne.n	200008ba <mutator+0x18a>
        for(i = 0; i < inputSize; i++){
20000866:	2300      	movs	r3, #0
20000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
2000086a:	e020      	b.n	200008ae <mutator+0x17e>
            for(j = mutPtr->stageCycles % 2; j < 8; j += 2){
2000086c:	687b      	ldr	r3, [r7, #4]
2000086e:	781b      	ldrb	r3, [r3, #0]
20000870:	f003 0301 	and.w	r3, r3, #1
20000874:	62bb      	str	r3, [r7, #40]	@ 0x28
20000876:	e014      	b.n	200008a2 <mutator+0x172>
				testCase[i] = bitflip(testCase[i], j);
20000878:	68fa      	ldr	r2, [r7, #12]
2000087a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000087c:	4413      	add	r3, r2
2000087e:	781b      	ldrb	r3, [r3, #0]
20000880:	b2db      	uxtb	r3, r3
20000882:	b25a      	sxtb	r2, r3
20000884:	2101      	movs	r1, #1
20000886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20000888:	fa01 f303 	lsl.w	r3, r1, r3
2000088c:	b25b      	sxtb	r3, r3
2000088e:	4053      	eors	r3, r2
20000890:	b259      	sxtb	r1, r3
20000892:	68fa      	ldr	r2, [r7, #12]
20000894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000896:	4413      	add	r3, r2
20000898:	b2ca      	uxtb	r2, r1
2000089a:	701a      	strb	r2, [r3, #0]
            for(j = mutPtr->stageCycles % 2; j < 8; j += 2){
2000089c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000089e:	3302      	adds	r3, #2
200008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
200008a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200008a4:	2b07      	cmp	r3, #7
200008a6:	d9e7      	bls.n	20000878 <mutator+0x148>
        for(i = 0; i < inputSize; i++){
200008a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200008aa:	3301      	adds	r3, #1
200008ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
200008ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200008b0:	693b      	ldr	r3, [r7, #16]
200008b2:	429a      	cmp	r2, r3
200008b4:	d3da      	bcc.n	2000086c <mutator+0x13c>
200008b6:	f000 bc3e 	b.w	20001136 <mutator+0xa06>
			}
        }
    }

    else if(mutPtr->currentMutation == BITFLIP2_1){
200008ba:	687b      	ldr	r3, [r7, #4]
200008bc:	889b      	ldrh	r3, [r3, #4]
200008be:	2b01      	cmp	r3, #1
200008c0:	d136      	bne.n	20000930 <mutator+0x200>
        for(i = 0; i < inputSize; i++){
200008c2:	2300      	movs	r3, #0
200008c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
200008c6:	e02d      	b.n	20000924 <mutator+0x1f4>

        	for(j = 0; j < 8; j++){
200008c8:	2300      	movs	r3, #0
200008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
200008cc:	e024      	b.n	20000918 <mutator+0x1e8>
				if(b % 2 == 0){
200008ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
200008d2:	f003 0301 	and.w	r3, r3, #1
200008d6:	b2db      	uxtb	r3, r3
200008d8:	2b00      	cmp	r3, #0
200008da:	d117      	bne.n	2000090c <mutator+0x1dc>
					testCase[i] = bitflip(testCase[i], j);
200008dc:	68fa      	ldr	r2, [r7, #12]
200008de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200008e0:	4413      	add	r3, r2
200008e2:	781b      	ldrb	r3, [r3, #0]
200008e4:	b2db      	uxtb	r3, r3
200008e6:	b25a      	sxtb	r2, r3
200008e8:	2101      	movs	r1, #1
200008ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200008ec:	fa01 f303 	lsl.w	r3, r1, r3
200008f0:	b25b      	sxtb	r3, r3
200008f2:	4053      	eors	r3, r2
200008f4:	b259      	sxtb	r1, r3
200008f6:	68fa      	ldr	r2, [r7, #12]
200008f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200008fa:	4413      	add	r3, r2
200008fc:	b2ca      	uxtb	r2, r1
200008fe:	701a      	strb	r2, [r3, #0]
					b++;
20000900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
20000904:	3301      	adds	r3, #1
20000906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
2000090a:	e002      	b.n	20000912 <mutator+0x1e2>
				}
				else{
					b = 0;
2000090c:	2300      	movs	r3, #0
2000090e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        	for(j = 0; j < 8; j++){
20000912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20000914:	3301      	adds	r3, #1
20000916:	62bb      	str	r3, [r7, #40]	@ 0x28
20000918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000091a:	2b07      	cmp	r3, #7
2000091c:	d9d7      	bls.n	200008ce <mutator+0x19e>
        for(i = 0; i < inputSize; i++){
2000091e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000920:	3301      	adds	r3, #1
20000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20000926:	693b      	ldr	r3, [r7, #16]
20000928:	429a      	cmp	r2, r3
2000092a:	d3cd      	bcc.n	200008c8 <mutator+0x198>
2000092c:	f000 bc03 	b.w	20001136 <mutator+0xa06>
				}
			}
        }
    }

    else if(mutPtr->currentMutation == BITFLIP4_1){
20000930:	687b      	ldr	r3, [r7, #4]
20000932:	889b      	ldrh	r3, [r3, #4]
20000934:	2b02      	cmp	r3, #2
20000936:	d135      	bne.n	200009a4 <mutator+0x274>
        for(i = 0; i < inputSize; i++){
20000938:	2300      	movs	r3, #0
2000093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
2000093c:	e02d      	b.n	2000099a <mutator+0x26a>
            for(j = 0; j < 8; j++){
2000093e:	2300      	movs	r3, #0
20000940:	62bb      	str	r3, [r7, #40]	@ 0x28
20000942:	e024      	b.n	2000098e <mutator+0x25e>

            	if(b % 4 == 0){
20000944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
20000948:	f003 0303 	and.w	r3, r3, #3
2000094c:	b2db      	uxtb	r3, r3
2000094e:	2b00      	cmp	r3, #0
20000950:	d117      	bne.n	20000982 <mutator+0x252>
            		testCase[i] = bitflip(testCase[i], j);
20000952:	68fa      	ldr	r2, [r7, #12]
20000954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000956:	4413      	add	r3, r2
20000958:	781b      	ldrb	r3, [r3, #0]
2000095a:	b2db      	uxtb	r3, r3
2000095c:	b25a      	sxtb	r2, r3
2000095e:	2101      	movs	r1, #1
20000960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20000962:	fa01 f303 	lsl.w	r3, r1, r3
20000966:	b25b      	sxtb	r3, r3
20000968:	4053      	eors	r3, r2
2000096a:	b259      	sxtb	r1, r3
2000096c:	68fa      	ldr	r2, [r7, #12]
2000096e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000970:	4413      	add	r3, r2
20000972:	b2ca      	uxtb	r2, r1
20000974:	701a      	strb	r2, [r3, #0]
            		b++;
20000976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
2000097a:	3301      	adds	r3, #1
2000097c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
20000980:	e002      	b.n	20000988 <mutator+0x258>
            	}
            	else{
            		b = 0;
20000982:	2300      	movs	r3, #0
20000984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            for(j = 0; j < 8; j++){
20000988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000098a:	3301      	adds	r3, #1
2000098c:	62bb      	str	r3, [r7, #40]	@ 0x28
2000098e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20000990:	2b07      	cmp	r3, #7
20000992:	d9d7      	bls.n	20000944 <mutator+0x214>
        for(i = 0; i < inputSize; i++){
20000994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000996:	3301      	adds	r3, #1
20000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
2000099a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
2000099c:	693b      	ldr	r3, [r7, #16]
2000099e:	429a      	cmp	r2, r3
200009a0:	d3cd      	bcc.n	2000093e <mutator+0x20e>
200009a2:	e3c8      	b.n	20001136 <mutator+0xa06>
            	}
            }
        }
    }

    else if(mutPtr->currentMutation == BYTEFLIP1_1){
200009a4:	687b      	ldr	r3, [r7, #4]
200009a6:	889b      	ldrh	r3, [r3, #4]
200009a8:	2b03      	cmp	r3, #3
200009aa:	d118      	bne.n	200009de <mutator+0x2ae>
        for(i = mutPtr->stageCycles % 2; i < inputSize; i+=2){
200009ac:	687b      	ldr	r3, [r7, #4]
200009ae:	781b      	ldrb	r3, [r3, #0]
200009b0:	f003 0301 	and.w	r3, r3, #1
200009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
200009b6:	e00d      	b.n	200009d4 <mutator+0x2a4>
            testCase[i] = testCase[i] ^ 0xFF;
200009b8:	68fa      	ldr	r2, [r7, #12]
200009ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200009bc:	4413      	add	r3, r2
200009be:	781b      	ldrb	r3, [r3, #0]
200009c0:	b2da      	uxtb	r2, r3
200009c2:	68f9      	ldr	r1, [r7, #12]
200009c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200009c6:	440b      	add	r3, r1
200009c8:	43d2      	mvns	r2, r2
200009ca:	b2d2      	uxtb	r2, r2
200009cc:	701a      	strb	r2, [r3, #0]
        for(i = mutPtr->stageCycles % 2; i < inputSize; i+=2){
200009ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200009d0:	3302      	adds	r3, #2
200009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
200009d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200009d6:	693b      	ldr	r3, [r7, #16]
200009d8:	429a      	cmp	r2, r3
200009da:	d3ed      	bcc.n	200009b8 <mutator+0x288>
200009dc:	e3ab      	b.n	20001136 <mutator+0xa06>
        }
    }

    else if(mutPtr->currentMutation == BYTEFLIP2_1){
200009de:	687b      	ldr	r3, [r7, #4]
200009e0:	889b      	ldrh	r3, [r3, #4]
200009e2:	2b04      	cmp	r3, #4
200009e4:	d128      	bne.n	20000a38 <mutator+0x308>
        for(i = mutPtr->stageCycles % 2; i < inputSize; i++){
200009e6:	687b      	ldr	r3, [r7, #4]
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	f003 0301 	and.w	r3, r3, #1
200009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
200009f0:	e01d      	b.n	20000a2e <mutator+0x2fe>

        	if(!(b % 2 == 0)){
200009f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
200009f6:	f003 0301 	and.w	r3, r3, #1
200009fa:	b2db      	uxtb	r3, r3
200009fc:	2b00      	cmp	r3, #0
200009fe:	d010      	beq.n	20000a22 <mutator+0x2f2>
        		testCase[i] = testCase[i] ^ 0xFF;
20000a00:	68fa      	ldr	r2, [r7, #12]
20000a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000a04:	4413      	add	r3, r2
20000a06:	781b      	ldrb	r3, [r3, #0]
20000a08:	b2da      	uxtb	r2, r3
20000a0a:	68f9      	ldr	r1, [r7, #12]
20000a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000a0e:	440b      	add	r3, r1
20000a10:	43d2      	mvns	r2, r2
20000a12:	b2d2      	uxtb	r2, r2
20000a14:	701a      	strb	r2, [r3, #0]
        		b++;
20000a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
20000a1a:	3301      	adds	r3, #1
20000a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
20000a20:	e002      	b.n	20000a28 <mutator+0x2f8>
        	}
        	else{
        		b = 0;
20000a22:	2300      	movs	r3, #0
20000a24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for(i = mutPtr->stageCycles % 2; i < inputSize; i++){
20000a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000a2a:	3301      	adds	r3, #1
20000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20000a30:	693b      	ldr	r3, [r7, #16]
20000a32:	429a      	cmp	r2, r3
20000a34:	d3dd      	bcc.n	200009f2 <mutator+0x2c2>
20000a36:	e37e      	b.n	20001136 <mutator+0xa06>
        	}
        }
    }

    else if(mutPtr->currentMutation == BYTEFLIP4_1){
20000a38:	687b      	ldr	r3, [r7, #4]
20000a3a:	889b      	ldrh	r3, [r3, #4]
20000a3c:	2b05      	cmp	r3, #5
20000a3e:	d11d      	bne.n	20000a7c <mutator+0x34c>

        for(i = mutPtr->stageCycles % 2; i < inputSize; i++){
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	781b      	ldrb	r3, [r3, #0]
20000a44:	f003 0301 	and.w	r3, r3, #1
20000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000a4a:	e012      	b.n	20000a72 <mutator+0x342>
        	if(!(i % 4 == 0)){
20000a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000a4e:	f003 0303 	and.w	r3, r3, #3
20000a52:	2b00      	cmp	r3, #0
20000a54:	d00a      	beq.n	20000a6c <mutator+0x33c>
				testCase[i] = testCase[i] ^ 0xFF;
20000a56:	68fa      	ldr	r2, [r7, #12]
20000a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000a5a:	4413      	add	r3, r2
20000a5c:	781b      	ldrb	r3, [r3, #0]
20000a5e:	b2da      	uxtb	r2, r3
20000a60:	68f9      	ldr	r1, [r7, #12]
20000a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000a64:	440b      	add	r3, r1
20000a66:	43d2      	mvns	r2, r2
20000a68:	b2d2      	uxtb	r2, r2
20000a6a:	701a      	strb	r2, [r3, #0]
        for(i = mutPtr->stageCycles % 2; i < inputSize; i++){
20000a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000a6e:	3301      	adds	r3, #1
20000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20000a74:	693b      	ldr	r3, [r7, #16]
20000a76:	429a      	cmp	r2, r3
20000a78:	d3e8      	bcc.n	20000a4c <mutator+0x31c>
20000a7a:	e35c      	b.n	20001136 <mutator+0xa06>
			}
        }
    }
    else if(mutPtr->currentMutation == ADDINTVALUE && mutPtr->stageCycles > 46){
20000a7c:	687b      	ldr	r3, [r7, #4]
20000a7e:	889b      	ldrh	r3, [r3, #4]
20000a80:	2b06      	cmp	r3, #6
20000a82:	d12a      	bne.n	20000ada <mutator+0x3aa>
20000a84:	687b      	ldr	r3, [r7, #4]
20000a86:	781b      	ldrb	r3, [r3, #0]
20000a88:	2b2e      	cmp	r3, #46	@ 0x2e
20000a8a:	d926      	bls.n	20000ada <mutator+0x3aa>
         for (i = 1; i < inputSize - 1; i+=2){
20000a8c:	2301      	movs	r3, #1
20000a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000a90:	e01d      	b.n	20000ace <mutator+0x39e>
         	testCase[i] = testCase[i] + (mutPtr->stageCycles % 35);
20000a92:	68fa      	ldr	r2, [r7, #12]
20000a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000a96:	4413      	add	r3, r2
20000a98:	781b      	ldrb	r3, [r3, #0]
20000a9a:	b2d8      	uxtb	r0, r3
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	7819      	ldrb	r1, [r3, #0]
20000aa0:	4b9c      	ldr	r3, [pc, #624]	@ (20000d14 <mutator+0x5e4>)
20000aa2:	fba3 2301 	umull	r2, r3, r3, r1
20000aa6:	1aca      	subs	r2, r1, r3
20000aa8:	0852      	lsrs	r2, r2, #1
20000aaa:	4413      	add	r3, r2
20000aac:	095a      	lsrs	r2, r3, #5
20000aae:	4613      	mov	r3, r2
20000ab0:	009b      	lsls	r3, r3, #2
20000ab2:	4413      	add	r3, r2
20000ab4:	00da      	lsls	r2, r3, #3
20000ab6:	1ad2      	subs	r2, r2, r3
20000ab8:	1a8b      	subs	r3, r1, r2
20000aba:	b2da      	uxtb	r2, r3
20000abc:	68f9      	ldr	r1, [r7, #12]
20000abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000ac0:	440b      	add	r3, r1
20000ac2:	4402      	add	r2, r0
20000ac4:	b2d2      	uxtb	r2, r2
20000ac6:	701a      	strb	r2, [r3, #0]
         for (i = 1; i < inputSize - 1; i+=2){
20000ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000aca:	3302      	adds	r3, #2
20000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000ace:	693b      	ldr	r3, [r7, #16]
20000ad0:	3b01      	subs	r3, #1
20000ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20000ad4:	429a      	cmp	r2, r3
20000ad6:	d3dc      	bcc.n	20000a92 <mutator+0x362>
    else if(mutPtr->currentMutation == ADDINTVALUE && mutPtr->stageCycles > 46){
20000ad8:	e32d      	b.n	20001136 <mutator+0xa06>
         }
    }
    else if(mutPtr->currentMutation == ADDINTVALUE){
20000ada:	687b      	ldr	r3, [r7, #4]
20000adc:	889b      	ldrh	r3, [r3, #4]
20000ade:	2b06      	cmp	r3, #6
20000ae0:	d125      	bne.n	20000b2e <mutator+0x3fe>
        for(i = 0; i < inputSize; i+=2){
20000ae2:	2300      	movs	r3, #0
20000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000ae6:	e01d      	b.n	20000b24 <mutator+0x3f4>
        	testCase[i] = testCase[i] + (mutPtr->stageCycles % 35);
20000ae8:	68fa      	ldr	r2, [r7, #12]
20000aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000aec:	4413      	add	r3, r2
20000aee:	781b      	ldrb	r3, [r3, #0]
20000af0:	b2d8      	uxtb	r0, r3
20000af2:	687b      	ldr	r3, [r7, #4]
20000af4:	7819      	ldrb	r1, [r3, #0]
20000af6:	4b87      	ldr	r3, [pc, #540]	@ (20000d14 <mutator+0x5e4>)
20000af8:	fba3 2301 	umull	r2, r3, r3, r1
20000afc:	1aca      	subs	r2, r1, r3
20000afe:	0852      	lsrs	r2, r2, #1
20000b00:	4413      	add	r3, r2
20000b02:	095a      	lsrs	r2, r3, #5
20000b04:	4613      	mov	r3, r2
20000b06:	009b      	lsls	r3, r3, #2
20000b08:	4413      	add	r3, r2
20000b0a:	00da      	lsls	r2, r3, #3
20000b0c:	1ad2      	subs	r2, r2, r3
20000b0e:	1a8b      	subs	r3, r1, r2
20000b10:	b2da      	uxtb	r2, r3
20000b12:	68f9      	ldr	r1, [r7, #12]
20000b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000b16:	440b      	add	r3, r1
20000b18:	4402      	add	r2, r0
20000b1a:	b2d2      	uxtb	r2, r2
20000b1c:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < inputSize; i+=2){
20000b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000b20:	3302      	adds	r3, #2
20000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20000b26:	693b      	ldr	r3, [r7, #16]
20000b28:	429a      	cmp	r2, r3
20000b2a:	d3dd      	bcc.n	20000ae8 <mutator+0x3b8>
20000b2c:	e303      	b.n	20001136 <mutator+0xa06>

        }
   }
    else if(mutPtr->currentMutation == SUBINTVALUE && mutPtr->stageCycles > 82){
20000b2e:	687b      	ldr	r3, [r7, #4]
20000b30:	889b      	ldrh	r3, [r3, #4]
20000b32:	2b07      	cmp	r3, #7
20000b34:	d12a      	bne.n	20000b8c <mutator+0x45c>
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	781b      	ldrb	r3, [r3, #0]
20000b3a:	2b52      	cmp	r3, #82	@ 0x52
20000b3c:	d926      	bls.n	20000b8c <mutator+0x45c>
        for(i = 1; i < inputSize -1; i+=2){
20000b3e:	2301      	movs	r3, #1
20000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000b42:	e01d      	b.n	20000b80 <mutator+0x450>
                testCase[i] = testCase[i] - (mutPtr->stageCycles % 35);
20000b44:	68fa      	ldr	r2, [r7, #12]
20000b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000b48:	4413      	add	r3, r2
20000b4a:	781b      	ldrb	r3, [r3, #0]
20000b4c:	b2d8      	uxtb	r0, r3
20000b4e:	687b      	ldr	r3, [r7, #4]
20000b50:	7819      	ldrb	r1, [r3, #0]
20000b52:	4b70      	ldr	r3, [pc, #448]	@ (20000d14 <mutator+0x5e4>)
20000b54:	fba3 2301 	umull	r2, r3, r3, r1
20000b58:	1aca      	subs	r2, r1, r3
20000b5a:	0852      	lsrs	r2, r2, #1
20000b5c:	4413      	add	r3, r2
20000b5e:	095a      	lsrs	r2, r3, #5
20000b60:	4613      	mov	r3, r2
20000b62:	009b      	lsls	r3, r3, #2
20000b64:	4413      	add	r3, r2
20000b66:	00da      	lsls	r2, r3, #3
20000b68:	1ad2      	subs	r2, r2, r3
20000b6a:	1a8b      	subs	r3, r1, r2
20000b6c:	b2da      	uxtb	r2, r3
20000b6e:	68f9      	ldr	r1, [r7, #12]
20000b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000b72:	440b      	add	r3, r1
20000b74:	1a82      	subs	r2, r0, r2
20000b76:	b2d2      	uxtb	r2, r2
20000b78:	701a      	strb	r2, [r3, #0]
        for(i = 1; i < inputSize -1; i+=2){
20000b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000b7c:	3302      	adds	r3, #2
20000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000b80:	693b      	ldr	r3, [r7, #16]
20000b82:	3b01      	subs	r3, #1
20000b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20000b86:	429a      	cmp	r2, r3
20000b88:	d3dc      	bcc.n	20000b44 <mutator+0x414>
    else if(mutPtr->currentMutation == SUBINTVALUE && mutPtr->stageCycles > 82){
20000b8a:	e2d4      	b.n	20001136 <mutator+0xa06>

        }
    }

    else if(mutPtr->currentMutation == SUBINTVALUE){
20000b8c:	687b      	ldr	r3, [r7, #4]
20000b8e:	889b      	ldrh	r3, [r3, #4]
20000b90:	2b07      	cmp	r3, #7
20000b92:	d125      	bne.n	20000be0 <mutator+0x4b0>
        for(i = 0; i < inputSize; i+=2){
20000b94:	2300      	movs	r3, #0
20000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000b98:	e01d      	b.n	20000bd6 <mutator+0x4a6>
                testCase[i] = testCase[i] - (mutPtr->stageCycles % 35);
20000b9a:	68fa      	ldr	r2, [r7, #12]
20000b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000b9e:	4413      	add	r3, r2
20000ba0:	781b      	ldrb	r3, [r3, #0]
20000ba2:	b2d8      	uxtb	r0, r3
20000ba4:	687b      	ldr	r3, [r7, #4]
20000ba6:	7819      	ldrb	r1, [r3, #0]
20000ba8:	4b5a      	ldr	r3, [pc, #360]	@ (20000d14 <mutator+0x5e4>)
20000baa:	fba3 2301 	umull	r2, r3, r3, r1
20000bae:	1aca      	subs	r2, r1, r3
20000bb0:	0852      	lsrs	r2, r2, #1
20000bb2:	4413      	add	r3, r2
20000bb4:	095a      	lsrs	r2, r3, #5
20000bb6:	4613      	mov	r3, r2
20000bb8:	009b      	lsls	r3, r3, #2
20000bba:	4413      	add	r3, r2
20000bbc:	00da      	lsls	r2, r3, #3
20000bbe:	1ad2      	subs	r2, r2, r3
20000bc0:	1a8b      	subs	r3, r1, r2
20000bc2:	b2da      	uxtb	r2, r3
20000bc4:	68f9      	ldr	r1, [r7, #12]
20000bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000bc8:	440b      	add	r3, r1
20000bca:	1a82      	subs	r2, r0, r2
20000bcc:	b2d2      	uxtb	r2, r2
20000bce:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < inputSize; i+=2){
20000bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000bd2:	3302      	adds	r3, #2
20000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20000bd8:	693b      	ldr	r3, [r7, #16]
20000bda:	429a      	cmp	r2, r3
20000bdc:	d3dd      	bcc.n	20000b9a <mutator+0x46a>
20000bde:	e2aa      	b.n	20001136 <mutator+0xa06>

        }
    }

    else if(mutPtr->currentMutation == SPLICE){
20000be0:	687b      	ldr	r3, [r7, #4]
20000be2:	889b      	ldrh	r3, [r3, #4]
20000be4:	2b09      	cmp	r3, #9
20000be6:	d158      	bne.n	20000c9a <mutator+0x56a>
    	size_t rndSeed = rand() % poolPtr->nSeeds; //Choose a random seed to SPLICE with current testcase
20000be8:	f001 fd26 	bl	20002638 <rand>
20000bec:	4603      	mov	r3, r0
20000bee:	461a      	mov	r2, r3
20000bf0:	683b      	ldr	r3, [r7, #0]
20000bf2:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	@ 0xf40
20000bf6:	fbb2 f1f3 	udiv	r1, r2, r3
20000bfa:	fb01 f303 	mul.w	r3, r1, r3
20000bfe:	1ad3      	subs	r3, r2, r3
20000c00:	60bb      	str	r3, [r7, #8]
    	size_t posCur = mutPtr->testCaseBuffer->size/2;
20000c02:	687b      	ldr	r3, [r7, #4]
20000c04:	689b      	ldr	r3, [r3, #8]
20000c06:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
20000c0a:	085b      	lsrs	r3, r3, #1
20000c0c:	61fb      	str	r3, [r7, #28]
    	size_t posNext = poolPtr->localPool[rndSeed].size/2;
20000c0e:	6839      	ldr	r1, [r7, #0]
20000c10:	68ba      	ldr	r2, [r7, #8]
20000c12:	4613      	mov	r3, r2
20000c14:	019b      	lsls	r3, r3, #6
20000c16:	4413      	add	r3, r2
20000c18:	009b      	lsls	r3, r3, #2
20000c1a:	440b      	add	r3, r1
20000c1c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
20000c20:	681b      	ldr	r3, [r3, #0]
20000c22:	085b      	lsrs	r3, r3, #1
20000c24:	61bb      	str	r3, [r7, #24]

    	//This will eventaully cause a problem
    	if(posCur == 0){
20000c26:	69fb      	ldr	r3, [r7, #28]
20000c28:	2b00      	cmp	r3, #0
20000c2a:	d102      	bne.n	20000c32 <mutator+0x502>
    		posCur++;
20000c2c:	69fb      	ldr	r3, [r7, #28]
20000c2e:	3301      	adds	r3, #1
20000c30:	61fb      	str	r3, [r7, #28]
    	}
    	if(posNext == 0){
20000c32:	69bb      	ldr	r3, [r7, #24]
20000c34:	2b00      	cmp	r3, #0
20000c36:	d128      	bne.n	20000c8a <mutator+0x55a>
    		posNext++;
20000c38:	69bb      	ldr	r3, [r7, #24]
20000c3a:	3301      	adds	r3, #1
20000c3c:	61bb      	str	r3, [r7, #24]
    	}
    	for(posCur; posCur < mutPtr->testCaseBuffer->size; posCur++){
20000c3e:	e024      	b.n	20000c8a <mutator+0x55a>
    		testCase[posCur] = poolPtr->localPool[rndSeed].testCase[posNext];
20000c40:	68fa      	ldr	r2, [r7, #12]
20000c42:	69fb      	ldr	r3, [r7, #28]
20000c44:	18d1      	adds	r1, r2, r3
20000c46:	6838      	ldr	r0, [r7, #0]
20000c48:	68ba      	ldr	r2, [r7, #8]
20000c4a:	4613      	mov	r3, r2
20000c4c:	019b      	lsls	r3, r3, #6
20000c4e:	4413      	add	r3, r2
20000c50:	009b      	lsls	r3, r3, #2
20000c52:	18c2      	adds	r2, r0, r3
20000c54:	69bb      	ldr	r3, [r7, #24]
20000c56:	4413      	add	r3, r2
20000c58:	3304      	adds	r3, #4
20000c5a:	781b      	ldrb	r3, [r3, #0]
20000c5c:	b2db      	uxtb	r3, r3
20000c5e:	700b      	strb	r3, [r1, #0]
    		posNext++;
20000c60:	69bb      	ldr	r3, [r7, #24]
20000c62:	3301      	adds	r3, #1
20000c64:	61bb      	str	r3, [r7, #24]
    		if(posNext >= poolPtr->localPool[rndSeed].size/2){
20000c66:	6839      	ldr	r1, [r7, #0]
20000c68:	68ba      	ldr	r2, [r7, #8]
20000c6a:	4613      	mov	r3, r2
20000c6c:	019b      	lsls	r3, r3, #6
20000c6e:	4413      	add	r3, r2
20000c70:	009b      	lsls	r3, r3, #2
20000c72:	440b      	add	r3, r1
20000c74:	f503 7382 	add.w	r3, r3, #260	@ 0x104
20000c78:	681b      	ldr	r3, [r3, #0]
20000c7a:	085b      	lsrs	r3, r3, #1
20000c7c:	69ba      	ldr	r2, [r7, #24]
20000c7e:	429a      	cmp	r2, r3
20000c80:	f080 8258 	bcs.w	20001134 <mutator+0xa04>
    	for(posCur; posCur < mutPtr->testCaseBuffer->size; posCur++){
20000c84:	69fb      	ldr	r3, [r7, #28]
20000c86:	3301      	adds	r3, #1
20000c88:	61fb      	str	r3, [r7, #28]
20000c8a:	687b      	ldr	r3, [r7, #4]
20000c8c:	689b      	ldr	r3, [r3, #8]
20000c8e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
20000c92:	69fa      	ldr	r2, [r7, #28]
20000c94:	429a      	cmp	r2, r3
20000c96:	d3d3      	bcc.n	20000c40 <mutator+0x510>
20000c98:	e24d      	b.n	20001136 <mutator+0xa06>
    		}
    	}


    }
    else if(mutPtr->currentMutation == SHRINK){
20000c9a:	687b      	ldr	r3, [r7, #4]
20000c9c:	889b      	ldrh	r3, [r3, #4]
20000c9e:	2b0a      	cmp	r3, #10
20000ca0:	d13a      	bne.n	20000d18 <mutator+0x5e8>
    	rndValue = (uint8_t)rand() % (MAX_TESTCASE_LEN /2);
20000ca2:	f001 fcc9 	bl	20002638 <rand>
20000ca6:	4603      	mov	r3, r0
20000ca8:	b2db      	uxtb	r3, r3
20000caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20000cae:	75bb      	strb	r3, [r7, #22]

    	if((int16_t)(mutPtr->testCaseBuffer->size - rndValue) <= MIN_TESTCASE_LEN){
20000cb0:	687b      	ldr	r3, [r7, #4]
20000cb2:	689b      	ldr	r3, [r3, #8]
20000cb4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
20000cb8:	b29a      	uxth	r2, r3
20000cba:	7dbb      	ldrb	r3, [r7, #22]
20000cbc:	b29b      	uxth	r3, r3
20000cbe:	1ad3      	subs	r3, r2, r3
20000cc0:	b29b      	uxth	r3, r3
20000cc2:	b21b      	sxth	r3, r3
20000cc4:	2b04      	cmp	r3, #4
20000cc6:	f340 8236 	ble.w	20001136 <mutator+0xa06>
    		; //Don't need to shrink this test case. It is already at a minimum.
    	}
    	else{
    		for(i = mutPtr->testCaseBuffer->size -1; i > mutPtr->testCaseBuffer->size - rndValue; i--){
20000cca:	687b      	ldr	r3, [r7, #4]
20000ccc:	689b      	ldr	r3, [r3, #8]
20000cce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
20000cd2:	3b01      	subs	r3, #1
20000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000cd6:	e008      	b.n	20000cea <mutator+0x5ba>
    			mutPtr->testCaseBuffer->testCase[i] = (uint8_t)'\0';
20000cd8:	687b      	ldr	r3, [r7, #4]
20000cda:	689a      	ldr	r2, [r3, #8]
20000cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000cde:	4413      	add	r3, r2
20000ce0:	2200      	movs	r2, #0
20000ce2:	701a      	strb	r2, [r3, #0]
    		for(i = mutPtr->testCaseBuffer->size -1; i > mutPtr->testCaseBuffer->size - rndValue; i--){
20000ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000ce6:	3b01      	subs	r3, #1
20000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000cea:	687b      	ldr	r3, [r7, #4]
20000cec:	689b      	ldr	r3, [r3, #8]
20000cee:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
20000cf2:	7dbb      	ldrb	r3, [r7, #22]
20000cf4:	1ad3      	subs	r3, r2, r3
20000cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20000cf8:	429a      	cmp	r2, r3
20000cfa:	d8ed      	bhi.n	20000cd8 <mutator+0x5a8>
    		}
    		mutPtr->testCaseBuffer->size -= rndValue;
20000cfc:	687b      	ldr	r3, [r7, #4]
20000cfe:	689b      	ldr	r3, [r3, #8]
20000d00:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
20000d04:	7dba      	ldrb	r2, [r7, #22]
20000d06:	687b      	ldr	r3, [r7, #4]
20000d08:	689b      	ldr	r3, [r3, #8]
20000d0a:	1a8a      	subs	r2, r1, r2
20000d0c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
20000d10:	e211      	b.n	20001136 <mutator+0xa06>
20000d12:	bf00      	nop
20000d14:	d41d41d5 	.word	0xd41d41d5
    	}
    }
    else if(mutPtr->currentMutation == PAD){
20000d18:	687b      	ldr	r3, [r7, #4]
20000d1a:	889b      	ldrh	r3, [r3, #4]
20000d1c:	2b0b      	cmp	r3, #11
20000d1e:	d132      	bne.n	20000d86 <mutator+0x656>
    	rndValue = (uint8_t)rand() % (MAX_TESTCASE_LEN /2);
20000d20:	f001 fc8a 	bl	20002638 <rand>
20000d24:	4603      	mov	r3, r0
20000d26:	b2db      	uxtb	r3, r3
20000d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20000d2c:	75bb      	strb	r3, [r7, #22]
    	if((mutPtr->testCaseBuffer->size + rndValue) >= MAX_TESTCASE_LEN){
20000d2e:	687b      	ldr	r3, [r7, #4]
20000d30:	689b      	ldr	r3, [r3, #8]
20000d32:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
20000d36:	7dbb      	ldrb	r3, [r7, #22]
20000d38:	4413      	add	r3, r2
20000d3a:	2bff      	cmp	r3, #255	@ 0xff
20000d3c:	f200 81fb 	bhi.w	20001136 <mutator+0xa06>
			;//Don't need to pad this test case. It is already at a maximal range.
		}
		else{
			for(i = mutPtr->testCaseBuffer->size; i < mutPtr->testCaseBuffer->size + rndValue; i++){
20000d40:	687b      	ldr	r3, [r7, #4]
20000d42:	689b      	ldr	r3, [r3, #8]
20000d44:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
20000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000d4a:	e008      	b.n	20000d5e <mutator+0x62e>
				mutPtr->testCaseBuffer->testCase[i] = (uint8_t)'E';
20000d4c:	687b      	ldr	r3, [r7, #4]
20000d4e:	689a      	ldr	r2, [r3, #8]
20000d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000d52:	4413      	add	r3, r2
20000d54:	2245      	movs	r2, #69	@ 0x45
20000d56:	701a      	strb	r2, [r3, #0]
			for(i = mutPtr->testCaseBuffer->size; i < mutPtr->testCaseBuffer->size + rndValue; i++){
20000d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000d5a:	3301      	adds	r3, #1
20000d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000d5e:	687b      	ldr	r3, [r7, #4]
20000d60:	689b      	ldr	r3, [r3, #8]
20000d62:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
20000d66:	7dbb      	ldrb	r3, [r7, #22]
20000d68:	4413      	add	r3, r2
20000d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20000d6c:	429a      	cmp	r2, r3
20000d6e:	d3ed      	bcc.n	20000d4c <mutator+0x61c>
			}
			mutPtr->testCaseBuffer->size += rndValue;
20000d70:	687b      	ldr	r3, [r7, #4]
20000d72:	689b      	ldr	r3, [r3, #8]
20000d74:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
20000d78:	7dba      	ldrb	r2, [r7, #22]
20000d7a:	687b      	ldr	r3, [r7, #4]
20000d7c:	689b      	ldr	r3, [r3, #8]
20000d7e:	440a      	add	r2, r1
20000d80:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
20000d84:	e1d7      	b.n	20001136 <mutator+0xa06>
		}
    }

    else if(mutPtr->currentMutation == RANDOM){
20000d86:	687b      	ldr	r3, [r7, #4]
20000d88:	889b      	ldrh	r3, [r3, #4]
20000d8a:	2b08      	cmp	r3, #8
20000d8c:	f040 81d3 	bne.w	20001136 <mutator+0xa06>
    	//TODO: Interface with the mutaiton degression here
//        if(mutation_degression == 0){
//        	exit(-1);
//        }

        rndValue = (uint8_t)rand() % 100; // Perform a random amount of random mutations
20000d90:	f001 fc52 	bl	20002638 <rand>
20000d94:	4603      	mov	r3, r0
20000d96:	b2db      	uxtb	r3, r3
20000d98:	4aa7      	ldr	r2, [pc, #668]	@ (20001038 <mutator+0x908>)
20000d9a:	fba2 1203 	umull	r1, r2, r2, r3
20000d9e:	0952      	lsrs	r2, r2, #5
20000da0:	2164      	movs	r1, #100	@ 0x64
20000da2:	fb01 f202 	mul.w	r2, r1, r2
20000da6:	1a9b      	subs	r3, r3, r2
20000da8:	75bb      	strb	r3, [r7, #22]

        for(i = 0; i < rndValue; i++){
20000daa:	2300      	movs	r3, #0
20000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
20000dae:	e1bb      	b.n	20001128 <mutator+0x9f8>
        	mutationPick = (uint8_t)rand() % 12; //Choose another mutatation
20000db0:	f001 fc42 	bl	20002638 <rand>
20000db4:	4603      	mov	r3, r0
20000db6:	b2da      	uxtb	r2, r3
20000db8:	4ba0      	ldr	r3, [pc, #640]	@ (2000103c <mutator+0x90c>)
20000dba:	fba3 1302 	umull	r1, r3, r3, r2
20000dbe:	08d9      	lsrs	r1, r3, #3
20000dc0:	460b      	mov	r3, r1
20000dc2:	005b      	lsls	r3, r3, #1
20000dc4:	440b      	add	r3, r1
20000dc6:	009b      	lsls	r3, r3, #2
20000dc8:	1ad3      	subs	r3, r2, r3
20000dca:	757b      	strb	r3, [r7, #21]

            rndByte = (uint8_t)rand() % inputSize;
20000dcc:	f001 fc34 	bl	20002638 <rand>
20000dd0:	4603      	mov	r3, r0
20000dd2:	b2db      	uxtb	r3, r3
20000dd4:	693a      	ldr	r2, [r7, #16]
20000dd6:	fbb3 f2f2 	udiv	r2, r3, r2
20000dda:	6939      	ldr	r1, [r7, #16]
20000ddc:	fb01 f202 	mul.w	r2, r1, r2
20000de0:	1a9b      	subs	r3, r3, r2
20000de2:	623b      	str	r3, [r7, #32]

            switch (mutationPick)
20000de4:	7d7b      	ldrb	r3, [r7, #21]
20000de6:	2b0b      	cmp	r3, #11
20000de8:	f200 819a 	bhi.w	20001120 <mutator+0x9f0>
20000dec:	a201      	add	r2, pc, #4	@ (adr r2, 20000df4 <mutator+0x6c4>)
20000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000df2:	bf00      	nop
20000df4:	20000e25 	.word	0x20000e25
20000df8:	20000e37 	.word	0x20000e37
20000dfc:	20000e67 	.word	0x20000e67
20000e00:	20000e83 	.word	0x20000e83
20000e04:	20000e9f 	.word	0x20000e9f
20000e08:	20000ecf 	.word	0x20000ecf
20000e0c:	20000f03 	.word	0x20000f03
20000e10:	20000f6f 	.word	0x20000f6f
20000e14:	20001021 	.word	0x20001021
20000e18:	2000104d 	.word	0x2000104d
20000e1c:	20001097 	.word	0x20001097
20000e20:	20001115 	.word	0x20001115
            {
            case 0:
                testCase[rndByte] = (uint8_t)rand() % 256; //Replace a random byte with another random byte.
20000e24:	f001 fc08 	bl	20002638 <rand>
20000e28:	4601      	mov	r1, r0
20000e2a:	68fa      	ldr	r2, [r7, #12]
20000e2c:	6a3b      	ldr	r3, [r7, #32]
20000e2e:	4413      	add	r3, r2
20000e30:	b2ca      	uxtb	r2, r1
20000e32:	701a      	strb	r2, [r3, #0]
                break;
20000e34:	e175      	b.n	20001122 <mutator+0x9f2>
            case 1:
                testCase[rndByte] = testCase[rndByte] + (mutPtr->stageCycles % 34); //Add a random 'char'
20000e36:	68fa      	ldr	r2, [r7, #12]
20000e38:	6a3b      	ldr	r3, [r7, #32]
20000e3a:	4413      	add	r3, r2
20000e3c:	781b      	ldrb	r3, [r3, #0]
20000e3e:	b2d8      	uxtb	r0, r3
20000e40:	687b      	ldr	r3, [r7, #4]
20000e42:	781a      	ldrb	r2, [r3, #0]
20000e44:	4b7e      	ldr	r3, [pc, #504]	@ (20001040 <mutator+0x910>)
20000e46:	fba3 1302 	umull	r1, r3, r3, r2
20000e4a:	0959      	lsrs	r1, r3, #5
20000e4c:	460b      	mov	r3, r1
20000e4e:	011b      	lsls	r3, r3, #4
20000e50:	440b      	add	r3, r1
20000e52:	005b      	lsls	r3, r3, #1
20000e54:	1ad3      	subs	r3, r2, r3
20000e56:	b2da      	uxtb	r2, r3
20000e58:	68f9      	ldr	r1, [r7, #12]
20000e5a:	6a3b      	ldr	r3, [r7, #32]
20000e5c:	440b      	add	r3, r1
20000e5e:	4402      	add	r2, r0
20000e60:	b2d2      	uxtb	r2, r2
20000e62:	701a      	strb	r2, [r3, #0]
                break;
20000e64:	e15d      	b.n	20001122 <mutator+0x9f2>
            case 2:
                testCase[rndByte] = testCase[rndByte] + (mutPtr->stageCycles % 256); //Add a random byte
20000e66:	68fa      	ldr	r2, [r7, #12]
20000e68:	6a3b      	ldr	r3, [r7, #32]
20000e6a:	4413      	add	r3, r2
20000e6c:	781b      	ldrb	r3, [r3, #0]
20000e6e:	b2d9      	uxtb	r1, r3
20000e70:	687b      	ldr	r3, [r7, #4]
20000e72:	781a      	ldrb	r2, [r3, #0]
20000e74:	68f8      	ldr	r0, [r7, #12]
20000e76:	6a3b      	ldr	r3, [r7, #32]
20000e78:	4403      	add	r3, r0
20000e7a:	440a      	add	r2, r1
20000e7c:	b2d2      	uxtb	r2, r2
20000e7e:	701a      	strb	r2, [r3, #0]
                break;
20000e80:	e14f      	b.n	20001122 <mutator+0x9f2>
            case 3:
                testCase[rndByte] = testCase[rndByte] - (mutPtr->stageCycles % 256); //Subtract a random byte
20000e82:	68fa      	ldr	r2, [r7, #12]
20000e84:	6a3b      	ldr	r3, [r7, #32]
20000e86:	4413      	add	r3, r2
20000e88:	781b      	ldrb	r3, [r3, #0]
20000e8a:	b2d9      	uxtb	r1, r3
20000e8c:	687b      	ldr	r3, [r7, #4]
20000e8e:	781a      	ldrb	r2, [r3, #0]
20000e90:	68f8      	ldr	r0, [r7, #12]
20000e92:	6a3b      	ldr	r3, [r7, #32]
20000e94:	4403      	add	r3, r0
20000e96:	1a8a      	subs	r2, r1, r2
20000e98:	b2d2      	uxtb	r2, r2
20000e9a:	701a      	strb	r2, [r3, #0]
                break;
20000e9c:	e141      	b.n	20001122 <mutator+0x9f2>
            case 4:
                testCase[rndByte] = testCase[rndByte] - (mutPtr->stageCycles % 34); //Subtract a random 'char'
20000e9e:	68fa      	ldr	r2, [r7, #12]
20000ea0:	6a3b      	ldr	r3, [r7, #32]
20000ea2:	4413      	add	r3, r2
20000ea4:	781b      	ldrb	r3, [r3, #0]
20000ea6:	b2d8      	uxtb	r0, r3
20000ea8:	687b      	ldr	r3, [r7, #4]
20000eaa:	781a      	ldrb	r2, [r3, #0]
20000eac:	4b64      	ldr	r3, [pc, #400]	@ (20001040 <mutator+0x910>)
20000eae:	fba3 1302 	umull	r1, r3, r3, r2
20000eb2:	0959      	lsrs	r1, r3, #5
20000eb4:	460b      	mov	r3, r1
20000eb6:	011b      	lsls	r3, r3, #4
20000eb8:	440b      	add	r3, r1
20000eba:	005b      	lsls	r3, r3, #1
20000ebc:	1ad3      	subs	r3, r2, r3
20000ebe:	b2da      	uxtb	r2, r3
20000ec0:	68f9      	ldr	r1, [r7, #12]
20000ec2:	6a3b      	ldr	r3, [r7, #32]
20000ec4:	440b      	add	r3, r1
20000ec6:	1a82      	subs	r2, r0, r2
20000ec8:	b2d2      	uxtb	r2, r2
20000eca:	701a      	strb	r2, [r3, #0]
                break;
20000ecc:	e129      	b.n	20001122 <mutator+0x9f2>
            case 5:
                rndBit = ((uint8_t)rand() % 8);
20000ece:	f001 fbb3 	bl	20002638 <rand>
20000ed2:	4603      	mov	r3, r0
20000ed4:	b2db      	uxtb	r3, r3
20000ed6:	f003 0307 	and.w	r3, r3, #7
20000eda:	75fb      	strb	r3, [r7, #23]
                testCase[rndByte] = bitflip(testCase[rndByte],rndBit);
20000edc:	68fa      	ldr	r2, [r7, #12]
20000ede:	6a3b      	ldr	r3, [r7, #32]
20000ee0:	4413      	add	r3, r2
20000ee2:	781b      	ldrb	r3, [r3, #0]
20000ee4:	b2db      	uxtb	r3, r3
20000ee6:	b25a      	sxtb	r2, r3
20000ee8:	7dfb      	ldrb	r3, [r7, #23]
20000eea:	2101      	movs	r1, #1
20000eec:	fa01 f303 	lsl.w	r3, r1, r3
20000ef0:	b25b      	sxtb	r3, r3
20000ef2:	4053      	eors	r3, r2
20000ef4:	b259      	sxtb	r1, r3
20000ef6:	68fa      	ldr	r2, [r7, #12]
20000ef8:	6a3b      	ldr	r3, [r7, #32]
20000efa:	4413      	add	r3, r2
20000efc:	b2ca      	uxtb	r2, r1
20000efe:	701a      	strb	r2, [r3, #0]
                break;
20000f00:	e10f      	b.n	20001122 <mutator+0x9f2>
            case 6:
                rndBit = ((uint8_t)rand() % 7);
20000f02:	f001 fb99 	bl	20002638 <rand>
20000f06:	4603      	mov	r3, r0
20000f08:	b2da      	uxtb	r2, r3
20000f0a:	4b4e      	ldr	r3, [pc, #312]	@ (20001044 <mutator+0x914>)
20000f0c:	fba3 1302 	umull	r1, r3, r3, r2
20000f10:	1ad1      	subs	r1, r2, r3
20000f12:	0849      	lsrs	r1, r1, #1
20000f14:	440b      	add	r3, r1
20000f16:	0899      	lsrs	r1, r3, #2
20000f18:	460b      	mov	r3, r1
20000f1a:	00db      	lsls	r3, r3, #3
20000f1c:	1a5b      	subs	r3, r3, r1
20000f1e:	1ad3      	subs	r3, r2, r3
20000f20:	75fb      	strb	r3, [r7, #23]
                testCase[rndByte] = bitflip(testCase[rndByte],rndBit);
20000f22:	68fa      	ldr	r2, [r7, #12]
20000f24:	6a3b      	ldr	r3, [r7, #32]
20000f26:	4413      	add	r3, r2
20000f28:	781b      	ldrb	r3, [r3, #0]
20000f2a:	b2db      	uxtb	r3, r3
20000f2c:	b25a      	sxtb	r2, r3
20000f2e:	7dfb      	ldrb	r3, [r7, #23]
20000f30:	2101      	movs	r1, #1
20000f32:	fa01 f303 	lsl.w	r3, r1, r3
20000f36:	b25b      	sxtb	r3, r3
20000f38:	4053      	eors	r3, r2
20000f3a:	b259      	sxtb	r1, r3
20000f3c:	68fa      	ldr	r2, [r7, #12]
20000f3e:	6a3b      	ldr	r3, [r7, #32]
20000f40:	4413      	add	r3, r2
20000f42:	b2ca      	uxtb	r2, r1
20000f44:	701a      	strb	r2, [r3, #0]
                testCase[rndByte] = bitflip(testCase[rndByte],rndBit + 1);
20000f46:	68fa      	ldr	r2, [r7, #12]
20000f48:	6a3b      	ldr	r3, [r7, #32]
20000f4a:	4413      	add	r3, r2
20000f4c:	781b      	ldrb	r3, [r3, #0]
20000f4e:	b2db      	uxtb	r3, r3
20000f50:	b25a      	sxtb	r2, r3
20000f52:	7dfb      	ldrb	r3, [r7, #23]
20000f54:	3301      	adds	r3, #1
20000f56:	2101      	movs	r1, #1
20000f58:	fa01 f303 	lsl.w	r3, r1, r3
20000f5c:	b25b      	sxtb	r3, r3
20000f5e:	4053      	eors	r3, r2
20000f60:	b259      	sxtb	r1, r3
20000f62:	68fa      	ldr	r2, [r7, #12]
20000f64:	6a3b      	ldr	r3, [r7, #32]
20000f66:	4413      	add	r3, r2
20000f68:	b2ca      	uxtb	r2, r1
20000f6a:	701a      	strb	r2, [r3, #0]
                break;
20000f6c:	e0d9      	b.n	20001122 <mutator+0x9f2>
            case 7:
                rndBit = ((uint8_t)rand() % 5);
20000f6e:	f001 fb63 	bl	20002638 <rand>
20000f72:	4603      	mov	r3, r0
20000f74:	b2da      	uxtb	r2, r3
20000f76:	4b34      	ldr	r3, [pc, #208]	@ (20001048 <mutator+0x918>)
20000f78:	fba3 1302 	umull	r1, r3, r3, r2
20000f7c:	0899      	lsrs	r1, r3, #2
20000f7e:	460b      	mov	r3, r1
20000f80:	009b      	lsls	r3, r3, #2
20000f82:	440b      	add	r3, r1
20000f84:	1ad3      	subs	r3, r2, r3
20000f86:	75fb      	strb	r3, [r7, #23]
                testCase[rndByte] = bitflip(testCase[rndByte],rndBit);
20000f88:	68fa      	ldr	r2, [r7, #12]
20000f8a:	6a3b      	ldr	r3, [r7, #32]
20000f8c:	4413      	add	r3, r2
20000f8e:	781b      	ldrb	r3, [r3, #0]
20000f90:	b2db      	uxtb	r3, r3
20000f92:	b25a      	sxtb	r2, r3
20000f94:	7dfb      	ldrb	r3, [r7, #23]
20000f96:	2101      	movs	r1, #1
20000f98:	fa01 f303 	lsl.w	r3, r1, r3
20000f9c:	b25b      	sxtb	r3, r3
20000f9e:	4053      	eors	r3, r2
20000fa0:	b259      	sxtb	r1, r3
20000fa2:	68fa      	ldr	r2, [r7, #12]
20000fa4:	6a3b      	ldr	r3, [r7, #32]
20000fa6:	4413      	add	r3, r2
20000fa8:	b2ca      	uxtb	r2, r1
20000faa:	701a      	strb	r2, [r3, #0]
                testCase[rndByte] = bitflip(testCase[rndByte],rndBit + 1);
20000fac:	68fa      	ldr	r2, [r7, #12]
20000fae:	6a3b      	ldr	r3, [r7, #32]
20000fb0:	4413      	add	r3, r2
20000fb2:	781b      	ldrb	r3, [r3, #0]
20000fb4:	b2db      	uxtb	r3, r3
20000fb6:	b25a      	sxtb	r2, r3
20000fb8:	7dfb      	ldrb	r3, [r7, #23]
20000fba:	3301      	adds	r3, #1
20000fbc:	2101      	movs	r1, #1
20000fbe:	fa01 f303 	lsl.w	r3, r1, r3
20000fc2:	b25b      	sxtb	r3, r3
20000fc4:	4053      	eors	r3, r2
20000fc6:	b259      	sxtb	r1, r3
20000fc8:	68fa      	ldr	r2, [r7, #12]
20000fca:	6a3b      	ldr	r3, [r7, #32]
20000fcc:	4413      	add	r3, r2
20000fce:	b2ca      	uxtb	r2, r1
20000fd0:	701a      	strb	r2, [r3, #0]
                testCase[rndByte] = bitflip(testCase[rndByte],rndBit + 2);
20000fd2:	68fa      	ldr	r2, [r7, #12]
20000fd4:	6a3b      	ldr	r3, [r7, #32]
20000fd6:	4413      	add	r3, r2
20000fd8:	781b      	ldrb	r3, [r3, #0]
20000fda:	b2db      	uxtb	r3, r3
20000fdc:	b25a      	sxtb	r2, r3
20000fde:	7dfb      	ldrb	r3, [r7, #23]
20000fe0:	3302      	adds	r3, #2
20000fe2:	2101      	movs	r1, #1
20000fe4:	fa01 f303 	lsl.w	r3, r1, r3
20000fe8:	b25b      	sxtb	r3, r3
20000fea:	4053      	eors	r3, r2
20000fec:	b259      	sxtb	r1, r3
20000fee:	68fa      	ldr	r2, [r7, #12]
20000ff0:	6a3b      	ldr	r3, [r7, #32]
20000ff2:	4413      	add	r3, r2
20000ff4:	b2ca      	uxtb	r2, r1
20000ff6:	701a      	strb	r2, [r3, #0]
                testCase[rndByte] = bitflip(testCase[rndByte],rndBit + 3);
20000ff8:	68fa      	ldr	r2, [r7, #12]
20000ffa:	6a3b      	ldr	r3, [r7, #32]
20000ffc:	4413      	add	r3, r2
20000ffe:	781b      	ldrb	r3, [r3, #0]
20001000:	b2db      	uxtb	r3, r3
20001002:	b25a      	sxtb	r2, r3
20001004:	7dfb      	ldrb	r3, [r7, #23]
20001006:	3303      	adds	r3, #3
20001008:	2101      	movs	r1, #1
2000100a:	fa01 f303 	lsl.w	r3, r1, r3
2000100e:	b25b      	sxtb	r3, r3
20001010:	4053      	eors	r3, r2
20001012:	b259      	sxtb	r1, r3
20001014:	68fa      	ldr	r2, [r7, #12]
20001016:	6a3b      	ldr	r3, [r7, #32]
20001018:	4413      	add	r3, r2
2000101a:	b2ca      	uxtb	r2, r1
2000101c:	701a      	strb	r2, [r3, #0]
                break;
2000101e:	e080      	b.n	20001122 <mutator+0x9f2>
            case 8:
                testCase[rndByte] = testCase[rndByte] ^ 0xFF;
20001020:	68fa      	ldr	r2, [r7, #12]
20001022:	6a3b      	ldr	r3, [r7, #32]
20001024:	4413      	add	r3, r2
20001026:	781b      	ldrb	r3, [r3, #0]
20001028:	b2da      	uxtb	r2, r3
2000102a:	68f9      	ldr	r1, [r7, #12]
2000102c:	6a3b      	ldr	r3, [r7, #32]
2000102e:	440b      	add	r3, r1
20001030:	43d2      	mvns	r2, r2
20001032:	b2d2      	uxtb	r2, r2
20001034:	701a      	strb	r2, [r3, #0]
                break;
20001036:	e074      	b.n	20001122 <mutator+0x9f2>
20001038:	51eb851f 	.word	0x51eb851f
2000103c:	aaaaaaab 	.word	0xaaaaaaab
20001040:	f0f0f0f1 	.word	0xf0f0f0f1
20001044:	24924925 	.word	0x24924925
20001048:	cccccccd 	.word	0xcccccccd
            case 9:
                rndByte = rndByte - 1;
2000104c:	6a3b      	ldr	r3, [r7, #32]
2000104e:	3b01      	subs	r3, #1
20001050:	623b      	str	r3, [r7, #32]
                if (rndByte < 2 || rndByte > inputSize){ rndByte = 0;}
20001052:	6a3b      	ldr	r3, [r7, #32]
20001054:	2b01      	cmp	r3, #1
20001056:	d903      	bls.n	20001060 <mutator+0x930>
20001058:	6a3a      	ldr	r2, [r7, #32]
2000105a:	693b      	ldr	r3, [r7, #16]
2000105c:	429a      	cmp	r2, r3
2000105e:	d901      	bls.n	20001064 <mutator+0x934>
20001060:	2300      	movs	r3, #0
20001062:	623b      	str	r3, [r7, #32]

                testCase[rndByte] = testCase[rndByte] ^ 0xFF;
20001064:	68fa      	ldr	r2, [r7, #12]
20001066:	6a3b      	ldr	r3, [r7, #32]
20001068:	4413      	add	r3, r2
2000106a:	781b      	ldrb	r3, [r3, #0]
2000106c:	b2da      	uxtb	r2, r3
2000106e:	68f9      	ldr	r1, [r7, #12]
20001070:	6a3b      	ldr	r3, [r7, #32]
20001072:	440b      	add	r3, r1
20001074:	43d2      	mvns	r2, r2
20001076:	b2d2      	uxtb	r2, r2
20001078:	701a      	strb	r2, [r3, #0]
                testCase[rndByte + 1] = testCase[rndByte + 1] ^ 0xFF;
2000107a:	6a3b      	ldr	r3, [r7, #32]
2000107c:	3301      	adds	r3, #1
2000107e:	68fa      	ldr	r2, [r7, #12]
20001080:	4413      	add	r3, r2
20001082:	781b      	ldrb	r3, [r3, #0]
20001084:	b2da      	uxtb	r2, r3
20001086:	6a3b      	ldr	r3, [r7, #32]
20001088:	3301      	adds	r3, #1
2000108a:	68f9      	ldr	r1, [r7, #12]
2000108c:	440b      	add	r3, r1
2000108e:	43d2      	mvns	r2, r2
20001090:	b2d2      	uxtb	r2, r2
20001092:	701a      	strb	r2, [r3, #0]
                break;
20001094:	e045      	b.n	20001122 <mutator+0x9f2>
            case 10:
                rndByte = rndByte - 4;
20001096:	6a3b      	ldr	r3, [r7, #32]
20001098:	3b04      	subs	r3, #4
2000109a:	623b      	str	r3, [r7, #32]

                if (rndByte < 4 || rndByte > inputSize){rndByte = 0;}
2000109c:	6a3b      	ldr	r3, [r7, #32]
2000109e:	2b03      	cmp	r3, #3
200010a0:	d903      	bls.n	200010aa <mutator+0x97a>
200010a2:	6a3a      	ldr	r2, [r7, #32]
200010a4:	693b      	ldr	r3, [r7, #16]
200010a6:	429a      	cmp	r2, r3
200010a8:	d901      	bls.n	200010ae <mutator+0x97e>
200010aa:	2300      	movs	r3, #0
200010ac:	623b      	str	r3, [r7, #32]

                testCase[rndByte] = testCase[rndByte] ^ 0xFF;
200010ae:	68fa      	ldr	r2, [r7, #12]
200010b0:	6a3b      	ldr	r3, [r7, #32]
200010b2:	4413      	add	r3, r2
200010b4:	781b      	ldrb	r3, [r3, #0]
200010b6:	b2da      	uxtb	r2, r3
200010b8:	68f9      	ldr	r1, [r7, #12]
200010ba:	6a3b      	ldr	r3, [r7, #32]
200010bc:	440b      	add	r3, r1
200010be:	43d2      	mvns	r2, r2
200010c0:	b2d2      	uxtb	r2, r2
200010c2:	701a      	strb	r2, [r3, #0]
                testCase[rndByte + 1] = testCase[rndByte + 1] ^ 0xFF;
200010c4:	6a3b      	ldr	r3, [r7, #32]
200010c6:	3301      	adds	r3, #1
200010c8:	68fa      	ldr	r2, [r7, #12]
200010ca:	4413      	add	r3, r2
200010cc:	781b      	ldrb	r3, [r3, #0]
200010ce:	b2da      	uxtb	r2, r3
200010d0:	6a3b      	ldr	r3, [r7, #32]
200010d2:	3301      	adds	r3, #1
200010d4:	68f9      	ldr	r1, [r7, #12]
200010d6:	440b      	add	r3, r1
200010d8:	43d2      	mvns	r2, r2
200010da:	b2d2      	uxtb	r2, r2
200010dc:	701a      	strb	r2, [r3, #0]
                testCase[rndByte + 2] = testCase[rndByte + 2] ^ 0xFF;
200010de:	6a3b      	ldr	r3, [r7, #32]
200010e0:	3302      	adds	r3, #2
200010e2:	68fa      	ldr	r2, [r7, #12]
200010e4:	4413      	add	r3, r2
200010e6:	781b      	ldrb	r3, [r3, #0]
200010e8:	b2da      	uxtb	r2, r3
200010ea:	6a3b      	ldr	r3, [r7, #32]
200010ec:	3302      	adds	r3, #2
200010ee:	68f9      	ldr	r1, [r7, #12]
200010f0:	440b      	add	r3, r1
200010f2:	43d2      	mvns	r2, r2
200010f4:	b2d2      	uxtb	r2, r2
200010f6:	701a      	strb	r2, [r3, #0]
                testCase[rndByte + 3] = testCase[rndByte + 3] ^ 0xFF;
200010f8:	6a3b      	ldr	r3, [r7, #32]
200010fa:	3303      	adds	r3, #3
200010fc:	68fa      	ldr	r2, [r7, #12]
200010fe:	4413      	add	r3, r2
20001100:	781b      	ldrb	r3, [r3, #0]
20001102:	b2da      	uxtb	r2, r3
20001104:	6a3b      	ldr	r3, [r7, #32]
20001106:	3303      	adds	r3, #3
20001108:	68f9      	ldr	r1, [r7, #12]
2000110a:	440b      	add	r3, r1
2000110c:	43d2      	mvns	r2, r2
2000110e:	b2d2      	uxtb	r2, r2
20001110:	701a      	strb	r2, [r3, #0]

                break;
20001112:	e006      	b.n	20001122 <mutator+0x9f2>
            case 11:
                //set a random byte to zero
                testCase[rndByte] = 0;
20001114:	68fa      	ldr	r2, [r7, #12]
20001116:	6a3b      	ldr	r3, [r7, #32]
20001118:	4413      	add	r3, r2
2000111a:	2200      	movs	r2, #0
2000111c:	701a      	strb	r2, [r3, #0]
                break;
2000111e:	e000      	b.n	20001122 <mutator+0x9f2>
            default:
            	break;
20001120:	bf00      	nop
        for(i = 0; i < rndValue; i++){
20001122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20001124:	3301      	adds	r3, #1
20001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
20001128:	7dbb      	ldrb	r3, [r7, #22]
2000112a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
2000112c:	429a      	cmp	r2, r3
2000112e:	f4ff ae3f 	bcc.w	20000db0 <mutator+0x680>
20001132:	e000      	b.n	20001136 <mutator+0xa06>
    			break;
20001134:	bf00      	nop
            }
            //TODO: Add shrinking mutator, and add test case splicing.
            }
        }

    mutPtr->stageCycles++;
20001136:	687b      	ldr	r3, [r7, #4]
20001138:	781b      	ldrb	r3, [r3, #0]
2000113a:	3301      	adds	r3, #1
2000113c:	b2da      	uxtb	r2, r3
2000113e:	687b      	ldr	r3, [r7, #4]
20001140:	701a      	strb	r2, [r3, #0]
    return 0;
20001142:	2300      	movs	r3, #0
}
20001144:	4618      	mov	r0, r3
20001146:	3730      	adds	r7, #48	@ 0x30
20001148:	46bd      	mov	sp, r7
2000114a:	bd80      	pop	{r7, pc}

2000114c <dequeue_seed>:


void dequeue_seed(mutationContext_t * mutPtr, poolContext_t * poolPtr){
2000114c:	b480      	push	{r7}
2000114e:	b085      	sub	sp, #20
20001150:	af00      	add	r7, sp, #0
20001152:	6078      	str	r0, [r7, #4]
20001154:	6039      	str	r1, [r7, #0]
 * @return void
 ********************************************************/

    size_t i ;

    if(poolPtr->seedHead == poolPtr->seedTail){ //Circular queue of Seeds
20001156:	683b      	ldr	r3, [r7, #0]
20001158:	781a      	ldrb	r2, [r3, #0]
2000115a:	683b      	ldr	r3, [r7, #0]
2000115c:	785b      	ldrb	r3, [r3, #1]
2000115e:	429a      	cmp	r2, r3
20001160:	d102      	bne.n	20001168 <dequeue_seed+0x1c>
        poolPtr->seedHead = 0;
20001162:	683b      	ldr	r3, [r7, #0]
20001164:	2200      	movs	r2, #0
20001166:	701a      	strb	r2, [r3, #0]
    }

   if(mutPtr->stageCycles == MAX_CYCLES){ //We have done enough cycles next seed.
20001168:	687b      	ldr	r3, [r7, #4]
2000116a:	781b      	ldrb	r3, [r3, #0]
2000116c:	2bfa      	cmp	r3, #250	@ 0xfa
2000116e:	d108      	bne.n	20001182 <dequeue_seed+0x36>
	   mutPtr->stageCycles = 0;
20001170:	687b      	ldr	r3, [r7, #4]
20001172:	2200      	movs	r2, #0
20001174:	701a      	strb	r2, [r3, #0]
	   poolPtr->seedHead++;
20001176:	683b      	ldr	r3, [r7, #0]
20001178:	781b      	ldrb	r3, [r3, #0]
2000117a:	3301      	adds	r3, #1
2000117c:	b2da      	uxtb	r2, r3
2000117e:	683b      	ldr	r3, [r7, #0]
20001180:	701a      	strb	r2, [r3, #0]
   }
   if(poolPtr->seedHead >= poolPtr->nSeeds){ //As time goes on lets get less aggressive.
20001182:	683b      	ldr	r3, [r7, #0]
20001184:	781b      	ldrb	r3, [r3, #0]
20001186:	461a      	mov	r2, r3
20001188:	683b      	ldr	r3, [r7, #0]
2000118a:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	@ 0xf40
2000118e:	429a      	cmp	r2, r3
20001190:	d308      	bcc.n	200011a4 <dequeue_seed+0x58>
	poolPtr->seedHead = 0;
20001192:	683b      	ldr	r3, [r7, #0]
20001194:	2200      	movs	r2, #0
20001196:	701a      	strb	r2, [r3, #0]
    poolPtr->poolCycles++;
20001198:	683b      	ldr	r3, [r7, #0]
2000119a:	885b      	ldrh	r3, [r3, #2]
2000119c:	3301      	adds	r3, #1
2000119e:	b29a      	uxth	r2, r3
200011a0:	683b      	ldr	r3, [r7, #0]
200011a2:	805a      	strh	r2, [r3, #2]
   }

   if(poolPtr->poolCycles > 5){
200011a4:	683b      	ldr	r3, [r7, #0]
200011a6:	885b      	ldrh	r3, [r3, #2]
200011a8:	2b05      	cmp	r3, #5
200011aa:	d910      	bls.n	200011ce <dequeue_seed+0x82>
       if(mutPtr->mutationDegression < 10){
200011ac:	687b      	ldr	r3, [r7, #4]
200011ae:	885b      	ldrh	r3, [r3, #2]
200011b0:	2b09      	cmp	r3, #9
200011b2:	d805      	bhi.n	200011c0 <dequeue_seed+0x74>
    	   mutPtr->mutationDegression++;
200011b4:	687b      	ldr	r3, [r7, #4]
200011b6:	885b      	ldrh	r3, [r3, #2]
200011b8:	3301      	adds	r3, #1
200011ba:	b29a      	uxth	r2, r3
200011bc:	687b      	ldr	r3, [r7, #4]
200011be:	805a      	strh	r2, [r3, #2]
       }
       if(mutPtr->mutationDegression >= 10){
200011c0:	687b      	ldr	r3, [r7, #4]
200011c2:	885b      	ldrh	r3, [r3, #2]
200011c4:	2b09      	cmp	r3, #9
200011c6:	d902      	bls.n	200011ce <dequeue_seed+0x82>
    	   mutPtr->mutationDegression = 1;
200011c8:	687b      	ldr	r3, [r7, #4]
200011ca:	2201      	movs	r2, #1
200011cc:	805a      	strh	r2, [r3, #2]
       }
   }

   //Zero out the buffer.
   for(i = 0; i < MAX_TESTCASE_LEN; i++){
200011ce:	2300      	movs	r3, #0
200011d0:	60fb      	str	r3, [r7, #12]
200011d2:	e008      	b.n	200011e6 <dequeue_seed+0x9a>
   	   mutPtr->testCaseBuffer->testCase[i] = 0;
200011d4:	687b      	ldr	r3, [r7, #4]
200011d6:	689a      	ldr	r2, [r3, #8]
200011d8:	68fb      	ldr	r3, [r7, #12]
200011da:	4413      	add	r3, r2
200011dc:	2200      	movs	r2, #0
200011de:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < MAX_TESTCASE_LEN; i++){
200011e0:	68fb      	ldr	r3, [r7, #12]
200011e2:	3301      	adds	r3, #1
200011e4:	60fb      	str	r3, [r7, #12]
200011e6:	68fb      	ldr	r3, [r7, #12]
200011e8:	2bff      	cmp	r3, #255	@ 0xff
200011ea:	d9f3      	bls.n	200011d4 <dequeue_seed+0x88>
   }

   for(i = 0; i < poolPtr->localPool[poolPtr->seedHead].size; i++){
200011ec:	2300      	movs	r3, #0
200011ee:	60fb      	str	r3, [r7, #12]
200011f0:	e016      	b.n	20001220 <dequeue_seed+0xd4>
	   mutPtr->testCaseBuffer->testCase[i] = poolPtr->localPool[poolPtr->seedHead].testCase[i];
200011f2:	683b      	ldr	r3, [r7, #0]
200011f4:	781b      	ldrb	r3, [r3, #0]
200011f6:	4618      	mov	r0, r3
200011f8:	687b      	ldr	r3, [r7, #4]
200011fa:	689a      	ldr	r2, [r3, #8]
200011fc:	6839      	ldr	r1, [r7, #0]
200011fe:	4603      	mov	r3, r0
20001200:	019b      	lsls	r3, r3, #6
20001202:	4403      	add	r3, r0
20001204:	009b      	lsls	r3, r3, #2
20001206:	4419      	add	r1, r3
20001208:	68fb      	ldr	r3, [r7, #12]
2000120a:	440b      	add	r3, r1
2000120c:	3304      	adds	r3, #4
2000120e:	781b      	ldrb	r3, [r3, #0]
20001210:	b2d9      	uxtb	r1, r3
20001212:	68fb      	ldr	r3, [r7, #12]
20001214:	4413      	add	r3, r2
20001216:	460a      	mov	r2, r1
20001218:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < poolPtr->localPool[poolPtr->seedHead].size; i++){
2000121a:	68fb      	ldr	r3, [r7, #12]
2000121c:	3301      	adds	r3, #1
2000121e:	60fb      	str	r3, [r7, #12]
20001220:	683b      	ldr	r3, [r7, #0]
20001222:	781b      	ldrb	r3, [r3, #0]
20001224:	4619      	mov	r1, r3
20001226:	683a      	ldr	r2, [r7, #0]
20001228:	460b      	mov	r3, r1
2000122a:	019b      	lsls	r3, r3, #6
2000122c:	440b      	add	r3, r1
2000122e:	009b      	lsls	r3, r3, #2
20001230:	4413      	add	r3, r2
20001232:	f503 7382 	add.w	r3, r3, #260	@ 0x104
20001236:	681b      	ldr	r3, [r3, #0]
20001238:	68fa      	ldr	r2, [r7, #12]
2000123a:	429a      	cmp	r2, r3
2000123c:	d3d9      	bcc.n	200011f2 <dequeue_seed+0xa6>
   }
   mutPtr->testCaseBuffer->size = poolPtr->localPool[poolPtr->seedHead].size;
2000123e:	683b      	ldr	r3, [r7, #0]
20001240:	781b      	ldrb	r3, [r3, #0]
20001242:	4618      	mov	r0, r3
20001244:	687b      	ldr	r3, [r7, #4]
20001246:	689a      	ldr	r2, [r3, #8]
20001248:	6839      	ldr	r1, [r7, #0]
2000124a:	4603      	mov	r3, r0
2000124c:	019b      	lsls	r3, r3, #6
2000124e:	4403      	add	r3, r0
20001250:	009b      	lsls	r3, r3, #2
20001252:	440b      	add	r3, r1
20001254:	f503 7382 	add.w	r3, r3, #260	@ 0x104
20001258:	681b      	ldr	r3, [r3, #0]
2000125a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

}
2000125e:	bf00      	nop
20001260:	3714      	adds	r7, #20
20001262:	46bd      	mov	sp, r7
20001264:	f85d 7b04 	ldr.w	r7, [sp], #4
20001268:	4770      	bx	lr

2000126a <bubble_coverage>:


void bubble_coverage(){
2000126a:	b480      	push	{r7}
2000126c:	af00      	add	r7, sp, #0
	return;
2000126e:	bf00      	nop
}
20001270:	46bd      	mov	sp, r7
20001272:	f85d 7b04 	ldr.w	r7, [sp], #4
20001276:	4770      	bx	lr

20001278 <check_for_coverage>:

void check_for_coverage(mutationContext_t * mutPtr){
20001278:	b580      	push	{r7, lr}
2000127a:	b084      	sub	sp, #16
2000127c:	af00      	add	r7, sp, #0
2000127e:	6078      	str	r0, [r7, #4]
	size_t i ;

    if(g_isIncreasing && (g_coverageList[0] != UINT_MAX)){
20001280:	4b1a      	ldr	r3, [pc, #104]	@ (200012ec <check_for_coverage+0x74>)
20001282:	781b      	ldrb	r3, [r3, #0]
20001284:	2b00      	cmp	r3, #0
20001286:	d024      	beq.n	200012d2 <check_for_coverage+0x5a>
20001288:	4b19      	ldr	r3, [pc, #100]	@ (200012f0 <check_for_coverage+0x78>)
2000128a:	881b      	ldrh	r3, [r3, #0]
2000128c:	b29b      	uxth	r3, r3
2000128e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
20001292:	4293      	cmp	r3, r2
20001294:	d01d      	beq.n	200012d2 <check_for_coverage+0x5a>
//        intersting_cases++;
        bubble_coverage();
20001296:	f7ff ffe8 	bl	2000126a <bubble_coverage>
    	//Breakpoint HERE
        /* Clear the coverage map*/
        for(i = 0; i < MAX_BLOCKS_PER_INPUT; i++){
2000129a:	2300      	movs	r3, #0
2000129c:	60fb      	str	r3, [r7, #12]
2000129e:	e007      	b.n	200012b0 <check_for_coverage+0x38>
            g_coverageList[i] = 0;
200012a0:	4a13      	ldr	r2, [pc, #76]	@ (200012f0 <check_for_coverage+0x78>)
200012a2:	68fb      	ldr	r3, [r7, #12]
200012a4:	2100      	movs	r1, #0
200012a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(i = 0; i < MAX_BLOCKS_PER_INPUT; i++){
200012aa:	68fb      	ldr	r3, [r7, #12]
200012ac:	3301      	adds	r3, #1
200012ae:	60fb      	str	r3, [r7, #12]
200012b0:	68fb      	ldr	r3, [r7, #12]
200012b2:	2bc7      	cmp	r3, #199	@ 0xc7
200012b4:	d9f4      	bls.n	200012a0 <check_for_coverage+0x28>
        }
        g_coverageList[0] = UINT_MAX;
200012b6:	4b0e      	ldr	r3, [pc, #56]	@ (200012f0 <check_for_coverage+0x78>)
200012b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
200012bc:	801a      	strh	r2, [r3, #0]
        g_covListPtr = &g_coverageList[0];
200012be:	4b0d      	ldr	r3, [pc, #52]	@ (200012f4 <check_for_coverage+0x7c>)
200012c0:	4a0b      	ldr	r2, [pc, #44]	@ (200012f0 <check_for_coverage+0x78>)
200012c2:	601a      	str	r2, [r3, #0]
        g_isIncreasing = 0;
200012c4:	4b09      	ldr	r3, [pc, #36]	@ (200012ec <check_for_coverage+0x74>)
200012c6:	2200      	movs	r2, #0
200012c8:	701a      	strb	r2, [r3, #0]

        mutPtr->mutationDegression = 1; //We need to be more aggressive with the new test case
200012ca:	687b      	ldr	r3, [r7, #4]
200012cc:	2201      	movs	r2, #1
200012ce:	805a      	strh	r2, [r3, #2]
200012d0:	e008      	b.n	200012e4 <check_for_coverage+0x6c>
    }
    else if(g_isIncreasing){
200012d2:	4b06      	ldr	r3, [pc, #24]	@ (200012ec <check_for_coverage+0x74>)
200012d4:	781b      	ldrb	r3, [r3, #0]
200012d6:	2b00      	cmp	r3, #0
200012d8:	d003      	beq.n	200012e2 <check_for_coverage+0x6a>
    	//Error condition: increasing coverage indicated but list empty...
//        printf("ERROR: Coverage map is zeroed but flag is set. \n");
        exit(-1);
200012da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
200012de:	f001 f8eb 	bl	200024b8 <exit>
    }
    else{
    	return;
200012e2:	bf00      	nop
    }

}
200012e4:	3710      	adds	r7, #16
200012e6:	46bd      	mov	sp, r7
200012e8:	bd80      	pop	{r7, pc}
200012ea:	bf00      	nop
200012ec:	20003868 	.word	0x20003868
200012f0:	200036d0 	.word	0x200036d0
200012f4:	20003860 	.word	0x20003860

200012f8 <harness_loop>:

void harness_loop(){
200012f8:	b580      	push	{r7, lr}
200012fa:	f6ad 7d58 	subw	sp, sp, #3928	@ 0xf58
200012fe:	af00      	add	r7, sp, #0
 * @return void
 ********************************************************/
	mutationContext_t mutC;
	poolContext_t poolC;

	int16_t retVal = 0;
20001300:	2300      	movs	r3, #0
20001302:	f8a7 3f56 	strh.w	r3, [r7, #3926]	@ 0xf56

    retVal = fuzzer_setup(&branch_test, &mutC, &poolC);
20001306:	1d3a      	adds	r2, r7, #4
20001308:	f607 7348 	addw	r3, r7, #3912	@ 0xf48
2000130c:	4619      	mov	r1, r3
2000130e:	481f      	ldr	r0, [pc, #124]	@ (2000138c <harness_loop+0x94>)
20001310:	f7ff f9ba 	bl	20000688 <fuzzer_setup>
20001314:	4603      	mov	r3, r0
20001316:	f8a7 3f56 	strh.w	r3, [r7, #3926]	@ 0xf56

    if(retVal != 0){
2000131a:	f9b7 3f56 	ldrsh.w	r3, [r7, #3926]	@ 0xf56
2000131e:	2b00      	cmp	r3, #0
20001320:	d003      	beq.n	2000132a <harness_loop+0x32>
    	exit(-1);
20001322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20001326:	f001 f8c7 	bl	200024b8 <exit>
//    setjmp(saved_context);


    while(1){

    g_iterations++;
2000132a:	4b19      	ldr	r3, [pc, #100]	@ (20001390 <harness_loop+0x98>)
2000132c:	681b      	ldr	r3, [r3, #0]
2000132e:	3301      	adds	r3, #1
20001330:	4a17      	ldr	r2, [pc, #92]	@ (20001390 <harness_loop+0x98>)
20001332:	6013      	str	r3, [r2, #0]
	dequeue_seed(&mutC,&poolC);
20001334:	1d3a      	adds	r2, r7, #4
20001336:	f607 7348 	addw	r3, r7, #3912	@ 0xf48
2000133a:	4611      	mov	r1, r2
2000133c:	4618      	mov	r0, r3
2000133e:	f7ff ff05 	bl	2000114c <dequeue_seed>

    retVal = mutator(&mutC, &poolC);
20001342:	1d3a      	adds	r2, r7, #4
20001344:	f607 7348 	addw	r3, r7, #3912	@ 0xf48
20001348:	4611      	mov	r1, r2
2000134a:	4618      	mov	r0, r3
2000134c:	f7ff f9f0 	bl	20000730 <mutator>
20001350:	4603      	mov	r3, r0
20001352:	f8a7 3f56 	strh.w	r3, [r7, #3926]	@ 0xf56

    if(retVal != 0){
20001356:	f9b7 3f56 	ldrsh.w	r3, [r7, #3926]	@ 0xf56
2000135a:	2b00      	cmp	r3, #0
2000135c:	d003      	beq.n	20001366 <harness_loop+0x6e>
    	exit(-1);
2000135e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20001362:	f001 f8a9 	bl	200024b8 <exit>
    }
    //TODO: Implement Timing of Test Cases HERE
    branch_test(mutC.testCaseBuffer->testCase,mutC.testCaseBuffer->size);
20001366:	f8d7 3f50 	ldr.w	r3, [r7, #3920]	@ 0xf50
2000136a:	461a      	mov	r2, r3
2000136c:	f8d7 3f50 	ldr.w	r3, [r7, #3920]	@ 0xf50
20001370:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
20001374:	b21b      	sxth	r3, r3
20001376:	4619      	mov	r1, r3
20001378:	4610      	mov	r0, r2
2000137a:	f7ff f941 	bl	20000600 <branch_test>

    check_for_coverage(&mutC);
2000137e:	f607 7348 	addw	r3, r7, #3912	@ 0xf48
20001382:	4618      	mov	r0, r3
20001384:	f7ff ff78 	bl	20001278 <check_for_coverage>
    g_iterations++;
20001388:	e7cf      	b.n	2000132a <harness_loop+0x32>
2000138a:	bf00      	nop
2000138c:	20000601 	.word	0x20000601
20001390:	2000386c 	.word	0x2000386c

20001394 <board_setup>:

    }
}


void board_setup(){
20001394:	b480      	push	{r7}
20001396:	b083      	sub	sp, #12
20001398:	af00      	add	r7, sp, #0
/*** Handle any registers we need to setup here...
 *
***/
//	volatile uint32_t * SHCSR = (volatile uint32_t *)0xE000ED24;
//	volatile uint32_t * VTOR = (volatile uint32_t *)0xE000ED08; // Vector Table Offset Register
	volatile uint32_t * ACTLR = (volatile uint32_t *)0xE000E008;
2000139a:	4b0c      	ldr	r3, [pc, #48]	@ (200013cc <board_setup+0x38>)
2000139c:	607b      	str	r3, [r7, #4]


	volatile uint32_t reg_value = 0;
2000139e:	2300      	movs	r3, #0
200013a0:	603b      	str	r3, [r7, #0]

//	reg_value = *SHCSR;
//	reg_value = reg_value | 0x30000; //Enable BUSFAULT, MEMFAULT:bits 18,17,16
//	*SHCSR = reg_value;

	reg_value = *ACTLR;
200013a2:	687b      	ldr	r3, [r7, #4]
200013a4:	681b      	ldr	r3, [r3, #0]
200013a6:	603b      	str	r3, [r7, #0]
//	reg_value = reg_value | 0x1; //MultiCycle Instructions
	reg_value = reg_value | 0x2; //Disables write buffers; makes bus faults precise.
200013a8:	683b      	ldr	r3, [r7, #0]
200013aa:	f043 0302 	orr.w	r3, r3, #2
200013ae:	603b      	str	r3, [r7, #0]
	reg_value = reg_value | 0x4; //Disables IT instruction folding.
200013b0:	683b      	ldr	r3, [r7, #0]
200013b2:	f043 0304 	orr.w	r3, r3, #4
200013b6:	603b      	str	r3, [r7, #0]
	*ACTLR = reg_value;
200013b8:	683a      	ldr	r2, [r7, #0]
200013ba:	687b      	ldr	r3, [r7, #4]
200013bc:	601a      	str	r2, [r3, #0]
//	*VTOR = g_pfnVectors; //Set the vector table offset register

}
200013be:	bf00      	nop
200013c0:	370c      	adds	r7, #12
200013c2:	46bd      	mov	sp, r7
200013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200013c8:	4770      	bx	lr
200013ca:	bf00      	nop
200013cc:	e000e008 	.word	0xe000e008

200013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int16_t main(void)
{
200013d0:	b580      	push	{r7, lr}
200013d2:	af00      	add	r7, sp, #0


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
200013d4:	f000 f9ce 	bl	20001774 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
200013d8:	f000 f808 	bl	200013ec <SystemClock_Config>

  board_setup();
200013dc:	f7ff ffda 	bl	20001394 <board_setup>
  /* Initialize all configured peripherals */

  harness_loop();
200013e0:	f7ff ff8a 	bl	200012f8 <harness_loop>

  return 0;
200013e4:	2300      	movs	r3, #0
}
200013e6:	4618      	mov	r0, r3
200013e8:	bd80      	pop	{r7, pc}
	...

200013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
200013ec:	b580      	push	{r7, lr}
200013ee:	b094      	sub	sp, #80	@ 0x50
200013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
200013f2:	f107 031c 	add.w	r3, r7, #28
200013f6:	2234      	movs	r2, #52	@ 0x34
200013f8:	2100      	movs	r1, #0
200013fa:	4618      	mov	r0, r3
200013fc:	f001 fb52 	bl	20002aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20001400:	f107 0308 	add.w	r3, r7, #8
20001404:	2200      	movs	r2, #0
20001406:	601a      	str	r2, [r3, #0]
20001408:	605a      	str	r2, [r3, #4]
2000140a:	609a      	str	r2, [r3, #8]
2000140c:	60da      	str	r2, [r3, #12]
2000140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20001410:	2300      	movs	r3, #0
20001412:	607b      	str	r3, [r7, #4]
20001414:	4b23      	ldr	r3, [pc, #140]	@ (200014a4 <SystemClock_Config+0xb8>)
20001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20001418:	4a22      	ldr	r2, [pc, #136]	@ (200014a4 <SystemClock_Config+0xb8>)
2000141a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000141e:	6413      	str	r3, [r2, #64]	@ 0x40
20001420:	4b20      	ldr	r3, [pc, #128]	@ (200014a4 <SystemClock_Config+0xb8>)
20001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20001424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20001428:	607b      	str	r3, [r7, #4]
2000142a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
2000142c:	2300      	movs	r3, #0
2000142e:	603b      	str	r3, [r7, #0]
20001430:	4b1d      	ldr	r3, [pc, #116]	@ (200014a8 <SystemClock_Config+0xbc>)
20001432:	681b      	ldr	r3, [r3, #0]
20001434:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
20001438:	4a1b      	ldr	r2, [pc, #108]	@ (200014a8 <SystemClock_Config+0xbc>)
2000143a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
2000143e:	6013      	str	r3, [r2, #0]
20001440:	4b19      	ldr	r3, [pc, #100]	@ (200014a8 <SystemClock_Config+0xbc>)
20001442:	681b      	ldr	r3, [r3, #0]
20001444:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20001448:	603b      	str	r3, [r7, #0]
2000144a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
2000144c:	2302      	movs	r3, #2
2000144e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
20001450:	2301      	movs	r3, #1
20001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
20001454:	2310      	movs	r3, #16
20001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
20001458:	2300      	movs	r3, #0
2000145a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000145c:	f107 031c 	add.w	r3, r7, #28
20001460:	4618      	mov	r0, r3
20001462:	f000 fd6f 	bl	20001f44 <HAL_RCC_OscConfig>
20001466:	4603      	mov	r3, r0
20001468:	2b00      	cmp	r3, #0
2000146a:	d001      	beq.n	20001470 <SystemClock_Config+0x84>
  {
    Error_Handler();
2000146c:	f000 f81e 	bl	200014ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20001470:	230f      	movs	r3, #15
20001472:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
20001474:	2300      	movs	r3, #0
20001476:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20001478:	2300      	movs	r3, #0
2000147a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
2000147c:	2300      	movs	r3, #0
2000147e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
20001480:	2300      	movs	r3, #0
20001482:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
20001484:	f107 0308 	add.w	r3, r7, #8
20001488:	2100      	movs	r1, #0
2000148a:	4618      	mov	r0, r3
2000148c:	f000 faca 	bl	20001a24 <HAL_RCC_ClockConfig>
20001490:	4603      	mov	r3, r0
20001492:	2b00      	cmp	r3, #0
20001494:	d001      	beq.n	2000149a <SystemClock_Config+0xae>
  {
    Error_Handler();
20001496:	f000 f809 	bl	200014ac <Error_Handler>
  }
}
2000149a:	bf00      	nop
2000149c:	3750      	adds	r7, #80	@ 0x50
2000149e:	46bd      	mov	sp, r7
200014a0:	bd80      	pop	{r7, pc}
200014a2:	bf00      	nop
200014a4:	40023800 	.word	0x40023800
200014a8:	40007000 	.word	0x40007000

200014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
200014ac:	b480      	push	{r7}
200014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
200014b0:	b672      	cpsid	i
}
200014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
200014b4:	bf00      	nop
200014b6:	e7fd      	b.n	200014b4 <Error_Handler+0x8>

200014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
200014b8:	b480      	push	{r7}
200014ba:	b083      	sub	sp, #12
200014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
200014be:	2300      	movs	r3, #0
200014c0:	607b      	str	r3, [r7, #4]
200014c2:	4b10      	ldr	r3, [pc, #64]	@ (20001504 <HAL_MspInit+0x4c>)
200014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200014c6:	4a0f      	ldr	r2, [pc, #60]	@ (20001504 <HAL_MspInit+0x4c>)
200014c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
200014cc:	6453      	str	r3, [r2, #68]	@ 0x44
200014ce:	4b0d      	ldr	r3, [pc, #52]	@ (20001504 <HAL_MspInit+0x4c>)
200014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
200014d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
200014d6:	607b      	str	r3, [r7, #4]
200014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
200014da:	2300      	movs	r3, #0
200014dc:	603b      	str	r3, [r7, #0]
200014de:	4b09      	ldr	r3, [pc, #36]	@ (20001504 <HAL_MspInit+0x4c>)
200014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200014e2:	4a08      	ldr	r2, [pc, #32]	@ (20001504 <HAL_MspInit+0x4c>)
200014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200014e8:	6413      	str	r3, [r2, #64]	@ 0x40
200014ea:	4b06      	ldr	r3, [pc, #24]	@ (20001504 <HAL_MspInit+0x4c>)
200014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200014f2:	603b      	str	r3, [r7, #0]
200014f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
200014f6:	bf00      	nop
200014f8:	370c      	adds	r7, #12
200014fa:	46bd      	mov	sp, r7
200014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001500:	4770      	bx	lr
20001502:	bf00      	nop
20001504:	40023800 	.word	0x40023800

20001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20001508:	b480      	push	{r7}
2000150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
2000150c:	bf00      	nop
2000150e:	e7fd      	b.n	2000150c <NMI_Handler+0x4>

20001510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20001510:	b480      	push	{r7}
20001512:	af00      	add	r7, sp, #0
	__BKPT(10);
20001514:	be0a      	bkpt	0x000a
  while (1)
20001516:	bf00      	nop
20001518:	e7fd      	b.n	20001516 <HardFault_Handler+0x6>

2000151a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2000151a:	b480      	push	{r7}
2000151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000151e:	bf00      	nop
20001520:	e7fd      	b.n	2000151e <MemManage_Handler+0x4>

20001522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20001522:	b480      	push	{r7}
20001524:	af00      	add	r7, sp, #0

  while (1)
20001526:	bf00      	nop
20001528:	e7fd      	b.n	20001526 <BusFault_Handler+0x4>

2000152a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2000152a:	b480      	push	{r7}
2000152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	__BKPT(10);
2000152e:	be0a      	bkpt	0x000a
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20001530:	bf00      	nop
20001532:	e7fd      	b.n	20001530 <UsageFault_Handler+0x6>

20001534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
20001534:	b480      	push	{r7}
20001536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
20001538:	bf00      	nop
2000153a:	46bd      	mov	sp, r7
2000153c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001540:	4770      	bx	lr

20001542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20001542:	b480      	push	{r7}
20001544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20001546:	bf00      	nop
20001548:	46bd      	mov	sp, r7
2000154a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000154e:	4770      	bx	lr

20001550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20001550:	b480      	push	{r7}
20001552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
20001554:	bf00      	nop
20001556:	46bd      	mov	sp, r7
20001558:	f85d 7b04 	ldr.w	r7, [sp], #4
2000155c:	4770      	bx	lr

2000155e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2000155e:	b580      	push	{r7, lr}
20001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20001562:	f000 f959 	bl	20001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20001566:	bf00      	nop
20001568:	bd80      	pop	{r7, pc}

2000156a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
2000156a:	b480      	push	{r7}
2000156c:	af00      	add	r7, sp, #0
  return 1;
2000156e:	2301      	movs	r3, #1
}
20001570:	4618      	mov	r0, r3
20001572:	46bd      	mov	sp, r7
20001574:	f85d 7b04 	ldr.w	r7, [sp], #4
20001578:	4770      	bx	lr

2000157a <_kill>:

int _kill(int pid, int sig)
{
2000157a:	b580      	push	{r7, lr}
2000157c:	b082      	sub	sp, #8
2000157e:	af00      	add	r7, sp, #0
20001580:	6078      	str	r0, [r7, #4]
20001582:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
20001584:	f001 faec 	bl	20002b60 <__errno>
20001588:	4603      	mov	r3, r0
2000158a:	2216      	movs	r2, #22
2000158c:	601a      	str	r2, [r3, #0]
  return -1;
2000158e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
20001592:	4618      	mov	r0, r3
20001594:	3708      	adds	r7, #8
20001596:	46bd      	mov	sp, r7
20001598:	bd80      	pop	{r7, pc}

2000159a <_exit>:

void _exit (int status)
{
2000159a:	b580      	push	{r7, lr}
2000159c:	b082      	sub	sp, #8
2000159e:	af00      	add	r7, sp, #0
200015a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
200015a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
200015a6:	6878      	ldr	r0, [r7, #4]
200015a8:	f7ff ffe7 	bl	2000157a <_kill>
  while (1) {}    /* Make sure we hang here */
200015ac:	bf00      	nop
200015ae:	e7fd      	b.n	200015ac <_exit+0x12>

200015b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
200015b0:	b580      	push	{r7, lr}
200015b2:	b086      	sub	sp, #24
200015b4:	af00      	add	r7, sp, #0
200015b6:	60f8      	str	r0, [r7, #12]
200015b8:	60b9      	str	r1, [r7, #8]
200015ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
200015bc:	2300      	movs	r3, #0
200015be:	617b      	str	r3, [r7, #20]
200015c0:	e00a      	b.n	200015d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
200015c2:	f3af 8000 	nop.w
200015c6:	4601      	mov	r1, r0
200015c8:	68bb      	ldr	r3, [r7, #8]
200015ca:	1c5a      	adds	r2, r3, #1
200015cc:	60ba      	str	r2, [r7, #8]
200015ce:	b2ca      	uxtb	r2, r1
200015d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
200015d2:	697b      	ldr	r3, [r7, #20]
200015d4:	3301      	adds	r3, #1
200015d6:	617b      	str	r3, [r7, #20]
200015d8:	697a      	ldr	r2, [r7, #20]
200015da:	687b      	ldr	r3, [r7, #4]
200015dc:	429a      	cmp	r2, r3
200015de:	dbf0      	blt.n	200015c2 <_read+0x12>
  }

  return len;
200015e0:	687b      	ldr	r3, [r7, #4]
}
200015e2:	4618      	mov	r0, r3
200015e4:	3718      	adds	r7, #24
200015e6:	46bd      	mov	sp, r7
200015e8:	bd80      	pop	{r7, pc}

200015ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
200015ea:	b580      	push	{r7, lr}
200015ec:	b086      	sub	sp, #24
200015ee:	af00      	add	r7, sp, #0
200015f0:	60f8      	str	r0, [r7, #12]
200015f2:	60b9      	str	r1, [r7, #8]
200015f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
200015f6:	2300      	movs	r3, #0
200015f8:	617b      	str	r3, [r7, #20]
200015fa:	e009      	b.n	20001610 <_write+0x26>
  {
    __io_putchar(*ptr++);
200015fc:	68bb      	ldr	r3, [r7, #8]
200015fe:	1c5a      	adds	r2, r3, #1
20001600:	60ba      	str	r2, [r7, #8]
20001602:	781b      	ldrb	r3, [r3, #0]
20001604:	4618      	mov	r0, r3
20001606:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
2000160a:	697b      	ldr	r3, [r7, #20]
2000160c:	3301      	adds	r3, #1
2000160e:	617b      	str	r3, [r7, #20]
20001610:	697a      	ldr	r2, [r7, #20]
20001612:	687b      	ldr	r3, [r7, #4]
20001614:	429a      	cmp	r2, r3
20001616:	dbf1      	blt.n	200015fc <_write+0x12>
  }
  return len;
20001618:	687b      	ldr	r3, [r7, #4]
}
2000161a:	4618      	mov	r0, r3
2000161c:	3718      	adds	r7, #24
2000161e:	46bd      	mov	sp, r7
20001620:	bd80      	pop	{r7, pc}

20001622 <_close>:

int _close(int file)
{
20001622:	b480      	push	{r7}
20001624:	b083      	sub	sp, #12
20001626:	af00      	add	r7, sp, #0
20001628:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
2000162a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
2000162e:	4618      	mov	r0, r3
20001630:	370c      	adds	r7, #12
20001632:	46bd      	mov	sp, r7
20001634:	f85d 7b04 	ldr.w	r7, [sp], #4
20001638:	4770      	bx	lr

2000163a <_fstat>:


int _fstat(int file, struct stat *st)
{
2000163a:	b480      	push	{r7}
2000163c:	b083      	sub	sp, #12
2000163e:	af00      	add	r7, sp, #0
20001640:	6078      	str	r0, [r7, #4]
20001642:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
20001644:	683b      	ldr	r3, [r7, #0]
20001646:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
2000164a:	605a      	str	r2, [r3, #4]
  return 0;
2000164c:	2300      	movs	r3, #0
}
2000164e:	4618      	mov	r0, r3
20001650:	370c      	adds	r7, #12
20001652:	46bd      	mov	sp, r7
20001654:	f85d 7b04 	ldr.w	r7, [sp], #4
20001658:	4770      	bx	lr

2000165a <_isatty>:

int _isatty(int file)
{
2000165a:	b480      	push	{r7}
2000165c:	b083      	sub	sp, #12
2000165e:	af00      	add	r7, sp, #0
20001660:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
20001662:	2301      	movs	r3, #1
}
20001664:	4618      	mov	r0, r3
20001666:	370c      	adds	r7, #12
20001668:	46bd      	mov	sp, r7
2000166a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000166e:	4770      	bx	lr

20001670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
20001670:	b480      	push	{r7}
20001672:	b085      	sub	sp, #20
20001674:	af00      	add	r7, sp, #0
20001676:	60f8      	str	r0, [r7, #12]
20001678:	60b9      	str	r1, [r7, #8]
2000167a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
2000167c:	2300      	movs	r3, #0
}
2000167e:	4618      	mov	r0, r3
20001680:	3714      	adds	r7, #20
20001682:	46bd      	mov	sp, r7
20001684:	f85d 7b04 	ldr.w	r7, [sp], #4
20001688:	4770      	bx	lr
	...

2000168c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
2000168c:	b580      	push	{r7, lr}
2000168e:	b086      	sub	sp, #24
20001690:	af00      	add	r7, sp, #0
20001692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
20001694:	4a14      	ldr	r2, [pc, #80]	@ (200016e8 <_sbrk+0x5c>)
20001696:	4b15      	ldr	r3, [pc, #84]	@ (200016ec <_sbrk+0x60>)
20001698:	1ad3      	subs	r3, r2, r3
2000169a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
2000169c:	697b      	ldr	r3, [r7, #20]
2000169e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
200016a0:	4b13      	ldr	r3, [pc, #76]	@ (200016f0 <_sbrk+0x64>)
200016a2:	681b      	ldr	r3, [r3, #0]
200016a4:	2b00      	cmp	r3, #0
200016a6:	d102      	bne.n	200016ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
200016a8:	4b11      	ldr	r3, [pc, #68]	@ (200016f0 <_sbrk+0x64>)
200016aa:	4a12      	ldr	r2, [pc, #72]	@ (200016f4 <_sbrk+0x68>)
200016ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
200016ae:	4b10      	ldr	r3, [pc, #64]	@ (200016f0 <_sbrk+0x64>)
200016b0:	681a      	ldr	r2, [r3, #0]
200016b2:	687b      	ldr	r3, [r7, #4]
200016b4:	4413      	add	r3, r2
200016b6:	693a      	ldr	r2, [r7, #16]
200016b8:	429a      	cmp	r2, r3
200016ba:	d207      	bcs.n	200016cc <_sbrk+0x40>
  {
    errno = ENOMEM;
200016bc:	f001 fa50 	bl	20002b60 <__errno>
200016c0:	4603      	mov	r3, r0
200016c2:	220c      	movs	r2, #12
200016c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
200016c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
200016ca:	e009      	b.n	200016e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
200016cc:	4b08      	ldr	r3, [pc, #32]	@ (200016f0 <_sbrk+0x64>)
200016ce:	681b      	ldr	r3, [r3, #0]
200016d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
200016d2:	4b07      	ldr	r3, [pc, #28]	@ (200016f0 <_sbrk+0x64>)
200016d4:	681a      	ldr	r2, [r3, #0]
200016d6:	687b      	ldr	r3, [r7, #4]
200016d8:	4413      	add	r3, r2
200016da:	4a05      	ldr	r2, [pc, #20]	@ (200016f0 <_sbrk+0x64>)
200016dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
200016de:	68fb      	ldr	r3, [r7, #12]
}
200016e0:	4618      	mov	r0, r3
200016e2:	3718      	adds	r7, #24
200016e4:	46bd      	mov	sp, r7
200016e6:	bd80      	pop	{r7, pc}
200016e8:	20020000 	.word	0x20020000
200016ec:	00004096 	.word	0x00004096
200016f0:	20003870 	.word	0x20003870
200016f4:	200039c8 	.word	0x200039c8

200016f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
200016f8:	b480      	push	{r7}
200016fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200016fc:	4b08      	ldr	r3, [pc, #32]	@ (20001720 <SystemInit+0x28>)
200016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
20001702:	4a07      	ldr	r2, [pc, #28]	@ (20001720 <SystemInit+0x28>)
20001704:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
20001708:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
2000170c:	4b04      	ldr	r3, [pc, #16]	@ (20001720 <SystemInit+0x28>)
2000170e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
20001712:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
20001714:	bf00      	nop
20001716:	46bd      	mov	sp, r7
20001718:	f85d 7b04 	ldr.w	r7, [sp], #4
2000171c:	4770      	bx	lr
2000171e:	bf00      	nop
20001720:	e000ed00 	.word	0xe000ed00

20001724 <Reset_Handler>:

  .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20001724:	f8df d030 	ldr.w	sp, [pc, #48]	@ 20001758 <LoopFillZerobss+0xa>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
20001728:	f7ff ffe6 	bl	200016f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
2000172c:	480b      	ldr	r0, [pc, #44]	@ (2000175c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
2000172e:	490c      	ldr	r1, [pc, #48]	@ (20001760 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
20001730:	4a0c      	ldr	r2, [pc, #48]	@ (20001764 <LoopFillZerobss+0x16>)
  movs r3, #0
20001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001734:	e002      	b.n	2000173c <LoopCopyDataInit>

20001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]	//
20001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
2000173a:	3304      	adds	r3, #4

2000173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
2000173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
2000173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
20001740:	d3f9      	bcc.n	20001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20001742:	4a09      	ldr	r2, [pc, #36]	@ (20001768 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
20001744:	4c09      	ldr	r4, [pc, #36]	@ (2000176c <LoopFillZerobss+0x1e>)
  movs r3, #0
20001746:	2300      	movs	r3, #0
  b LoopFillZerobss
20001748:	e001      	b.n	2000174e <LoopFillZerobss>

2000174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
2000174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
2000174c:	3204      	adds	r2, #4

2000174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
2000174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
20001750:	d3fb      	bcc.n	2000174a <FillZerobss>
  
/* Call static constructors */
    //bl __libc_init_array
/* Call the application's entry point.*/
  bl  main
20001752:	f7ff fe3d 	bl	200013d0 <main>
  bx  lr    
20001756:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20001758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
2000175c:	2000364c 	.word	0x2000364c
  ldr r1, =_edata
20001760:	200036b4 	.word	0x200036b4
  ldr r2, =_sidata
20001764:	2000364c 	.word	0x2000364c
  ldr r2, =_sbss
20001768:	200036b4 	.word	0x200036b4
  ldr r4, =_ebss
2000176c:	200039c4 	.word	0x200039c4

20001770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20001770:	e7fe      	b.n	20001770 <ADC_IRQHandler>
	...

20001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001774:	b580      	push	{r7, lr}
20001776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001778:	4b0e      	ldr	r3, [pc, #56]	@ (200017b4 <HAL_Init+0x40>)
2000177a:	681b      	ldr	r3, [r3, #0]
2000177c:	4a0d      	ldr	r2, [pc, #52]	@ (200017b4 <HAL_Init+0x40>)
2000177e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
20001782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20001784:	4b0b      	ldr	r3, [pc, #44]	@ (200017b4 <HAL_Init+0x40>)
20001786:	681b      	ldr	r3, [r3, #0]
20001788:	4a0a      	ldr	r2, [pc, #40]	@ (200017b4 <HAL_Init+0x40>)
2000178a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
2000178e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001790:	4b08      	ldr	r3, [pc, #32]	@ (200017b4 <HAL_Init+0x40>)
20001792:	681b      	ldr	r3, [r3, #0]
20001794:	4a07      	ldr	r2, [pc, #28]	@ (200017b4 <HAL_Init+0x40>)
20001796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2000179a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000179c:	2003      	movs	r0, #3
2000179e:	f000 f90d 	bl	200019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
200017a2:	200f      	movs	r0, #15
200017a4:	f000 f808 	bl	200017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
200017a8:	f7ff fe86 	bl	200014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
200017ac:	2300      	movs	r3, #0
}
200017ae:	4618      	mov	r0, r3
200017b0:	bd80      	pop	{r7, pc}
200017b2:	bf00      	nop
200017b4:	40023c00 	.word	0x40023c00

200017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
200017b8:	b580      	push	{r7, lr}
200017ba:	b082      	sub	sp, #8
200017bc:	af00      	add	r7, sp, #0
200017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
200017c0:	4b12      	ldr	r3, [pc, #72]	@ (2000180c <HAL_InitTick+0x54>)
200017c2:	681a      	ldr	r2, [r3, #0]
200017c4:	4b12      	ldr	r3, [pc, #72]	@ (20001810 <HAL_InitTick+0x58>)
200017c6:	781b      	ldrb	r3, [r3, #0]
200017c8:	4619      	mov	r1, r3
200017ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
200017ce:	fbb3 f3f1 	udiv	r3, r3, r1
200017d2:	fbb2 f3f3 	udiv	r3, r2, r3
200017d6:	4618      	mov	r0, r3
200017d8:	f000 f917 	bl	20001a0a <HAL_SYSTICK_Config>
200017dc:	4603      	mov	r3, r0
200017de:	2b00      	cmp	r3, #0
200017e0:	d001      	beq.n	200017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
200017e2:	2301      	movs	r3, #1
200017e4:	e00e      	b.n	20001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
200017e6:	687b      	ldr	r3, [r7, #4]
200017e8:	2b0f      	cmp	r3, #15
200017ea:	d80a      	bhi.n	20001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
200017ec:	2200      	movs	r2, #0
200017ee:	6879      	ldr	r1, [r7, #4]
200017f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
200017f4:	f000 f8ed 	bl	200019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
200017f8:	4a06      	ldr	r2, [pc, #24]	@ (20001814 <HAL_InitTick+0x5c>)
200017fa:	687b      	ldr	r3, [r7, #4]
200017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
200017fe:	2300      	movs	r3, #0
20001800:	e000      	b.n	20001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
20001802:	2301      	movs	r3, #1
}
20001804:	4618      	mov	r0, r3
20001806:	3708      	adds	r7, #8
20001808:	46bd      	mov	sp, r7
2000180a:	bd80      	pop	{r7, pc}
2000180c:	2000364c 	.word	0x2000364c
20001810:	20003654 	.word	0x20003654
20001814:	20003650 	.word	0x20003650

20001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20001818:	b480      	push	{r7}
2000181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000181c:	4b06      	ldr	r3, [pc, #24]	@ (20001838 <HAL_IncTick+0x20>)
2000181e:	781b      	ldrb	r3, [r3, #0]
20001820:	461a      	mov	r2, r3
20001822:	4b06      	ldr	r3, [pc, #24]	@ (2000183c <HAL_IncTick+0x24>)
20001824:	681b      	ldr	r3, [r3, #0]
20001826:	4413      	add	r3, r2
20001828:	4a04      	ldr	r2, [pc, #16]	@ (2000183c <HAL_IncTick+0x24>)
2000182a:	6013      	str	r3, [r2, #0]
}
2000182c:	bf00      	nop
2000182e:	46bd      	mov	sp, r7
20001830:	f85d 7b04 	ldr.w	r7, [sp], #4
20001834:	4770      	bx	lr
20001836:	bf00      	nop
20001838:	20003654 	.word	0x20003654
2000183c:	20003874 	.word	0x20003874

20001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20001840:	b480      	push	{r7}
20001842:	af00      	add	r7, sp, #0
  return uwTick;
20001844:	4b03      	ldr	r3, [pc, #12]	@ (20001854 <HAL_GetTick+0x14>)
20001846:	681b      	ldr	r3, [r3, #0]
}
20001848:	4618      	mov	r0, r3
2000184a:	46bd      	mov	sp, r7
2000184c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001850:	4770      	bx	lr
20001852:	bf00      	nop
20001854:	20003874 	.word	0x20003874

20001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20001858:	b480      	push	{r7}
2000185a:	b085      	sub	sp, #20
2000185c:	af00      	add	r7, sp, #0
2000185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20001860:	687b      	ldr	r3, [r7, #4]
20001862:	f003 0307 	and.w	r3, r3, #7
20001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20001868:	4b0c      	ldr	r3, [pc, #48]	@ (2000189c <__NVIC_SetPriorityGrouping+0x44>)
2000186a:	68db      	ldr	r3, [r3, #12]
2000186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000186e:	68ba      	ldr	r2, [r7, #8]
20001870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
20001874:	4013      	ands	r3, r2
20001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20001878:	68fb      	ldr	r3, [r7, #12]
2000187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000187c:	68bb      	ldr	r3, [r7, #8]
2000187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20001880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
20001884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000188a:	4a04      	ldr	r2, [pc, #16]	@ (2000189c <__NVIC_SetPriorityGrouping+0x44>)
2000188c:	68bb      	ldr	r3, [r7, #8]
2000188e:	60d3      	str	r3, [r2, #12]
}
20001890:	bf00      	nop
20001892:	3714      	adds	r7, #20
20001894:	46bd      	mov	sp, r7
20001896:	f85d 7b04 	ldr.w	r7, [sp], #4
2000189a:	4770      	bx	lr
2000189c:	e000ed00 	.word	0xe000ed00

200018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200018a0:	b480      	push	{r7}
200018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200018a4:	4b04      	ldr	r3, [pc, #16]	@ (200018b8 <__NVIC_GetPriorityGrouping+0x18>)
200018a6:	68db      	ldr	r3, [r3, #12]
200018a8:	0a1b      	lsrs	r3, r3, #8
200018aa:	f003 0307 	and.w	r3, r3, #7
}
200018ae:	4618      	mov	r0, r3
200018b0:	46bd      	mov	sp, r7
200018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200018b6:	4770      	bx	lr
200018b8:	e000ed00 	.word	0xe000ed00

200018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
200018bc:	b480      	push	{r7}
200018be:	b083      	sub	sp, #12
200018c0:	af00      	add	r7, sp, #0
200018c2:	4603      	mov	r3, r0
200018c4:	6039      	str	r1, [r7, #0]
200018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
200018cc:	2b00      	cmp	r3, #0
200018ce:	db0a      	blt.n	200018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200018d0:	683b      	ldr	r3, [r7, #0]
200018d2:	b2da      	uxtb	r2, r3
200018d4:	490c      	ldr	r1, [pc, #48]	@ (20001908 <__NVIC_SetPriority+0x4c>)
200018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
200018da:	0112      	lsls	r2, r2, #4
200018dc:	b2d2      	uxtb	r2, r2
200018de:	440b      	add	r3, r1
200018e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
200018e4:	e00a      	b.n	200018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200018e6:	683b      	ldr	r3, [r7, #0]
200018e8:	b2da      	uxtb	r2, r3
200018ea:	4908      	ldr	r1, [pc, #32]	@ (2000190c <__NVIC_SetPriority+0x50>)
200018ec:	79fb      	ldrb	r3, [r7, #7]
200018ee:	f003 030f 	and.w	r3, r3, #15
200018f2:	3b04      	subs	r3, #4
200018f4:	0112      	lsls	r2, r2, #4
200018f6:	b2d2      	uxtb	r2, r2
200018f8:	440b      	add	r3, r1
200018fa:	761a      	strb	r2, [r3, #24]
}
200018fc:	bf00      	nop
200018fe:	370c      	adds	r7, #12
20001900:	46bd      	mov	sp, r7
20001902:	f85d 7b04 	ldr.w	r7, [sp], #4
20001906:	4770      	bx	lr
20001908:	e000e100 	.word	0xe000e100
2000190c:	e000ed00 	.word	0xe000ed00

20001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20001910:	b480      	push	{r7}
20001912:	b089      	sub	sp, #36	@ 0x24
20001914:	af00      	add	r7, sp, #0
20001916:	60f8      	str	r0, [r7, #12]
20001918:	60b9      	str	r1, [r7, #8]
2000191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000191c:	68fb      	ldr	r3, [r7, #12]
2000191e:	f003 0307 	and.w	r3, r3, #7
20001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001924:	69fb      	ldr	r3, [r7, #28]
20001926:	f1c3 0307 	rsb	r3, r3, #7
2000192a:	2b04      	cmp	r3, #4
2000192c:	bf28      	it	cs
2000192e:	2304      	movcs	r3, #4
20001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20001932:	69fb      	ldr	r3, [r7, #28]
20001934:	3304      	adds	r3, #4
20001936:	2b06      	cmp	r3, #6
20001938:	d902      	bls.n	20001940 <NVIC_EncodePriority+0x30>
2000193a:	69fb      	ldr	r3, [r7, #28]
2000193c:	3b03      	subs	r3, #3
2000193e:	e000      	b.n	20001942 <NVIC_EncodePriority+0x32>
20001940:	2300      	movs	r3, #0
20001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
20001948:	69bb      	ldr	r3, [r7, #24]
2000194a:	fa02 f303 	lsl.w	r3, r2, r3
2000194e:	43da      	mvns	r2, r3
20001950:	68bb      	ldr	r3, [r7, #8]
20001952:	401a      	ands	r2, r3
20001954:	697b      	ldr	r3, [r7, #20]
20001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20001958:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
2000195c:	697b      	ldr	r3, [r7, #20]
2000195e:	fa01 f303 	lsl.w	r3, r1, r3
20001962:	43d9      	mvns	r1, r3
20001964:	687b      	ldr	r3, [r7, #4]
20001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001968:	4313      	orrs	r3, r2
         );
}
2000196a:	4618      	mov	r0, r3
2000196c:	3724      	adds	r7, #36	@ 0x24
2000196e:	46bd      	mov	sp, r7
20001970:	f85d 7b04 	ldr.w	r7, [sp], #4
20001974:	4770      	bx	lr
	...

20001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20001978:	b580      	push	{r7, lr}
2000197a:	b082      	sub	sp, #8
2000197c:	af00      	add	r7, sp, #0
2000197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20001980:	687b      	ldr	r3, [r7, #4]
20001982:	3b01      	subs	r3, #1
20001984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
20001988:	d301      	bcc.n	2000198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000198a:	2301      	movs	r3, #1
2000198c:	e00f      	b.n	200019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000198e:	4a0a      	ldr	r2, [pc, #40]	@ (200019b8 <SysTick_Config+0x40>)
20001990:	687b      	ldr	r3, [r7, #4]
20001992:	3b01      	subs	r3, #1
20001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20001996:	210f      	movs	r1, #15
20001998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
2000199c:	f7ff ff8e 	bl	200018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
200019a0:	4b05      	ldr	r3, [pc, #20]	@ (200019b8 <SysTick_Config+0x40>)
200019a2:	2200      	movs	r2, #0
200019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200019a6:	4b04      	ldr	r3, [pc, #16]	@ (200019b8 <SysTick_Config+0x40>)
200019a8:	2207      	movs	r2, #7
200019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200019ac:	2300      	movs	r3, #0
}
200019ae:	4618      	mov	r0, r3
200019b0:	3708      	adds	r7, #8
200019b2:	46bd      	mov	sp, r7
200019b4:	bd80      	pop	{r7, pc}
200019b6:	bf00      	nop
200019b8:	e000e010 	.word	0xe000e010

200019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200019bc:	b580      	push	{r7, lr}
200019be:	b082      	sub	sp, #8
200019c0:	af00      	add	r7, sp, #0
200019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
200019c4:	6878      	ldr	r0, [r7, #4]
200019c6:	f7ff ff47 	bl	20001858 <__NVIC_SetPriorityGrouping>
}
200019ca:	bf00      	nop
200019cc:	3708      	adds	r7, #8
200019ce:	46bd      	mov	sp, r7
200019d0:	bd80      	pop	{r7, pc}

200019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
200019d2:	b580      	push	{r7, lr}
200019d4:	b086      	sub	sp, #24
200019d6:	af00      	add	r7, sp, #0
200019d8:	4603      	mov	r3, r0
200019da:	60b9      	str	r1, [r7, #8]
200019dc:	607a      	str	r2, [r7, #4]
200019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
200019e0:	2300      	movs	r3, #0
200019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
200019e4:	f7ff ff5c 	bl	200018a0 <__NVIC_GetPriorityGrouping>
200019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
200019ea:	687a      	ldr	r2, [r7, #4]
200019ec:	68b9      	ldr	r1, [r7, #8]
200019ee:	6978      	ldr	r0, [r7, #20]
200019f0:	f7ff ff8e 	bl	20001910 <NVIC_EncodePriority>
200019f4:	4602      	mov	r2, r0
200019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
200019fa:	4611      	mov	r1, r2
200019fc:	4618      	mov	r0, r3
200019fe:	f7ff ff5d 	bl	200018bc <__NVIC_SetPriority>
}
20001a02:	bf00      	nop
20001a04:	3718      	adds	r7, #24
20001a06:	46bd      	mov	sp, r7
20001a08:	bd80      	pop	{r7, pc}

20001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20001a0a:	b580      	push	{r7, lr}
20001a0c:	b082      	sub	sp, #8
20001a0e:	af00      	add	r7, sp, #0
20001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20001a12:	6878      	ldr	r0, [r7, #4]
20001a14:	f7ff ffb0 	bl	20001978 <SysTick_Config>
20001a18:	4603      	mov	r3, r0
}
20001a1a:	4618      	mov	r0, r3
20001a1c:	3708      	adds	r7, #8
20001a1e:	46bd      	mov	sp, r7
20001a20:	bd80      	pop	{r7, pc}
	...

20001a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20001a24:	b580      	push	{r7, lr}
20001a26:	b084      	sub	sp, #16
20001a28:	af00      	add	r7, sp, #0
20001a2a:	6078      	str	r0, [r7, #4]
20001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
20001a2e:	687b      	ldr	r3, [r7, #4]
20001a30:	2b00      	cmp	r3, #0
20001a32:	d101      	bne.n	20001a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
20001a34:	2301      	movs	r3, #1
20001a36:	e0cc      	b.n	20001bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
20001a38:	4b68      	ldr	r3, [pc, #416]	@ (20001bdc <HAL_RCC_ClockConfig+0x1b8>)
20001a3a:	681b      	ldr	r3, [r3, #0]
20001a3c:	f003 030f 	and.w	r3, r3, #15
20001a40:	683a      	ldr	r2, [r7, #0]
20001a42:	429a      	cmp	r2, r3
20001a44:	d90c      	bls.n	20001a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20001a46:	4b65      	ldr	r3, [pc, #404]	@ (20001bdc <HAL_RCC_ClockConfig+0x1b8>)
20001a48:	683a      	ldr	r2, [r7, #0]
20001a4a:	b2d2      	uxtb	r2, r2
20001a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20001a4e:	4b63      	ldr	r3, [pc, #396]	@ (20001bdc <HAL_RCC_ClockConfig+0x1b8>)
20001a50:	681b      	ldr	r3, [r3, #0]
20001a52:	f003 030f 	and.w	r3, r3, #15
20001a56:	683a      	ldr	r2, [r7, #0]
20001a58:	429a      	cmp	r2, r3
20001a5a:	d001      	beq.n	20001a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
20001a5c:	2301      	movs	r3, #1
20001a5e:	e0b8      	b.n	20001bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20001a60:	687b      	ldr	r3, [r7, #4]
20001a62:	681b      	ldr	r3, [r3, #0]
20001a64:	f003 0302 	and.w	r3, r3, #2
20001a68:	2b00      	cmp	r3, #0
20001a6a:	d020      	beq.n	20001aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20001a6c:	687b      	ldr	r3, [r7, #4]
20001a6e:	681b      	ldr	r3, [r3, #0]
20001a70:	f003 0304 	and.w	r3, r3, #4
20001a74:	2b00      	cmp	r3, #0
20001a76:	d005      	beq.n	20001a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20001a78:	4b59      	ldr	r3, [pc, #356]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001a7a:	689b      	ldr	r3, [r3, #8]
20001a7c:	4a58      	ldr	r2, [pc, #352]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001a7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
20001a82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20001a84:	687b      	ldr	r3, [r7, #4]
20001a86:	681b      	ldr	r3, [r3, #0]
20001a88:	f003 0308 	and.w	r3, r3, #8
20001a8c:	2b00      	cmp	r3, #0
20001a8e:	d005      	beq.n	20001a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20001a90:	4b53      	ldr	r3, [pc, #332]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001a92:	689b      	ldr	r3, [r3, #8]
20001a94:	4a52      	ldr	r2, [pc, #328]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001a96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
20001a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20001a9c:	4b50      	ldr	r3, [pc, #320]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001a9e:	689b      	ldr	r3, [r3, #8]
20001aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
20001aa4:	687b      	ldr	r3, [r7, #4]
20001aa6:	689b      	ldr	r3, [r3, #8]
20001aa8:	494d      	ldr	r1, [pc, #308]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001aaa:	4313      	orrs	r3, r2
20001aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20001aae:	687b      	ldr	r3, [r7, #4]
20001ab0:	681b      	ldr	r3, [r3, #0]
20001ab2:	f003 0301 	and.w	r3, r3, #1
20001ab6:	2b00      	cmp	r3, #0
20001ab8:	d044      	beq.n	20001b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20001aba:	687b      	ldr	r3, [r7, #4]
20001abc:	685b      	ldr	r3, [r3, #4]
20001abe:	2b01      	cmp	r3, #1
20001ac0:	d107      	bne.n	20001ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20001ac2:	4b47      	ldr	r3, [pc, #284]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001ac4:	681b      	ldr	r3, [r3, #0]
20001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20001aca:	2b00      	cmp	r3, #0
20001acc:	d119      	bne.n	20001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20001ace:	2301      	movs	r3, #1
20001ad0:	e07f      	b.n	20001bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20001ad2:	687b      	ldr	r3, [r7, #4]
20001ad4:	685b      	ldr	r3, [r3, #4]
20001ad6:	2b02      	cmp	r3, #2
20001ad8:	d003      	beq.n	20001ae2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20001ada:	687b      	ldr	r3, [r7, #4]
20001adc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20001ade:	2b03      	cmp	r3, #3
20001ae0:	d107      	bne.n	20001af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001ae2:	4b3f      	ldr	r3, [pc, #252]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001ae4:	681b      	ldr	r3, [r3, #0]
20001ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20001aea:	2b00      	cmp	r3, #0
20001aec:	d109      	bne.n	20001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20001aee:	2301      	movs	r3, #1
20001af0:	e06f      	b.n	20001bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001af2:	4b3b      	ldr	r3, [pc, #236]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001af4:	681b      	ldr	r3, [r3, #0]
20001af6:	f003 0302 	and.w	r3, r3, #2
20001afa:	2b00      	cmp	r3, #0
20001afc:	d101      	bne.n	20001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20001afe:	2301      	movs	r3, #1
20001b00:	e067      	b.n	20001bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20001b02:	4b37      	ldr	r3, [pc, #220]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001b04:	689b      	ldr	r3, [r3, #8]
20001b06:	f023 0203 	bic.w	r2, r3, #3
20001b0a:	687b      	ldr	r3, [r7, #4]
20001b0c:	685b      	ldr	r3, [r3, #4]
20001b0e:	4934      	ldr	r1, [pc, #208]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001b10:	4313      	orrs	r3, r2
20001b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
20001b14:	f7ff fe94 	bl	20001840 <HAL_GetTick>
20001b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20001b1a:	e00a      	b.n	20001b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20001b1c:	f7ff fe90 	bl	20001840 <HAL_GetTick>
20001b20:	4602      	mov	r2, r0
20001b22:	68fb      	ldr	r3, [r7, #12]
20001b24:	1ad3      	subs	r3, r2, r3
20001b26:	f241 3288 	movw	r2, #5000	@ 0x1388
20001b2a:	4293      	cmp	r3, r2
20001b2c:	d901      	bls.n	20001b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
20001b2e:	2303      	movs	r3, #3
20001b30:	e04f      	b.n	20001bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20001b32:	4b2b      	ldr	r3, [pc, #172]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001b34:	689b      	ldr	r3, [r3, #8]
20001b36:	f003 020c 	and.w	r2, r3, #12
20001b3a:	687b      	ldr	r3, [r7, #4]
20001b3c:	685b      	ldr	r3, [r3, #4]
20001b3e:	009b      	lsls	r3, r3, #2
20001b40:	429a      	cmp	r2, r3
20001b42:	d1eb      	bne.n	20001b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
20001b44:	4b25      	ldr	r3, [pc, #148]	@ (20001bdc <HAL_RCC_ClockConfig+0x1b8>)
20001b46:	681b      	ldr	r3, [r3, #0]
20001b48:	f003 030f 	and.w	r3, r3, #15
20001b4c:	683a      	ldr	r2, [r7, #0]
20001b4e:	429a      	cmp	r2, r3
20001b50:	d20c      	bcs.n	20001b6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20001b52:	4b22      	ldr	r3, [pc, #136]	@ (20001bdc <HAL_RCC_ClockConfig+0x1b8>)
20001b54:	683a      	ldr	r2, [r7, #0]
20001b56:	b2d2      	uxtb	r2, r2
20001b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20001b5a:	4b20      	ldr	r3, [pc, #128]	@ (20001bdc <HAL_RCC_ClockConfig+0x1b8>)
20001b5c:	681b      	ldr	r3, [r3, #0]
20001b5e:	f003 030f 	and.w	r3, r3, #15
20001b62:	683a      	ldr	r2, [r7, #0]
20001b64:	429a      	cmp	r2, r3
20001b66:	d001      	beq.n	20001b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20001b68:	2301      	movs	r3, #1
20001b6a:	e032      	b.n	20001bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20001b6c:	687b      	ldr	r3, [r7, #4]
20001b6e:	681b      	ldr	r3, [r3, #0]
20001b70:	f003 0304 	and.w	r3, r3, #4
20001b74:	2b00      	cmp	r3, #0
20001b76:	d008      	beq.n	20001b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20001b78:	4b19      	ldr	r3, [pc, #100]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001b7a:	689b      	ldr	r3, [r3, #8]
20001b7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
20001b80:	687b      	ldr	r3, [r7, #4]
20001b82:	68db      	ldr	r3, [r3, #12]
20001b84:	4916      	ldr	r1, [pc, #88]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001b86:	4313      	orrs	r3, r2
20001b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20001b8a:	687b      	ldr	r3, [r7, #4]
20001b8c:	681b      	ldr	r3, [r3, #0]
20001b8e:	f003 0308 	and.w	r3, r3, #8
20001b92:	2b00      	cmp	r3, #0
20001b94:	d009      	beq.n	20001baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20001b96:	4b12      	ldr	r3, [pc, #72]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001b98:	689b      	ldr	r3, [r3, #8]
20001b9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
20001b9e:	687b      	ldr	r3, [r7, #4]
20001ba0:	691b      	ldr	r3, [r3, #16]
20001ba2:	00db      	lsls	r3, r3, #3
20001ba4:	490e      	ldr	r1, [pc, #56]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001ba6:	4313      	orrs	r3, r2
20001ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
20001baa:	f000 f821 	bl	20001bf0 <HAL_RCC_GetSysClockFreq>
20001bae:	4602      	mov	r2, r0
20001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (20001be0 <HAL_RCC_ClockConfig+0x1bc>)
20001bb2:	689b      	ldr	r3, [r3, #8]
20001bb4:	091b      	lsrs	r3, r3, #4
20001bb6:	f003 030f 	and.w	r3, r3, #15
20001bba:	490a      	ldr	r1, [pc, #40]	@ (20001be4 <HAL_RCC_ClockConfig+0x1c0>)
20001bbc:	5ccb      	ldrb	r3, [r1, r3]
20001bbe:	fa22 f303 	lsr.w	r3, r2, r3
20001bc2:	4a09      	ldr	r2, [pc, #36]	@ (20001be8 <HAL_RCC_ClockConfig+0x1c4>)
20001bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
20001bc6:	4b09      	ldr	r3, [pc, #36]	@ (20001bec <HAL_RCC_ClockConfig+0x1c8>)
20001bc8:	681b      	ldr	r3, [r3, #0]
20001bca:	4618      	mov	r0, r3
20001bcc:	f7ff fdf4 	bl	200017b8 <HAL_InitTick>

  return HAL_OK;
20001bd0:	2300      	movs	r3, #0
}
20001bd2:	4618      	mov	r0, r3
20001bd4:	3710      	adds	r7, #16
20001bd6:	46bd      	mov	sp, r7
20001bd8:	bd80      	pop	{r7, pc}
20001bda:	bf00      	nop
20001bdc:	40023c00 	.word	0x40023c00
20001be0:	40023800 	.word	0x40023800
20001be4:	2000354c 	.word	0x2000354c
20001be8:	2000364c 	.word	0x2000364c
20001bec:	20003650 	.word	0x20003650

20001bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
20001bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20001bf4:	b0a6      	sub	sp, #152	@ 0x98
20001bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
20001bf8:	2300      	movs	r3, #0
20001bfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
20001bfe:	2300      	movs	r3, #0
20001c00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
20001c04:	2300      	movs	r3, #0
20001c06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
20001c0a:	2300      	movs	r3, #0
20001c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
20001c10:	2300      	movs	r3, #0
20001c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20001c16:	4bc8      	ldr	r3, [pc, #800]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001c18:	689b      	ldr	r3, [r3, #8]
20001c1a:	f003 030c 	and.w	r3, r3, #12
20001c1e:	2b0c      	cmp	r3, #12
20001c20:	f200 817e 	bhi.w	20001f20 <HAL_RCC_GetSysClockFreq+0x330>
20001c24:	a201      	add	r2, pc, #4	@ (adr r2, 20001c2c <HAL_RCC_GetSysClockFreq+0x3c>)
20001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001c2a:	bf00      	nop
20001c2c:	20001c61 	.word	0x20001c61
20001c30:	20001f21 	.word	0x20001f21
20001c34:	20001f21 	.word	0x20001f21
20001c38:	20001f21 	.word	0x20001f21
20001c3c:	20001c69 	.word	0x20001c69
20001c40:	20001f21 	.word	0x20001f21
20001c44:	20001f21 	.word	0x20001f21
20001c48:	20001f21 	.word	0x20001f21
20001c4c:	20001c71 	.word	0x20001c71
20001c50:	20001f21 	.word	0x20001f21
20001c54:	20001f21 	.word	0x20001f21
20001c58:	20001f21 	.word	0x20001f21
20001c5c:	20001ddb 	.word	0x20001ddb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20001c60:	4bb6      	ldr	r3, [pc, #728]	@ (20001f3c <HAL_RCC_GetSysClockFreq+0x34c>)
20001c62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
20001c66:	e15f      	b.n	20001f28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20001c68:	4bb5      	ldr	r3, [pc, #724]	@ (20001f40 <HAL_RCC_GetSysClockFreq+0x350>)
20001c6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
20001c6e:	e15b      	b.n	20001f28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001c70:	4bb1      	ldr	r3, [pc, #708]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001c72:	685b      	ldr	r3, [r3, #4]
20001c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20001c78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20001c7c:	4bae      	ldr	r3, [pc, #696]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001c7e:	685b      	ldr	r3, [r3, #4]
20001c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20001c84:	2b00      	cmp	r3, #0
20001c86:	d031      	beq.n	20001cec <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001c88:	4bab      	ldr	r3, [pc, #684]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001c8a:	685b      	ldr	r3, [r3, #4]
20001c8c:	099b      	lsrs	r3, r3, #6
20001c8e:	2200      	movs	r2, #0
20001c90:	66bb      	str	r3, [r7, #104]	@ 0x68
20001c92:	66fa      	str	r2, [r7, #108]	@ 0x6c
20001c94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
20001c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
20001c9a:	663b      	str	r3, [r7, #96]	@ 0x60
20001c9c:	2300      	movs	r3, #0
20001c9e:	667b      	str	r3, [r7, #100]	@ 0x64
20001ca0:	4ba7      	ldr	r3, [pc, #668]	@ (20001f40 <HAL_RCC_GetSysClockFreq+0x350>)
20001ca2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
20001ca6:	462a      	mov	r2, r5
20001ca8:	fb03 f202 	mul.w	r2, r3, r2
20001cac:	2300      	movs	r3, #0
20001cae:	4621      	mov	r1, r4
20001cb0:	fb01 f303 	mul.w	r3, r1, r3
20001cb4:	4413      	add	r3, r2
20001cb6:	4aa2      	ldr	r2, [pc, #648]	@ (20001f40 <HAL_RCC_GetSysClockFreq+0x350>)
20001cb8:	4621      	mov	r1, r4
20001cba:	fba1 1202 	umull	r1, r2, r1, r2
20001cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
20001cc0:	460a      	mov	r2, r1
20001cc2:	67ba      	str	r2, [r7, #120]	@ 0x78
20001cc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
20001cc6:	4413      	add	r3, r2
20001cc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
20001cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20001cce:	2200      	movs	r2, #0
20001cd0:	65bb      	str	r3, [r7, #88]	@ 0x58
20001cd2:	65fa      	str	r2, [r7, #92]	@ 0x5c
20001cd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
20001cd8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
20001cdc:	f7fe fb18 	bl	20000310 <__aeabi_uldivmod>
20001ce0:	4602      	mov	r2, r0
20001ce2:	460b      	mov	r3, r1
20001ce4:	4613      	mov	r3, r2
20001ce6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
20001cea:	e064      	b.n	20001db6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001cec:	4b92      	ldr	r3, [pc, #584]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001cee:	685b      	ldr	r3, [r3, #4]
20001cf0:	099b      	lsrs	r3, r3, #6
20001cf2:	2200      	movs	r2, #0
20001cf4:	653b      	str	r3, [r7, #80]	@ 0x50
20001cf6:	657a      	str	r2, [r7, #84]	@ 0x54
20001cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20001cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
20001cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
20001d00:	2300      	movs	r3, #0
20001d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
20001d04:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
20001d08:	4622      	mov	r2, r4
20001d0a:	462b      	mov	r3, r5
20001d0c:	f04f 0000 	mov.w	r0, #0
20001d10:	f04f 0100 	mov.w	r1, #0
20001d14:	0159      	lsls	r1, r3, #5
20001d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20001d1a:	0150      	lsls	r0, r2, #5
20001d1c:	4602      	mov	r2, r0
20001d1e:	460b      	mov	r3, r1
20001d20:	4621      	mov	r1, r4
20001d22:	1a51      	subs	r1, r2, r1
20001d24:	6139      	str	r1, [r7, #16]
20001d26:	4629      	mov	r1, r5
20001d28:	eb63 0301 	sbc.w	r3, r3, r1
20001d2c:	617b      	str	r3, [r7, #20]
20001d2e:	f04f 0200 	mov.w	r2, #0
20001d32:	f04f 0300 	mov.w	r3, #0
20001d36:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20001d3a:	4659      	mov	r1, fp
20001d3c:	018b      	lsls	r3, r1, #6
20001d3e:	4651      	mov	r1, sl
20001d40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
20001d44:	4651      	mov	r1, sl
20001d46:	018a      	lsls	r2, r1, #6
20001d48:	4651      	mov	r1, sl
20001d4a:	ebb2 0801 	subs.w	r8, r2, r1
20001d4e:	4659      	mov	r1, fp
20001d50:	eb63 0901 	sbc.w	r9, r3, r1
20001d54:	f04f 0200 	mov.w	r2, #0
20001d58:	f04f 0300 	mov.w	r3, #0
20001d5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20001d60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20001d64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
20001d68:	4690      	mov	r8, r2
20001d6a:	4699      	mov	r9, r3
20001d6c:	4623      	mov	r3, r4
20001d6e:	eb18 0303 	adds.w	r3, r8, r3
20001d72:	60bb      	str	r3, [r7, #8]
20001d74:	462b      	mov	r3, r5
20001d76:	eb49 0303 	adc.w	r3, r9, r3
20001d7a:	60fb      	str	r3, [r7, #12]
20001d7c:	f04f 0200 	mov.w	r2, #0
20001d80:	f04f 0300 	mov.w	r3, #0
20001d84:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
20001d88:	4629      	mov	r1, r5
20001d8a:	028b      	lsls	r3, r1, #10
20001d8c:	4621      	mov	r1, r4
20001d8e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20001d92:	4621      	mov	r1, r4
20001d94:	028a      	lsls	r2, r1, #10
20001d96:	4610      	mov	r0, r2
20001d98:	4619      	mov	r1, r3
20001d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20001d9e:	2200      	movs	r2, #0
20001da0:	643b      	str	r3, [r7, #64]	@ 0x40
20001da2:	647a      	str	r2, [r7, #68]	@ 0x44
20001da4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
20001da8:	f7fe fab2 	bl	20000310 <__aeabi_uldivmod>
20001dac:	4602      	mov	r2, r0
20001dae:	460b      	mov	r3, r1
20001db0:	4613      	mov	r3, r2
20001db2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
20001db6:	4b60      	ldr	r3, [pc, #384]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001db8:	685b      	ldr	r3, [r3, #4]
20001dba:	0c1b      	lsrs	r3, r3, #16
20001dbc:	f003 0303 	and.w	r3, r3, #3
20001dc0:	3301      	adds	r3, #1
20001dc2:	005b      	lsls	r3, r3, #1
20001dc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
20001dc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
20001dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
20001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
20001dd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
20001dd8:	e0a6      	b.n	20001f28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001dda:	4b57      	ldr	r3, [pc, #348]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001ddc:	685b      	ldr	r3, [r3, #4]
20001dde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20001de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20001de6:	4b54      	ldr	r3, [pc, #336]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001de8:	685b      	ldr	r3, [r3, #4]
20001dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20001dee:	2b00      	cmp	r3, #0
20001df0:	d02a      	beq.n	20001e48 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001df2:	4b51      	ldr	r3, [pc, #324]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001df4:	685b      	ldr	r3, [r3, #4]
20001df6:	099b      	lsrs	r3, r3, #6
20001df8:	2200      	movs	r2, #0
20001dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
20001dfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
20001dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20001e00:	f3c3 0008 	ubfx	r0, r3, #0, #9
20001e04:	2100      	movs	r1, #0
20001e06:	4b4e      	ldr	r3, [pc, #312]	@ (20001f40 <HAL_RCC_GetSysClockFreq+0x350>)
20001e08:	fb03 f201 	mul.w	r2, r3, r1
20001e0c:	2300      	movs	r3, #0
20001e0e:	fb00 f303 	mul.w	r3, r0, r3
20001e12:	4413      	add	r3, r2
20001e14:	4a4a      	ldr	r2, [pc, #296]	@ (20001f40 <HAL_RCC_GetSysClockFreq+0x350>)
20001e16:	fba0 1202 	umull	r1, r2, r0, r2
20001e1a:	677a      	str	r2, [r7, #116]	@ 0x74
20001e1c:	460a      	mov	r2, r1
20001e1e:	673a      	str	r2, [r7, #112]	@ 0x70
20001e20:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
20001e22:	4413      	add	r3, r2
20001e24:	677b      	str	r3, [r7, #116]	@ 0x74
20001e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20001e2a:	2200      	movs	r2, #0
20001e2c:	633b      	str	r3, [r7, #48]	@ 0x30
20001e2e:	637a      	str	r2, [r7, #52]	@ 0x34
20001e30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
20001e34:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
20001e38:	f7fe fa6a 	bl	20000310 <__aeabi_uldivmod>
20001e3c:	4602      	mov	r2, r0
20001e3e:	460b      	mov	r3, r1
20001e40:	4613      	mov	r3, r2
20001e42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
20001e46:	e05b      	b.n	20001f00 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001e48:	4b3b      	ldr	r3, [pc, #236]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001e4a:	685b      	ldr	r3, [r3, #4]
20001e4c:	099b      	lsrs	r3, r3, #6
20001e4e:	2200      	movs	r2, #0
20001e50:	62bb      	str	r3, [r7, #40]	@ 0x28
20001e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
20001e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
20001e5a:	623b      	str	r3, [r7, #32]
20001e5c:	2300      	movs	r3, #0
20001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
20001e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
20001e64:	4642      	mov	r2, r8
20001e66:	464b      	mov	r3, r9
20001e68:	f04f 0000 	mov.w	r0, #0
20001e6c:	f04f 0100 	mov.w	r1, #0
20001e70:	0159      	lsls	r1, r3, #5
20001e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20001e76:	0150      	lsls	r0, r2, #5
20001e78:	4602      	mov	r2, r0
20001e7a:	460b      	mov	r3, r1
20001e7c:	4641      	mov	r1, r8
20001e7e:	ebb2 0a01 	subs.w	sl, r2, r1
20001e82:	4649      	mov	r1, r9
20001e84:	eb63 0b01 	sbc.w	fp, r3, r1
20001e88:	f04f 0200 	mov.w	r2, #0
20001e8c:	f04f 0300 	mov.w	r3, #0
20001e90:	ea4f 138b 	mov.w	r3, fp, lsl #6
20001e94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
20001e98:	ea4f 128a 	mov.w	r2, sl, lsl #6
20001e9c:	ebb2 040a 	subs.w	r4, r2, sl
20001ea0:	eb63 050b 	sbc.w	r5, r3, fp
20001ea4:	f04f 0200 	mov.w	r2, #0
20001ea8:	f04f 0300 	mov.w	r3, #0
20001eac:	00eb      	lsls	r3, r5, #3
20001eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20001eb2:	00e2      	lsls	r2, r4, #3
20001eb4:	4614      	mov	r4, r2
20001eb6:	461d      	mov	r5, r3
20001eb8:	4643      	mov	r3, r8
20001eba:	18e3      	adds	r3, r4, r3
20001ebc:	603b      	str	r3, [r7, #0]
20001ebe:	464b      	mov	r3, r9
20001ec0:	eb45 0303 	adc.w	r3, r5, r3
20001ec4:	607b      	str	r3, [r7, #4]
20001ec6:	f04f 0200 	mov.w	r2, #0
20001eca:	f04f 0300 	mov.w	r3, #0
20001ece:	e9d7 4500 	ldrd	r4, r5, [r7]
20001ed2:	4629      	mov	r1, r5
20001ed4:	028b      	lsls	r3, r1, #10
20001ed6:	4621      	mov	r1, r4
20001ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20001edc:	4621      	mov	r1, r4
20001ede:	028a      	lsls	r2, r1, #10
20001ee0:	4610      	mov	r0, r2
20001ee2:	4619      	mov	r1, r3
20001ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20001ee8:	2200      	movs	r2, #0
20001eea:	61bb      	str	r3, [r7, #24]
20001eec:	61fa      	str	r2, [r7, #28]
20001eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20001ef2:	f7fe fa0d 	bl	20000310 <__aeabi_uldivmod>
20001ef6:	4602      	mov	r2, r0
20001ef8:	460b      	mov	r3, r1
20001efa:	4613      	mov	r3, r2
20001efc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
20001f00:	4b0d      	ldr	r3, [pc, #52]	@ (20001f38 <HAL_RCC_GetSysClockFreq+0x348>)
20001f02:	685b      	ldr	r3, [r3, #4]
20001f04:	0f1b      	lsrs	r3, r3, #28
20001f06:	f003 0307 	and.w	r3, r3, #7
20001f0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
20001f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
20001f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
20001f16:	fbb2 f3f3 	udiv	r3, r2, r3
20001f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
20001f1e:	e003      	b.n	20001f28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20001f20:	4b06      	ldr	r3, [pc, #24]	@ (20001f3c <HAL_RCC_GetSysClockFreq+0x34c>)
20001f22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
20001f26:	bf00      	nop
    }
  }
  return sysclockfreq;
20001f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
20001f2c:	4618      	mov	r0, r3
20001f2e:	3798      	adds	r7, #152	@ 0x98
20001f30:	46bd      	mov	sp, r7
20001f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20001f36:	bf00      	nop
20001f38:	40023800 	.word	0x40023800
20001f3c:	00f42400 	.word	0x00f42400
20001f40:	017d7840 	.word	0x017d7840

20001f44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20001f44:	b580      	push	{r7, lr}
20001f46:	b086      	sub	sp, #24
20001f48:	af00      	add	r7, sp, #0
20001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
20001f4c:	687b      	ldr	r3, [r7, #4]
20001f4e:	2b00      	cmp	r3, #0
20001f50:	d101      	bne.n	20001f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
20001f52:	2301      	movs	r3, #1
20001f54:	e28d      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20001f56:	687b      	ldr	r3, [r7, #4]
20001f58:	681b      	ldr	r3, [r3, #0]
20001f5a:	f003 0301 	and.w	r3, r3, #1
20001f5e:	2b00      	cmp	r3, #0
20001f60:	f000 8083 	beq.w	2000206a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
20001f64:	4b94      	ldr	r3, [pc, #592]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001f66:	689b      	ldr	r3, [r3, #8]
20001f68:	f003 030c 	and.w	r3, r3, #12
20001f6c:	2b04      	cmp	r3, #4
20001f6e:	d019      	beq.n	20001fa4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
20001f70:	4b91      	ldr	r3, [pc, #580]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001f72:	689b      	ldr	r3, [r3, #8]
20001f74:	f003 030c 	and.w	r3, r3, #12
        || \
20001f78:	2b08      	cmp	r3, #8
20001f7a:	d106      	bne.n	20001f8a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
20001f7c:	4b8e      	ldr	r3, [pc, #568]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001f7e:	685b      	ldr	r3, [r3, #4]
20001f80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20001f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20001f88:	d00c      	beq.n	20001fa4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20001f8a:	4b8b      	ldr	r3, [pc, #556]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001f8c:	689b      	ldr	r3, [r3, #8]
20001f8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
20001f92:	2b0c      	cmp	r3, #12
20001f94:	d112      	bne.n	20001fbc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20001f96:	4b88      	ldr	r3, [pc, #544]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001f98:	685b      	ldr	r3, [r3, #4]
20001f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20001f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
20001fa2:	d10b      	bne.n	20001fbc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20001fa4:	4b84      	ldr	r3, [pc, #528]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001fa6:	681b      	ldr	r3, [r3, #0]
20001fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20001fac:	2b00      	cmp	r3, #0
20001fae:	d05b      	beq.n	20002068 <HAL_RCC_OscConfig+0x124>
20001fb0:	687b      	ldr	r3, [r7, #4]
20001fb2:	685b      	ldr	r3, [r3, #4]
20001fb4:	2b00      	cmp	r3, #0
20001fb6:	d157      	bne.n	20002068 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
20001fb8:	2301      	movs	r3, #1
20001fba:	e25a      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20001fbc:	687b      	ldr	r3, [r7, #4]
20001fbe:	685b      	ldr	r3, [r3, #4]
20001fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20001fc4:	d106      	bne.n	20001fd4 <HAL_RCC_OscConfig+0x90>
20001fc6:	4b7c      	ldr	r3, [pc, #496]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001fc8:	681b      	ldr	r3, [r3, #0]
20001fca:	4a7b      	ldr	r2, [pc, #492]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20001fd0:	6013      	str	r3, [r2, #0]
20001fd2:	e01d      	b.n	20002010 <HAL_RCC_OscConfig+0xcc>
20001fd4:	687b      	ldr	r3, [r7, #4]
20001fd6:	685b      	ldr	r3, [r3, #4]
20001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
20001fdc:	d10c      	bne.n	20001ff8 <HAL_RCC_OscConfig+0xb4>
20001fde:	4b76      	ldr	r3, [pc, #472]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001fe0:	681b      	ldr	r3, [r3, #0]
20001fe2:	4a75      	ldr	r2, [pc, #468]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20001fe8:	6013      	str	r3, [r2, #0]
20001fea:	4b73      	ldr	r3, [pc, #460]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001fec:	681b      	ldr	r3, [r3, #0]
20001fee:	4a72      	ldr	r2, [pc, #456]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20001ff4:	6013      	str	r3, [r2, #0]
20001ff6:	e00b      	b.n	20002010 <HAL_RCC_OscConfig+0xcc>
20001ff8:	4b6f      	ldr	r3, [pc, #444]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001ffa:	681b      	ldr	r3, [r3, #0]
20001ffc:	4a6e      	ldr	r2, [pc, #440]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20001ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20002002:	6013      	str	r3, [r2, #0]
20002004:	4b6c      	ldr	r3, [pc, #432]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20002006:	681b      	ldr	r3, [r3, #0]
20002008:	4a6b      	ldr	r2, [pc, #428]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
2000200a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2000200e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20002010:	687b      	ldr	r3, [r7, #4]
20002012:	685b      	ldr	r3, [r3, #4]
20002014:	2b00      	cmp	r3, #0
20002016:	d013      	beq.n	20002040 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20002018:	f7ff fc12 	bl	20001840 <HAL_GetTick>
2000201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000201e:	e008      	b.n	20002032 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20002020:	f7ff fc0e 	bl	20001840 <HAL_GetTick>
20002024:	4602      	mov	r2, r0
20002026:	693b      	ldr	r3, [r7, #16]
20002028:	1ad3      	subs	r3, r2, r3
2000202a:	2b64      	cmp	r3, #100	@ 0x64
2000202c:	d901      	bls.n	20002032 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
2000202e:	2303      	movs	r3, #3
20002030:	e21f      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20002032:	4b61      	ldr	r3, [pc, #388]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20002034:	681b      	ldr	r3, [r3, #0]
20002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2000203a:	2b00      	cmp	r3, #0
2000203c:	d0f0      	beq.n	20002020 <HAL_RCC_OscConfig+0xdc>
2000203e:	e014      	b.n	2000206a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20002040:	f7ff fbfe 	bl	20001840 <HAL_GetTick>
20002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20002046:	e008      	b.n	2000205a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20002048:	f7ff fbfa 	bl	20001840 <HAL_GetTick>
2000204c:	4602      	mov	r2, r0
2000204e:	693b      	ldr	r3, [r7, #16]
20002050:	1ad3      	subs	r3, r2, r3
20002052:	2b64      	cmp	r3, #100	@ 0x64
20002054:	d901      	bls.n	2000205a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
20002056:	2303      	movs	r3, #3
20002058:	e20b      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000205a:	4b57      	ldr	r3, [pc, #348]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
2000205c:	681b      	ldr	r3, [r3, #0]
2000205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20002062:	2b00      	cmp	r3, #0
20002064:	d1f0      	bne.n	20002048 <HAL_RCC_OscConfig+0x104>
20002066:	e000      	b.n	2000206a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000206a:	687b      	ldr	r3, [r7, #4]
2000206c:	681b      	ldr	r3, [r3, #0]
2000206e:	f003 0302 	and.w	r3, r3, #2
20002072:	2b00      	cmp	r3, #0
20002074:	d06f      	beq.n	20002156 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
20002076:	4b50      	ldr	r3, [pc, #320]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20002078:	689b      	ldr	r3, [r3, #8]
2000207a:	f003 030c 	and.w	r3, r3, #12
2000207e:	2b00      	cmp	r3, #0
20002080:	d017      	beq.n	200020b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
20002082:	4b4d      	ldr	r3, [pc, #308]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20002084:	689b      	ldr	r3, [r3, #8]
20002086:	f003 030c 	and.w	r3, r3, #12
        || \
2000208a:	2b08      	cmp	r3, #8
2000208c:	d105      	bne.n	2000209a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
2000208e:	4b4a      	ldr	r3, [pc, #296]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20002090:	685b      	ldr	r3, [r3, #4]
20002092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20002096:	2b00      	cmp	r3, #0
20002098:	d00b      	beq.n	200020b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000209a:	4b47      	ldr	r3, [pc, #284]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
2000209c:	689b      	ldr	r3, [r3, #8]
2000209e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
200020a2:	2b0c      	cmp	r3, #12
200020a4:	d11c      	bne.n	200020e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200020a6:	4b44      	ldr	r3, [pc, #272]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
200020a8:	685b      	ldr	r3, [r3, #4]
200020aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200020ae:	2b00      	cmp	r3, #0
200020b0:	d116      	bne.n	200020e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200020b2:	4b41      	ldr	r3, [pc, #260]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
200020b4:	681b      	ldr	r3, [r3, #0]
200020b6:	f003 0302 	and.w	r3, r3, #2
200020ba:	2b00      	cmp	r3, #0
200020bc:	d005      	beq.n	200020ca <HAL_RCC_OscConfig+0x186>
200020be:	687b      	ldr	r3, [r7, #4]
200020c0:	68db      	ldr	r3, [r3, #12]
200020c2:	2b01      	cmp	r3, #1
200020c4:	d001      	beq.n	200020ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
200020c6:	2301      	movs	r3, #1
200020c8:	e1d3      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200020ca:	4b3b      	ldr	r3, [pc, #236]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
200020cc:	681b      	ldr	r3, [r3, #0]
200020ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
200020d2:	687b      	ldr	r3, [r7, #4]
200020d4:	691b      	ldr	r3, [r3, #16]
200020d6:	00db      	lsls	r3, r3, #3
200020d8:	4937      	ldr	r1, [pc, #220]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
200020da:	4313      	orrs	r3, r2
200020dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200020de:	e03a      	b.n	20002156 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
200020e0:	687b      	ldr	r3, [r7, #4]
200020e2:	68db      	ldr	r3, [r3, #12]
200020e4:	2b00      	cmp	r3, #0
200020e6:	d020      	beq.n	2000212a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
200020e8:	4b34      	ldr	r3, [pc, #208]	@ (200021bc <HAL_RCC_OscConfig+0x278>)
200020ea:	2201      	movs	r2, #1
200020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200020ee:	f7ff fba7 	bl	20001840 <HAL_GetTick>
200020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200020f4:	e008      	b.n	20002108 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
200020f6:	f7ff fba3 	bl	20001840 <HAL_GetTick>
200020fa:	4602      	mov	r2, r0
200020fc:	693b      	ldr	r3, [r7, #16]
200020fe:	1ad3      	subs	r3, r2, r3
20002100:	2b02      	cmp	r3, #2
20002102:	d901      	bls.n	20002108 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
20002104:	2303      	movs	r3, #3
20002106:	e1b4      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20002108:	4b2b      	ldr	r3, [pc, #172]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
2000210a:	681b      	ldr	r3, [r3, #0]
2000210c:	f003 0302 	and.w	r3, r3, #2
20002110:	2b00      	cmp	r3, #0
20002112:	d0f0      	beq.n	200020f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20002114:	4b28      	ldr	r3, [pc, #160]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20002116:	681b      	ldr	r3, [r3, #0]
20002118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
2000211c:	687b      	ldr	r3, [r7, #4]
2000211e:	691b      	ldr	r3, [r3, #16]
20002120:	00db      	lsls	r3, r3, #3
20002122:	4925      	ldr	r1, [pc, #148]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
20002124:	4313      	orrs	r3, r2
20002126:	600b      	str	r3, [r1, #0]
20002128:	e015      	b.n	20002156 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000212a:	4b24      	ldr	r3, [pc, #144]	@ (200021bc <HAL_RCC_OscConfig+0x278>)
2000212c:	2200      	movs	r2, #0
2000212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20002130:	f7ff fb86 	bl	20001840 <HAL_GetTick>
20002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20002136:	e008      	b.n	2000214a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20002138:	f7ff fb82 	bl	20001840 <HAL_GetTick>
2000213c:	4602      	mov	r2, r0
2000213e:	693b      	ldr	r3, [r7, #16]
20002140:	1ad3      	subs	r3, r2, r3
20002142:	2b02      	cmp	r3, #2
20002144:	d901      	bls.n	2000214a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
20002146:	2303      	movs	r3, #3
20002148:	e193      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000214a:	4b1b      	ldr	r3, [pc, #108]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
2000214c:	681b      	ldr	r3, [r3, #0]
2000214e:	f003 0302 	and.w	r3, r3, #2
20002152:	2b00      	cmp	r3, #0
20002154:	d1f0      	bne.n	20002138 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20002156:	687b      	ldr	r3, [r7, #4]
20002158:	681b      	ldr	r3, [r3, #0]
2000215a:	f003 0308 	and.w	r3, r3, #8
2000215e:	2b00      	cmp	r3, #0
20002160:	d036      	beq.n	200021d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
20002162:	687b      	ldr	r3, [r7, #4]
20002164:	695b      	ldr	r3, [r3, #20]
20002166:	2b00      	cmp	r3, #0
20002168:	d016      	beq.n	20002198 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000216a:	4b15      	ldr	r3, [pc, #84]	@ (200021c0 <HAL_RCC_OscConfig+0x27c>)
2000216c:	2201      	movs	r2, #1
2000216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20002170:	f7ff fb66 	bl	20001840 <HAL_GetTick>
20002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20002176:	e008      	b.n	2000218a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20002178:	f7ff fb62 	bl	20001840 <HAL_GetTick>
2000217c:	4602      	mov	r2, r0
2000217e:	693b      	ldr	r3, [r7, #16]
20002180:	1ad3      	subs	r3, r2, r3
20002182:	2b02      	cmp	r3, #2
20002184:	d901      	bls.n	2000218a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
20002186:	2303      	movs	r3, #3
20002188:	e173      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000218a:	4b0b      	ldr	r3, [pc, #44]	@ (200021b8 <HAL_RCC_OscConfig+0x274>)
2000218c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2000218e:	f003 0302 	and.w	r3, r3, #2
20002192:	2b00      	cmp	r3, #0
20002194:	d0f0      	beq.n	20002178 <HAL_RCC_OscConfig+0x234>
20002196:	e01b      	b.n	200021d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20002198:	4b09      	ldr	r3, [pc, #36]	@ (200021c0 <HAL_RCC_OscConfig+0x27c>)
2000219a:	2200      	movs	r2, #0
2000219c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000219e:	f7ff fb4f 	bl	20001840 <HAL_GetTick>
200021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200021a4:	e00e      	b.n	200021c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
200021a6:	f7ff fb4b 	bl	20001840 <HAL_GetTick>
200021aa:	4602      	mov	r2, r0
200021ac:	693b      	ldr	r3, [r7, #16]
200021ae:	1ad3      	subs	r3, r2, r3
200021b0:	2b02      	cmp	r3, #2
200021b2:	d907      	bls.n	200021c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
200021b4:	2303      	movs	r3, #3
200021b6:	e15c      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
200021b8:	40023800 	.word	0x40023800
200021bc:	42470000 	.word	0x42470000
200021c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200021c4:	4b8a      	ldr	r3, [pc, #552]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
200021c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200021c8:	f003 0302 	and.w	r3, r3, #2
200021cc:	2b00      	cmp	r3, #0
200021ce:	d1ea      	bne.n	200021a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
200021d0:	687b      	ldr	r3, [r7, #4]
200021d2:	681b      	ldr	r3, [r3, #0]
200021d4:	f003 0304 	and.w	r3, r3, #4
200021d8:	2b00      	cmp	r3, #0
200021da:	f000 8097 	beq.w	2000230c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
200021de:	2300      	movs	r3, #0
200021e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
200021e2:	4b83      	ldr	r3, [pc, #524]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
200021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200021e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200021ea:	2b00      	cmp	r3, #0
200021ec:	d10f      	bne.n	2000220e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
200021ee:	2300      	movs	r3, #0
200021f0:	60bb      	str	r3, [r7, #8]
200021f2:	4b7f      	ldr	r3, [pc, #508]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
200021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200021f6:	4a7e      	ldr	r2, [pc, #504]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
200021f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200021fc:	6413      	str	r3, [r2, #64]	@ 0x40
200021fe:	4b7c      	ldr	r3, [pc, #496]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20002206:	60bb      	str	r3, [r7, #8]
20002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000220a:	2301      	movs	r3, #1
2000220c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000220e:	4b79      	ldr	r3, [pc, #484]	@ (200023f4 <HAL_RCC_OscConfig+0x4b0>)
20002210:	681b      	ldr	r3, [r3, #0]
20002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20002216:	2b00      	cmp	r3, #0
20002218:	d118      	bne.n	2000224c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000221a:	4b76      	ldr	r3, [pc, #472]	@ (200023f4 <HAL_RCC_OscConfig+0x4b0>)
2000221c:	681b      	ldr	r3, [r3, #0]
2000221e:	4a75      	ldr	r2, [pc, #468]	@ (200023f4 <HAL_RCC_OscConfig+0x4b0>)
20002220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20002226:	f7ff fb0b 	bl	20001840 <HAL_GetTick>
2000222a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000222c:	e008      	b.n	20002240 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000222e:	f7ff fb07 	bl	20001840 <HAL_GetTick>
20002232:	4602      	mov	r2, r0
20002234:	693b      	ldr	r3, [r7, #16]
20002236:	1ad3      	subs	r3, r2, r3
20002238:	2b02      	cmp	r3, #2
2000223a:	d901      	bls.n	20002240 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
2000223c:	2303      	movs	r3, #3
2000223e:	e118      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20002240:	4b6c      	ldr	r3, [pc, #432]	@ (200023f4 <HAL_RCC_OscConfig+0x4b0>)
20002242:	681b      	ldr	r3, [r3, #0]
20002244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20002248:	2b00      	cmp	r3, #0
2000224a:	d0f0      	beq.n	2000222e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000224c:	687b      	ldr	r3, [r7, #4]
2000224e:	689b      	ldr	r3, [r3, #8]
20002250:	2b01      	cmp	r3, #1
20002252:	d106      	bne.n	20002262 <HAL_RCC_OscConfig+0x31e>
20002254:	4b66      	ldr	r3, [pc, #408]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20002258:	4a65      	ldr	r2, [pc, #404]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
2000225a:	f043 0301 	orr.w	r3, r3, #1
2000225e:	6713      	str	r3, [r2, #112]	@ 0x70
20002260:	e01c      	b.n	2000229c <HAL_RCC_OscConfig+0x358>
20002262:	687b      	ldr	r3, [r7, #4]
20002264:	689b      	ldr	r3, [r3, #8]
20002266:	2b05      	cmp	r3, #5
20002268:	d10c      	bne.n	20002284 <HAL_RCC_OscConfig+0x340>
2000226a:	4b61      	ldr	r3, [pc, #388]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
2000226c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000226e:	4a60      	ldr	r2, [pc, #384]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002270:	f043 0304 	orr.w	r3, r3, #4
20002274:	6713      	str	r3, [r2, #112]	@ 0x70
20002276:	4b5e      	ldr	r3, [pc, #376]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000227a:	4a5d      	ldr	r2, [pc, #372]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
2000227c:	f043 0301 	orr.w	r3, r3, #1
20002280:	6713      	str	r3, [r2, #112]	@ 0x70
20002282:	e00b      	b.n	2000229c <HAL_RCC_OscConfig+0x358>
20002284:	4b5a      	ldr	r3, [pc, #360]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20002288:	4a59      	ldr	r2, [pc, #356]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
2000228a:	f023 0301 	bic.w	r3, r3, #1
2000228e:	6713      	str	r3, [r2, #112]	@ 0x70
20002290:	4b57      	ldr	r3, [pc, #348]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20002294:	4a56      	ldr	r2, [pc, #344]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002296:	f023 0304 	bic.w	r3, r3, #4
2000229a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000229c:	687b      	ldr	r3, [r7, #4]
2000229e:	689b      	ldr	r3, [r3, #8]
200022a0:	2b00      	cmp	r3, #0
200022a2:	d015      	beq.n	200022d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200022a4:	f7ff facc 	bl	20001840 <HAL_GetTick>
200022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200022aa:	e00a      	b.n	200022c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
200022ac:	f7ff fac8 	bl	20001840 <HAL_GetTick>
200022b0:	4602      	mov	r2, r0
200022b2:	693b      	ldr	r3, [r7, #16]
200022b4:	1ad3      	subs	r3, r2, r3
200022b6:	f241 3288 	movw	r2, #5000	@ 0x1388
200022ba:	4293      	cmp	r3, r2
200022bc:	d901      	bls.n	200022c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
200022be:	2303      	movs	r3, #3
200022c0:	e0d7      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200022c2:	4b4b      	ldr	r3, [pc, #300]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
200022c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200022c6:	f003 0302 	and.w	r3, r3, #2
200022ca:	2b00      	cmp	r3, #0
200022cc:	d0ee      	beq.n	200022ac <HAL_RCC_OscConfig+0x368>
200022ce:	e014      	b.n	200022fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200022d0:	f7ff fab6 	bl	20001840 <HAL_GetTick>
200022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200022d6:	e00a      	b.n	200022ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
200022d8:	f7ff fab2 	bl	20001840 <HAL_GetTick>
200022dc:	4602      	mov	r2, r0
200022de:	693b      	ldr	r3, [r7, #16]
200022e0:	1ad3      	subs	r3, r2, r3
200022e2:	f241 3288 	movw	r2, #5000	@ 0x1388
200022e6:	4293      	cmp	r3, r2
200022e8:	d901      	bls.n	200022ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
200022ea:	2303      	movs	r3, #3
200022ec:	e0c1      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200022ee:	4b40      	ldr	r3, [pc, #256]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
200022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200022f2:	f003 0302 	and.w	r3, r3, #2
200022f6:	2b00      	cmp	r3, #0
200022f8:	d1ee      	bne.n	200022d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
200022fa:	7dfb      	ldrb	r3, [r7, #23]
200022fc:	2b01      	cmp	r3, #1
200022fe:	d105      	bne.n	2000230c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20002300:	4b3b      	ldr	r3, [pc, #236]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002304:	4a3a      	ldr	r2, [pc, #232]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
2000230a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000230c:	687b      	ldr	r3, [r7, #4]
2000230e:	699b      	ldr	r3, [r3, #24]
20002310:	2b00      	cmp	r3, #0
20002312:	f000 80ad 	beq.w	20002470 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20002316:	4b36      	ldr	r3, [pc, #216]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002318:	689b      	ldr	r3, [r3, #8]
2000231a:	f003 030c 	and.w	r3, r3, #12
2000231e:	2b08      	cmp	r3, #8
20002320:	d060      	beq.n	200023e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20002322:	687b      	ldr	r3, [r7, #4]
20002324:	699b      	ldr	r3, [r3, #24]
20002326:	2b02      	cmp	r3, #2
20002328:	d145      	bne.n	200023b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000232a:	4b33      	ldr	r3, [pc, #204]	@ (200023f8 <HAL_RCC_OscConfig+0x4b4>)
2000232c:	2200      	movs	r2, #0
2000232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20002330:	f7ff fa86 	bl	20001840 <HAL_GetTick>
20002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20002336:	e008      	b.n	2000234a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20002338:	f7ff fa82 	bl	20001840 <HAL_GetTick>
2000233c:	4602      	mov	r2, r0
2000233e:	693b      	ldr	r3, [r7, #16]
20002340:	1ad3      	subs	r3, r2, r3
20002342:	2b02      	cmp	r3, #2
20002344:	d901      	bls.n	2000234a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
20002346:	2303      	movs	r3, #3
20002348:	e093      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000234a:	4b29      	ldr	r3, [pc, #164]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
2000234c:	681b      	ldr	r3, [r3, #0]
2000234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20002352:	2b00      	cmp	r3, #0
20002354:	d1f0      	bne.n	20002338 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
20002356:	687b      	ldr	r3, [r7, #4]
20002358:	69da      	ldr	r2, [r3, #28]
2000235a:	687b      	ldr	r3, [r7, #4]
2000235c:	6a1b      	ldr	r3, [r3, #32]
2000235e:	431a      	orrs	r2, r3
20002360:	687b      	ldr	r3, [r7, #4]
20002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20002364:	019b      	lsls	r3, r3, #6
20002366:	431a      	orrs	r2, r3
20002368:	687b      	ldr	r3, [r7, #4]
2000236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2000236c:	085b      	lsrs	r3, r3, #1
2000236e:	3b01      	subs	r3, #1
20002370:	041b      	lsls	r3, r3, #16
20002372:	431a      	orrs	r2, r3
20002374:	687b      	ldr	r3, [r7, #4]
20002376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20002378:	061b      	lsls	r3, r3, #24
2000237a:	431a      	orrs	r2, r3
2000237c:	687b      	ldr	r3, [r7, #4]
2000237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20002380:	071b      	lsls	r3, r3, #28
20002382:	491b      	ldr	r1, [pc, #108]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
20002384:	4313      	orrs	r3, r2
20002386:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20002388:	4b1b      	ldr	r3, [pc, #108]	@ (200023f8 <HAL_RCC_OscConfig+0x4b4>)
2000238a:	2201      	movs	r2, #1
2000238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000238e:	f7ff fa57 	bl	20001840 <HAL_GetTick>
20002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20002394:	e008      	b.n	200023a8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20002396:	f7ff fa53 	bl	20001840 <HAL_GetTick>
2000239a:	4602      	mov	r2, r0
2000239c:	693b      	ldr	r3, [r7, #16]
2000239e:	1ad3      	subs	r3, r2, r3
200023a0:	2b02      	cmp	r3, #2
200023a2:	d901      	bls.n	200023a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
200023a4:	2303      	movs	r3, #3
200023a6:	e064      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200023a8:	4b11      	ldr	r3, [pc, #68]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
200023aa:	681b      	ldr	r3, [r3, #0]
200023ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200023b0:	2b00      	cmp	r3, #0
200023b2:	d0f0      	beq.n	20002396 <HAL_RCC_OscConfig+0x452>
200023b4:	e05c      	b.n	20002470 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200023b6:	4b10      	ldr	r3, [pc, #64]	@ (200023f8 <HAL_RCC_OscConfig+0x4b4>)
200023b8:	2200      	movs	r2, #0
200023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200023bc:	f7ff fa40 	bl	20001840 <HAL_GetTick>
200023c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200023c2:	e008      	b.n	200023d6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200023c4:	f7ff fa3c 	bl	20001840 <HAL_GetTick>
200023c8:	4602      	mov	r2, r0
200023ca:	693b      	ldr	r3, [r7, #16]
200023cc:	1ad3      	subs	r3, r2, r3
200023ce:	2b02      	cmp	r3, #2
200023d0:	d901      	bls.n	200023d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
200023d2:	2303      	movs	r3, #3
200023d4:	e04d      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200023d6:	4b06      	ldr	r3, [pc, #24]	@ (200023f0 <HAL_RCC_OscConfig+0x4ac>)
200023d8:	681b      	ldr	r3, [r3, #0]
200023da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200023de:	2b00      	cmp	r3, #0
200023e0:	d1f0      	bne.n	200023c4 <HAL_RCC_OscConfig+0x480>
200023e2:	e045      	b.n	20002470 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
200023e4:	687b      	ldr	r3, [r7, #4]
200023e6:	699b      	ldr	r3, [r3, #24]
200023e8:	2b01      	cmp	r3, #1
200023ea:	d107      	bne.n	200023fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
200023ec:	2301      	movs	r3, #1
200023ee:	e040      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
200023f0:	40023800 	.word	0x40023800
200023f4:	40007000 	.word	0x40007000
200023f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
200023fc:	4b1f      	ldr	r3, [pc, #124]	@ (2000247c <HAL_RCC_OscConfig+0x538>)
200023fe:	685b      	ldr	r3, [r3, #4]
20002400:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20002402:	687b      	ldr	r3, [r7, #4]
20002404:	699b      	ldr	r3, [r3, #24]
20002406:	2b01      	cmp	r3, #1
20002408:	d030      	beq.n	2000246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000240a:	68fb      	ldr	r3, [r7, #12]
2000240c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
20002410:	687b      	ldr	r3, [r7, #4]
20002412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20002414:	429a      	cmp	r2, r3
20002416:	d129      	bne.n	2000246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20002418:	68fb      	ldr	r3, [r7, #12]
2000241a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
2000241e:	687b      	ldr	r3, [r7, #4]
20002420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20002422:	429a      	cmp	r2, r3
20002424:	d122      	bne.n	2000246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002426:	68fa      	ldr	r2, [r7, #12]
20002428:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
2000242c:	4013      	ands	r3, r2
2000242e:	687a      	ldr	r2, [r7, #4]
20002430:	6a52      	ldr	r2, [r2, #36]	@ 0x24
20002432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20002434:	4293      	cmp	r3, r2
20002436:	d119      	bne.n	2000246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20002438:	68fb      	ldr	r3, [r7, #12]
2000243a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
2000243e:	687b      	ldr	r3, [r7, #4]
20002440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20002442:	085b      	lsrs	r3, r3, #1
20002444:	3b01      	subs	r3, #1
20002446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002448:	429a      	cmp	r2, r3
2000244a:	d10f      	bne.n	2000246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
2000244c:	68fb      	ldr	r3, [r7, #12]
2000244e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
20002452:	687b      	ldr	r3, [r7, #4]
20002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20002456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20002458:	429a      	cmp	r2, r3
2000245a:	d107      	bne.n	2000246c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
2000245c:	68fb      	ldr	r3, [r7, #12]
2000245e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
20002462:	687b      	ldr	r3, [r7, #4]
20002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20002466:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20002468:	429a      	cmp	r2, r3
2000246a:	d001      	beq.n	20002470 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
2000246c:	2301      	movs	r3, #1
2000246e:	e000      	b.n	20002472 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
20002470:	2300      	movs	r3, #0
}
20002472:	4618      	mov	r0, r3
20002474:	3718      	adds	r7, #24
20002476:	46bd      	mov	sp, r7
20002478:	bd80      	pop	{r7, pc}
2000247a:	bf00      	nop
2000247c:	40023800 	.word	0x40023800

20002480 <calloc>:
20002480:	4b02      	ldr	r3, [pc, #8]	@ (2000248c <calloc+0xc>)
20002482:	460a      	mov	r2, r1
20002484:	4601      	mov	r1, r0
20002486:	6818      	ldr	r0, [r3, #0]
20002488:	f000 b802 	b.w	20002490 <_calloc_r>
2000248c:	20003664 	.word	0x20003664

20002490 <_calloc_r>:
20002490:	b570      	push	{r4, r5, r6, lr}
20002492:	fba1 5402 	umull	r5, r4, r1, r2
20002496:	b93c      	cbnz	r4, 200024a8 <_calloc_r+0x18>
20002498:	4629      	mov	r1, r5
2000249a:	f000 f841 	bl	20002520 <_malloc_r>
2000249e:	4606      	mov	r6, r0
200024a0:	b928      	cbnz	r0, 200024ae <_calloc_r+0x1e>
200024a2:	2600      	movs	r6, #0
200024a4:	4630      	mov	r0, r6
200024a6:	bd70      	pop	{r4, r5, r6, pc}
200024a8:	220c      	movs	r2, #12
200024aa:	6002      	str	r2, [r0, #0]
200024ac:	e7f9      	b.n	200024a2 <_calloc_r+0x12>
200024ae:	462a      	mov	r2, r5
200024b0:	4621      	mov	r1, r4
200024b2:	f000 faf7 	bl	20002aa4 <memset>
200024b6:	e7f5      	b.n	200024a4 <_calloc_r+0x14>

200024b8 <exit>:
200024b8:	b508      	push	{r3, lr}
200024ba:	4b06      	ldr	r3, [pc, #24]	@ (200024d4 <exit+0x1c>)
200024bc:	4604      	mov	r4, r0
200024be:	b113      	cbz	r3, 200024c6 <exit+0xe>
200024c0:	2100      	movs	r1, #0
200024c2:	f3af 8000 	nop.w
200024c6:	4b04      	ldr	r3, [pc, #16]	@ (200024d8 <exit+0x20>)
200024c8:	681b      	ldr	r3, [r3, #0]
200024ca:	b103      	cbz	r3, 200024ce <exit+0x16>
200024cc:	4798      	blx	r3
200024ce:	4620      	mov	r0, r4
200024d0:	f7ff f863 	bl	2000159a <_exit>
200024d4:	00000000 	.word	0x00000000
200024d8:	200039b8 	.word	0x200039b8

200024dc <sbrk_aligned>:
200024dc:	b570      	push	{r4, r5, r6, lr}
200024de:	4e0f      	ldr	r6, [pc, #60]	@ (2000251c <sbrk_aligned+0x40>)
200024e0:	460c      	mov	r4, r1
200024e2:	6831      	ldr	r1, [r6, #0]
200024e4:	4605      	mov	r5, r0
200024e6:	b911      	cbnz	r1, 200024ee <sbrk_aligned+0x12>
200024e8:	f000 fb18 	bl	20002b1c <_sbrk_r>
200024ec:	6030      	str	r0, [r6, #0]
200024ee:	4621      	mov	r1, r4
200024f0:	4628      	mov	r0, r5
200024f2:	f000 fb13 	bl	20002b1c <_sbrk_r>
200024f6:	1c43      	adds	r3, r0, #1
200024f8:	d103      	bne.n	20002502 <sbrk_aligned+0x26>
200024fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
200024fe:	4620      	mov	r0, r4
20002500:	bd70      	pop	{r4, r5, r6, pc}
20002502:	1cc4      	adds	r4, r0, #3
20002504:	f024 0403 	bic.w	r4, r4, #3
20002508:	42a0      	cmp	r0, r4
2000250a:	d0f8      	beq.n	200024fe <sbrk_aligned+0x22>
2000250c:	1a21      	subs	r1, r4, r0
2000250e:	4628      	mov	r0, r5
20002510:	f000 fb04 	bl	20002b1c <_sbrk_r>
20002514:	3001      	adds	r0, #1
20002516:	d1f2      	bne.n	200024fe <sbrk_aligned+0x22>
20002518:	e7ef      	b.n	200024fa <sbrk_aligned+0x1e>
2000251a:	bf00      	nop
2000251c:	20003878 	.word	0x20003878

20002520 <_malloc_r>:
20002520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
20002524:	1ccd      	adds	r5, r1, #3
20002526:	f025 0503 	bic.w	r5, r5, #3
2000252a:	3508      	adds	r5, #8
2000252c:	2d0c      	cmp	r5, #12
2000252e:	bf38      	it	cc
20002530:	250c      	movcc	r5, #12
20002532:	2d00      	cmp	r5, #0
20002534:	4606      	mov	r6, r0
20002536:	db01      	blt.n	2000253c <_malloc_r+0x1c>
20002538:	42a9      	cmp	r1, r5
2000253a:	d904      	bls.n	20002546 <_malloc_r+0x26>
2000253c:	230c      	movs	r3, #12
2000253e:	6033      	str	r3, [r6, #0]
20002540:	2000      	movs	r0, #0
20002542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
20002546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 2000261c <_malloc_r+0xfc>
2000254a:	f000 f869 	bl	20002620 <__malloc_lock>
2000254e:	f8d8 3000 	ldr.w	r3, [r8]
20002552:	461c      	mov	r4, r3
20002554:	bb44      	cbnz	r4, 200025a8 <_malloc_r+0x88>
20002556:	4629      	mov	r1, r5
20002558:	4630      	mov	r0, r6
2000255a:	f7ff ffbf 	bl	200024dc <sbrk_aligned>
2000255e:	1c43      	adds	r3, r0, #1
20002560:	4604      	mov	r4, r0
20002562:	d158      	bne.n	20002616 <_malloc_r+0xf6>
20002564:	f8d8 4000 	ldr.w	r4, [r8]
20002568:	4627      	mov	r7, r4
2000256a:	2f00      	cmp	r7, #0
2000256c:	d143      	bne.n	200025f6 <_malloc_r+0xd6>
2000256e:	2c00      	cmp	r4, #0
20002570:	d04b      	beq.n	2000260a <_malloc_r+0xea>
20002572:	6823      	ldr	r3, [r4, #0]
20002574:	4639      	mov	r1, r7
20002576:	4630      	mov	r0, r6
20002578:	eb04 0903 	add.w	r9, r4, r3
2000257c:	f000 face 	bl	20002b1c <_sbrk_r>
20002580:	4581      	cmp	r9, r0
20002582:	d142      	bne.n	2000260a <_malloc_r+0xea>
20002584:	6821      	ldr	r1, [r4, #0]
20002586:	1a6d      	subs	r5, r5, r1
20002588:	4629      	mov	r1, r5
2000258a:	4630      	mov	r0, r6
2000258c:	f7ff ffa6 	bl	200024dc <sbrk_aligned>
20002590:	3001      	adds	r0, #1
20002592:	d03a      	beq.n	2000260a <_malloc_r+0xea>
20002594:	6823      	ldr	r3, [r4, #0]
20002596:	442b      	add	r3, r5
20002598:	6023      	str	r3, [r4, #0]
2000259a:	f8d8 3000 	ldr.w	r3, [r8]
2000259e:	685a      	ldr	r2, [r3, #4]
200025a0:	bb62      	cbnz	r2, 200025fc <_malloc_r+0xdc>
200025a2:	f8c8 7000 	str.w	r7, [r8]
200025a6:	e00f      	b.n	200025c8 <_malloc_r+0xa8>
200025a8:	6822      	ldr	r2, [r4, #0]
200025aa:	1b52      	subs	r2, r2, r5
200025ac:	d420      	bmi.n	200025f0 <_malloc_r+0xd0>
200025ae:	2a0b      	cmp	r2, #11
200025b0:	d917      	bls.n	200025e2 <_malloc_r+0xc2>
200025b2:	1961      	adds	r1, r4, r5
200025b4:	42a3      	cmp	r3, r4
200025b6:	6025      	str	r5, [r4, #0]
200025b8:	bf18      	it	ne
200025ba:	6059      	strne	r1, [r3, #4]
200025bc:	6863      	ldr	r3, [r4, #4]
200025be:	bf08      	it	eq
200025c0:	f8c8 1000 	streq.w	r1, [r8]
200025c4:	5162      	str	r2, [r4, r5]
200025c6:	604b      	str	r3, [r1, #4]
200025c8:	4630      	mov	r0, r6
200025ca:	f000 f82f 	bl	2000262c <__malloc_unlock>
200025ce:	f104 000b 	add.w	r0, r4, #11
200025d2:	1d23      	adds	r3, r4, #4
200025d4:	f020 0007 	bic.w	r0, r0, #7
200025d8:	1ac2      	subs	r2, r0, r3
200025da:	bf1c      	itt	ne
200025dc:	1a1b      	subne	r3, r3, r0
200025de:	50a3      	strne	r3, [r4, r2]
200025e0:	e7af      	b.n	20002542 <_malloc_r+0x22>
200025e2:	6862      	ldr	r2, [r4, #4]
200025e4:	42a3      	cmp	r3, r4
200025e6:	bf0c      	ite	eq
200025e8:	f8c8 2000 	streq.w	r2, [r8]
200025ec:	605a      	strne	r2, [r3, #4]
200025ee:	e7eb      	b.n	200025c8 <_malloc_r+0xa8>
200025f0:	4623      	mov	r3, r4
200025f2:	6864      	ldr	r4, [r4, #4]
200025f4:	e7ae      	b.n	20002554 <_malloc_r+0x34>
200025f6:	463c      	mov	r4, r7
200025f8:	687f      	ldr	r7, [r7, #4]
200025fa:	e7b6      	b.n	2000256a <_malloc_r+0x4a>
200025fc:	461a      	mov	r2, r3
200025fe:	685b      	ldr	r3, [r3, #4]
20002600:	42a3      	cmp	r3, r4
20002602:	d1fb      	bne.n	200025fc <_malloc_r+0xdc>
20002604:	2300      	movs	r3, #0
20002606:	6053      	str	r3, [r2, #4]
20002608:	e7de      	b.n	200025c8 <_malloc_r+0xa8>
2000260a:	230c      	movs	r3, #12
2000260c:	6033      	str	r3, [r6, #0]
2000260e:	4630      	mov	r0, r6
20002610:	f000 f80c 	bl	2000262c <__malloc_unlock>
20002614:	e794      	b.n	20002540 <_malloc_r+0x20>
20002616:	6005      	str	r5, [r0, #0]
20002618:	e7d6      	b.n	200025c8 <_malloc_r+0xa8>
2000261a:	bf00      	nop
2000261c:	2000387c 	.word	0x2000387c

20002620 <__malloc_lock>:
20002620:	4801      	ldr	r0, [pc, #4]	@ (20002628 <__malloc_lock+0x8>)
20002622:	f000 baa4 	b.w	20002b6e <__retarget_lock_acquire_recursive>
20002626:	bf00      	nop
20002628:	200039c0 	.word	0x200039c0

2000262c <__malloc_unlock>:
2000262c:	4801      	ldr	r0, [pc, #4]	@ (20002634 <__malloc_unlock+0x8>)
2000262e:	f000 ba9f 	b.w	20002b70 <__retarget_lock_release_recursive>
20002632:	bf00      	nop
20002634:	200039c0 	.word	0x200039c0

20002638 <rand>:
20002638:	4b16      	ldr	r3, [pc, #88]	@ (20002694 <rand+0x5c>)
2000263a:	b510      	push	{r4, lr}
2000263c:	681c      	ldr	r4, [r3, #0]
2000263e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
20002640:	b9b3      	cbnz	r3, 20002670 <rand+0x38>
20002642:	2018      	movs	r0, #24
20002644:	f000 fafe 	bl	20002c44 <malloc>
20002648:	4602      	mov	r2, r0
2000264a:	6320      	str	r0, [r4, #48]	@ 0x30
2000264c:	b920      	cbnz	r0, 20002658 <rand+0x20>
2000264e:	4b12      	ldr	r3, [pc, #72]	@ (20002698 <rand+0x60>)
20002650:	4812      	ldr	r0, [pc, #72]	@ (2000269c <rand+0x64>)
20002652:	2152      	movs	r1, #82	@ 0x52
20002654:	f000 fa8e 	bl	20002b74 <__assert_func>
20002658:	4911      	ldr	r1, [pc, #68]	@ (200026a0 <rand+0x68>)
2000265a:	4b12      	ldr	r3, [pc, #72]	@ (200026a4 <rand+0x6c>)
2000265c:	e9c0 1300 	strd	r1, r3, [r0]
20002660:	4b11      	ldr	r3, [pc, #68]	@ (200026a8 <rand+0x70>)
20002662:	6083      	str	r3, [r0, #8]
20002664:	230b      	movs	r3, #11
20002666:	8183      	strh	r3, [r0, #12]
20002668:	2100      	movs	r1, #0
2000266a:	2001      	movs	r0, #1
2000266c:	e9c2 0104 	strd	r0, r1, [r2, #16]
20002670:	6b21      	ldr	r1, [r4, #48]	@ 0x30
20002672:	480e      	ldr	r0, [pc, #56]	@ (200026ac <rand+0x74>)
20002674:	690b      	ldr	r3, [r1, #16]
20002676:	694c      	ldr	r4, [r1, #20]
20002678:	4a0d      	ldr	r2, [pc, #52]	@ (200026b0 <rand+0x78>)
2000267a:	4358      	muls	r0, r3
2000267c:	fb02 0004 	mla	r0, r2, r4, r0
20002680:	fba3 3202 	umull	r3, r2, r3, r2
20002684:	3301      	adds	r3, #1
20002686:	eb40 0002 	adc.w	r0, r0, r2
2000268a:	e9c1 3004 	strd	r3, r0, [r1, #16]
2000268e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
20002692:	bd10      	pop	{r4, pc}
20002694:	20003664 	.word	0x20003664
20002698:	2000355c 	.word	0x2000355c
2000269c:	20003573 	.word	0x20003573
200026a0:	abcd330e 	.word	0xabcd330e
200026a4:	e66d1234 	.word	0xe66d1234
200026a8:	0005deec 	.word	0x0005deec
200026ac:	5851f42d 	.word	0x5851f42d
200026b0:	4c957f2d 	.word	0x4c957f2d

200026b4 <std>:
200026b4:	2300      	movs	r3, #0
200026b6:	b510      	push	{r4, lr}
200026b8:	4604      	mov	r4, r0
200026ba:	e9c0 3300 	strd	r3, r3, [r0]
200026be:	e9c0 3304 	strd	r3, r3, [r0, #16]
200026c2:	6083      	str	r3, [r0, #8]
200026c4:	8181      	strh	r1, [r0, #12]
200026c6:	6643      	str	r3, [r0, #100]	@ 0x64
200026c8:	81c2      	strh	r2, [r0, #14]
200026ca:	6183      	str	r3, [r0, #24]
200026cc:	4619      	mov	r1, r3
200026ce:	2208      	movs	r2, #8
200026d0:	305c      	adds	r0, #92	@ 0x5c
200026d2:	f000 f9e7 	bl	20002aa4 <memset>
200026d6:	4b0d      	ldr	r3, [pc, #52]	@ (2000270c <std+0x58>)
200026d8:	6263      	str	r3, [r4, #36]	@ 0x24
200026da:	4b0d      	ldr	r3, [pc, #52]	@ (20002710 <std+0x5c>)
200026dc:	62a3      	str	r3, [r4, #40]	@ 0x28
200026de:	4b0d      	ldr	r3, [pc, #52]	@ (20002714 <std+0x60>)
200026e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
200026e2:	4b0d      	ldr	r3, [pc, #52]	@ (20002718 <std+0x64>)
200026e4:	6323      	str	r3, [r4, #48]	@ 0x30
200026e6:	4b0d      	ldr	r3, [pc, #52]	@ (2000271c <std+0x68>)
200026e8:	6224      	str	r4, [r4, #32]
200026ea:	429c      	cmp	r4, r3
200026ec:	d006      	beq.n	200026fc <std+0x48>
200026ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
200026f2:	4294      	cmp	r4, r2
200026f4:	d002      	beq.n	200026fc <std+0x48>
200026f6:	33d0      	adds	r3, #208	@ 0xd0
200026f8:	429c      	cmp	r4, r3
200026fa:	d105      	bne.n	20002708 <std+0x54>
200026fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
20002700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20002704:	f000 ba32 	b.w	20002b6c <__retarget_lock_init_recursive>
20002708:	bd10      	pop	{r4, pc}
2000270a:	bf00      	nop
2000270c:	200028f5 	.word	0x200028f5
20002710:	20002917 	.word	0x20002917
20002714:	2000294f 	.word	0x2000294f
20002718:	20002973 	.word	0x20002973
2000271c:	20003880 	.word	0x20003880

20002720 <stdio_exit_handler>:
20002720:	4a02      	ldr	r2, [pc, #8]	@ (2000272c <stdio_exit_handler+0xc>)
20002722:	4903      	ldr	r1, [pc, #12]	@ (20002730 <stdio_exit_handler+0x10>)
20002724:	4803      	ldr	r0, [pc, #12]	@ (20002734 <stdio_exit_handler+0x14>)
20002726:	f000 b869 	b.w	200027fc <_fwalk_sglue>
2000272a:	bf00      	nop
2000272c:	20003658 	.word	0x20003658
20002730:	20002d5d 	.word	0x20002d5d
20002734:	20003668 	.word	0x20003668

20002738 <cleanup_stdio>:
20002738:	6841      	ldr	r1, [r0, #4]
2000273a:	4b0c      	ldr	r3, [pc, #48]	@ (2000276c <cleanup_stdio+0x34>)
2000273c:	4299      	cmp	r1, r3
2000273e:	b510      	push	{r4, lr}
20002740:	4604      	mov	r4, r0
20002742:	d001      	beq.n	20002748 <cleanup_stdio+0x10>
20002744:	f000 fb0a 	bl	20002d5c <_fflush_r>
20002748:	68a1      	ldr	r1, [r4, #8]
2000274a:	4b09      	ldr	r3, [pc, #36]	@ (20002770 <cleanup_stdio+0x38>)
2000274c:	4299      	cmp	r1, r3
2000274e:	d002      	beq.n	20002756 <cleanup_stdio+0x1e>
20002750:	4620      	mov	r0, r4
20002752:	f000 fb03 	bl	20002d5c <_fflush_r>
20002756:	68e1      	ldr	r1, [r4, #12]
20002758:	4b06      	ldr	r3, [pc, #24]	@ (20002774 <cleanup_stdio+0x3c>)
2000275a:	4299      	cmp	r1, r3
2000275c:	d004      	beq.n	20002768 <cleanup_stdio+0x30>
2000275e:	4620      	mov	r0, r4
20002760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20002764:	f000 bafa 	b.w	20002d5c <_fflush_r>
20002768:	bd10      	pop	{r4, pc}
2000276a:	bf00      	nop
2000276c:	20003880 	.word	0x20003880
20002770:	200038e8 	.word	0x200038e8
20002774:	20003950 	.word	0x20003950

20002778 <global_stdio_init.part.0>:
20002778:	b510      	push	{r4, lr}
2000277a:	4b0b      	ldr	r3, [pc, #44]	@ (200027a8 <global_stdio_init.part.0+0x30>)
2000277c:	4c0b      	ldr	r4, [pc, #44]	@ (200027ac <global_stdio_init.part.0+0x34>)
2000277e:	4a0c      	ldr	r2, [pc, #48]	@ (200027b0 <global_stdio_init.part.0+0x38>)
20002780:	601a      	str	r2, [r3, #0]
20002782:	4620      	mov	r0, r4
20002784:	2200      	movs	r2, #0
20002786:	2104      	movs	r1, #4
20002788:	f7ff ff94 	bl	200026b4 <std>
2000278c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
20002790:	2201      	movs	r2, #1
20002792:	2109      	movs	r1, #9
20002794:	f7ff ff8e 	bl	200026b4 <std>
20002798:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
2000279c:	2202      	movs	r2, #2
2000279e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
200027a2:	2112      	movs	r1, #18
200027a4:	f7ff bf86 	b.w	200026b4 <std>
200027a8:	200039b8 	.word	0x200039b8
200027ac:	20003880 	.word	0x20003880
200027b0:	20002721 	.word	0x20002721

200027b4 <__sfp_lock_acquire>:
200027b4:	4801      	ldr	r0, [pc, #4]	@ (200027bc <__sfp_lock_acquire+0x8>)
200027b6:	f000 b9da 	b.w	20002b6e <__retarget_lock_acquire_recursive>
200027ba:	bf00      	nop
200027bc:	200039c1 	.word	0x200039c1

200027c0 <__sfp_lock_release>:
200027c0:	4801      	ldr	r0, [pc, #4]	@ (200027c8 <__sfp_lock_release+0x8>)
200027c2:	f000 b9d5 	b.w	20002b70 <__retarget_lock_release_recursive>
200027c6:	bf00      	nop
200027c8:	200039c1 	.word	0x200039c1

200027cc <__sinit>:
200027cc:	b510      	push	{r4, lr}
200027ce:	4604      	mov	r4, r0
200027d0:	f7ff fff0 	bl	200027b4 <__sfp_lock_acquire>
200027d4:	6a23      	ldr	r3, [r4, #32]
200027d6:	b11b      	cbz	r3, 200027e0 <__sinit+0x14>
200027d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
200027dc:	f7ff bff0 	b.w	200027c0 <__sfp_lock_release>
200027e0:	4b04      	ldr	r3, [pc, #16]	@ (200027f4 <__sinit+0x28>)
200027e2:	6223      	str	r3, [r4, #32]
200027e4:	4b04      	ldr	r3, [pc, #16]	@ (200027f8 <__sinit+0x2c>)
200027e6:	681b      	ldr	r3, [r3, #0]
200027e8:	2b00      	cmp	r3, #0
200027ea:	d1f5      	bne.n	200027d8 <__sinit+0xc>
200027ec:	f7ff ffc4 	bl	20002778 <global_stdio_init.part.0>
200027f0:	e7f2      	b.n	200027d8 <__sinit+0xc>
200027f2:	bf00      	nop
200027f4:	20002739 	.word	0x20002739
200027f8:	200039b8 	.word	0x200039b8

200027fc <_fwalk_sglue>:
200027fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
20002800:	4607      	mov	r7, r0
20002802:	4688      	mov	r8, r1
20002804:	4614      	mov	r4, r2
20002806:	2600      	movs	r6, #0
20002808:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
2000280c:	f1b9 0901 	subs.w	r9, r9, #1
20002810:	d505      	bpl.n	2000281e <_fwalk_sglue+0x22>
20002812:	6824      	ldr	r4, [r4, #0]
20002814:	2c00      	cmp	r4, #0
20002816:	d1f7      	bne.n	20002808 <_fwalk_sglue+0xc>
20002818:	4630      	mov	r0, r6
2000281a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000281e:	89ab      	ldrh	r3, [r5, #12]
20002820:	2b01      	cmp	r3, #1
20002822:	d907      	bls.n	20002834 <_fwalk_sglue+0x38>
20002824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
20002828:	3301      	adds	r3, #1
2000282a:	d003      	beq.n	20002834 <_fwalk_sglue+0x38>
2000282c:	4629      	mov	r1, r5
2000282e:	4638      	mov	r0, r7
20002830:	47c0      	blx	r8
20002832:	4306      	orrs	r6, r0
20002834:	3568      	adds	r5, #104	@ 0x68
20002836:	e7e9      	b.n	2000280c <_fwalk_sglue+0x10>

20002838 <_puts_r>:
20002838:	6a03      	ldr	r3, [r0, #32]
2000283a:	b570      	push	{r4, r5, r6, lr}
2000283c:	6884      	ldr	r4, [r0, #8]
2000283e:	4605      	mov	r5, r0
20002840:	460e      	mov	r6, r1
20002842:	b90b      	cbnz	r3, 20002848 <_puts_r+0x10>
20002844:	f7ff ffc2 	bl	200027cc <__sinit>
20002848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
2000284a:	07db      	lsls	r3, r3, #31
2000284c:	d405      	bmi.n	2000285a <_puts_r+0x22>
2000284e:	89a3      	ldrh	r3, [r4, #12]
20002850:	0598      	lsls	r0, r3, #22
20002852:	d402      	bmi.n	2000285a <_puts_r+0x22>
20002854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
20002856:	f000 f98a 	bl	20002b6e <__retarget_lock_acquire_recursive>
2000285a:	89a3      	ldrh	r3, [r4, #12]
2000285c:	0719      	lsls	r1, r3, #28
2000285e:	d502      	bpl.n	20002866 <_puts_r+0x2e>
20002860:	6923      	ldr	r3, [r4, #16]
20002862:	2b00      	cmp	r3, #0
20002864:	d135      	bne.n	200028d2 <_puts_r+0x9a>
20002866:	4621      	mov	r1, r4
20002868:	4628      	mov	r0, r5
2000286a:	f000 f8c5 	bl	200029f8 <__swsetup_r>
2000286e:	b380      	cbz	r0, 200028d2 <_puts_r+0x9a>
20002870:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
20002874:	6e63      	ldr	r3, [r4, #100]	@ 0x64
20002876:	07da      	lsls	r2, r3, #31
20002878:	d405      	bmi.n	20002886 <_puts_r+0x4e>
2000287a:	89a3      	ldrh	r3, [r4, #12]
2000287c:	059b      	lsls	r3, r3, #22
2000287e:	d402      	bmi.n	20002886 <_puts_r+0x4e>
20002880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
20002882:	f000 f975 	bl	20002b70 <__retarget_lock_release_recursive>
20002886:	4628      	mov	r0, r5
20002888:	bd70      	pop	{r4, r5, r6, pc}
2000288a:	2b00      	cmp	r3, #0
2000288c:	da04      	bge.n	20002898 <_puts_r+0x60>
2000288e:	69a2      	ldr	r2, [r4, #24]
20002890:	429a      	cmp	r2, r3
20002892:	dc17      	bgt.n	200028c4 <_puts_r+0x8c>
20002894:	290a      	cmp	r1, #10
20002896:	d015      	beq.n	200028c4 <_puts_r+0x8c>
20002898:	6823      	ldr	r3, [r4, #0]
2000289a:	1c5a      	adds	r2, r3, #1
2000289c:	6022      	str	r2, [r4, #0]
2000289e:	7019      	strb	r1, [r3, #0]
200028a0:	68a3      	ldr	r3, [r4, #8]
200028a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
200028a6:	3b01      	subs	r3, #1
200028a8:	60a3      	str	r3, [r4, #8]
200028aa:	2900      	cmp	r1, #0
200028ac:	d1ed      	bne.n	2000288a <_puts_r+0x52>
200028ae:	2b00      	cmp	r3, #0
200028b0:	da11      	bge.n	200028d6 <_puts_r+0x9e>
200028b2:	4622      	mov	r2, r4
200028b4:	210a      	movs	r1, #10
200028b6:	4628      	mov	r0, r5
200028b8:	f000 f85f 	bl	2000297a <__swbuf_r>
200028bc:	3001      	adds	r0, #1
200028be:	d0d7      	beq.n	20002870 <_puts_r+0x38>
200028c0:	250a      	movs	r5, #10
200028c2:	e7d7      	b.n	20002874 <_puts_r+0x3c>
200028c4:	4622      	mov	r2, r4
200028c6:	4628      	mov	r0, r5
200028c8:	f000 f857 	bl	2000297a <__swbuf_r>
200028cc:	3001      	adds	r0, #1
200028ce:	d1e7      	bne.n	200028a0 <_puts_r+0x68>
200028d0:	e7ce      	b.n	20002870 <_puts_r+0x38>
200028d2:	3e01      	subs	r6, #1
200028d4:	e7e4      	b.n	200028a0 <_puts_r+0x68>
200028d6:	6823      	ldr	r3, [r4, #0]
200028d8:	1c5a      	adds	r2, r3, #1
200028da:	6022      	str	r2, [r4, #0]
200028dc:	220a      	movs	r2, #10
200028de:	701a      	strb	r2, [r3, #0]
200028e0:	e7ee      	b.n	200028c0 <_puts_r+0x88>
	...

200028e4 <puts>:
200028e4:	4b02      	ldr	r3, [pc, #8]	@ (200028f0 <puts+0xc>)
200028e6:	4601      	mov	r1, r0
200028e8:	6818      	ldr	r0, [r3, #0]
200028ea:	f7ff bfa5 	b.w	20002838 <_puts_r>
200028ee:	bf00      	nop
200028f0:	20003664 	.word	0x20003664

200028f4 <__sread>:
200028f4:	b510      	push	{r4, lr}
200028f6:	460c      	mov	r4, r1
200028f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
200028fc:	f000 f8fc 	bl	20002af8 <_read_r>
20002900:	2800      	cmp	r0, #0
20002902:	bfab      	itete	ge
20002904:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
20002906:	89a3      	ldrhlt	r3, [r4, #12]
20002908:	181b      	addge	r3, r3, r0
2000290a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
2000290e:	bfac      	ite	ge
20002910:	6563      	strge	r3, [r4, #84]	@ 0x54
20002912:	81a3      	strhlt	r3, [r4, #12]
20002914:	bd10      	pop	{r4, pc}

20002916 <__swrite>:
20002916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000291a:	461f      	mov	r7, r3
2000291c:	898b      	ldrh	r3, [r1, #12]
2000291e:	05db      	lsls	r3, r3, #23
20002920:	4605      	mov	r5, r0
20002922:	460c      	mov	r4, r1
20002924:	4616      	mov	r6, r2
20002926:	d505      	bpl.n	20002934 <__swrite+0x1e>
20002928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2000292c:	2302      	movs	r3, #2
2000292e:	2200      	movs	r2, #0
20002930:	f000 f8d0 	bl	20002ad4 <_lseek_r>
20002934:	89a3      	ldrh	r3, [r4, #12]
20002936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
2000293a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
2000293e:	81a3      	strh	r3, [r4, #12]
20002940:	4632      	mov	r2, r6
20002942:	463b      	mov	r3, r7
20002944:	4628      	mov	r0, r5
20002946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2000294a:	f000 b8f7 	b.w	20002b3c <_write_r>

2000294e <__sseek>:
2000294e:	b510      	push	{r4, lr}
20002950:	460c      	mov	r4, r1
20002952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002956:	f000 f8bd 	bl	20002ad4 <_lseek_r>
2000295a:	1c43      	adds	r3, r0, #1
2000295c:	89a3      	ldrh	r3, [r4, #12]
2000295e:	bf15      	itete	ne
20002960:	6560      	strne	r0, [r4, #84]	@ 0x54
20002962:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
20002966:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
2000296a:	81a3      	strheq	r3, [r4, #12]
2000296c:	bf18      	it	ne
2000296e:	81a3      	strhne	r3, [r4, #12]
20002970:	bd10      	pop	{r4, pc}

20002972 <__sclose>:
20002972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002976:	f000 b89d 	b.w	20002ab4 <_close_r>

2000297a <__swbuf_r>:
2000297a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000297c:	460e      	mov	r6, r1
2000297e:	4614      	mov	r4, r2
20002980:	4605      	mov	r5, r0
20002982:	b118      	cbz	r0, 2000298c <__swbuf_r+0x12>
20002984:	6a03      	ldr	r3, [r0, #32]
20002986:	b90b      	cbnz	r3, 2000298c <__swbuf_r+0x12>
20002988:	f7ff ff20 	bl	200027cc <__sinit>
2000298c:	69a3      	ldr	r3, [r4, #24]
2000298e:	60a3      	str	r3, [r4, #8]
20002990:	89a3      	ldrh	r3, [r4, #12]
20002992:	071a      	lsls	r2, r3, #28
20002994:	d501      	bpl.n	2000299a <__swbuf_r+0x20>
20002996:	6923      	ldr	r3, [r4, #16]
20002998:	b943      	cbnz	r3, 200029ac <__swbuf_r+0x32>
2000299a:	4621      	mov	r1, r4
2000299c:	4628      	mov	r0, r5
2000299e:	f000 f82b 	bl	200029f8 <__swsetup_r>
200029a2:	b118      	cbz	r0, 200029ac <__swbuf_r+0x32>
200029a4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
200029a8:	4638      	mov	r0, r7
200029aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200029ac:	6823      	ldr	r3, [r4, #0]
200029ae:	6922      	ldr	r2, [r4, #16]
200029b0:	1a98      	subs	r0, r3, r2
200029b2:	6963      	ldr	r3, [r4, #20]
200029b4:	b2f6      	uxtb	r6, r6
200029b6:	4283      	cmp	r3, r0
200029b8:	4637      	mov	r7, r6
200029ba:	dc05      	bgt.n	200029c8 <__swbuf_r+0x4e>
200029bc:	4621      	mov	r1, r4
200029be:	4628      	mov	r0, r5
200029c0:	f000 f9cc 	bl	20002d5c <_fflush_r>
200029c4:	2800      	cmp	r0, #0
200029c6:	d1ed      	bne.n	200029a4 <__swbuf_r+0x2a>
200029c8:	68a3      	ldr	r3, [r4, #8]
200029ca:	3b01      	subs	r3, #1
200029cc:	60a3      	str	r3, [r4, #8]
200029ce:	6823      	ldr	r3, [r4, #0]
200029d0:	1c5a      	adds	r2, r3, #1
200029d2:	6022      	str	r2, [r4, #0]
200029d4:	701e      	strb	r6, [r3, #0]
200029d6:	6962      	ldr	r2, [r4, #20]
200029d8:	1c43      	adds	r3, r0, #1
200029da:	429a      	cmp	r2, r3
200029dc:	d004      	beq.n	200029e8 <__swbuf_r+0x6e>
200029de:	89a3      	ldrh	r3, [r4, #12]
200029e0:	07db      	lsls	r3, r3, #31
200029e2:	d5e1      	bpl.n	200029a8 <__swbuf_r+0x2e>
200029e4:	2e0a      	cmp	r6, #10
200029e6:	d1df      	bne.n	200029a8 <__swbuf_r+0x2e>
200029e8:	4621      	mov	r1, r4
200029ea:	4628      	mov	r0, r5
200029ec:	f000 f9b6 	bl	20002d5c <_fflush_r>
200029f0:	2800      	cmp	r0, #0
200029f2:	d0d9      	beq.n	200029a8 <__swbuf_r+0x2e>
200029f4:	e7d6      	b.n	200029a4 <__swbuf_r+0x2a>
	...

200029f8 <__swsetup_r>:
200029f8:	b538      	push	{r3, r4, r5, lr}
200029fa:	4b29      	ldr	r3, [pc, #164]	@ (20002aa0 <__swsetup_r+0xa8>)
200029fc:	4605      	mov	r5, r0
200029fe:	6818      	ldr	r0, [r3, #0]
20002a00:	460c      	mov	r4, r1
20002a02:	b118      	cbz	r0, 20002a0c <__swsetup_r+0x14>
20002a04:	6a03      	ldr	r3, [r0, #32]
20002a06:	b90b      	cbnz	r3, 20002a0c <__swsetup_r+0x14>
20002a08:	f7ff fee0 	bl	200027cc <__sinit>
20002a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002a10:	0719      	lsls	r1, r3, #28
20002a12:	d422      	bmi.n	20002a5a <__swsetup_r+0x62>
20002a14:	06da      	lsls	r2, r3, #27
20002a16:	d407      	bmi.n	20002a28 <__swsetup_r+0x30>
20002a18:	2209      	movs	r2, #9
20002a1a:	602a      	str	r2, [r5, #0]
20002a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20002a20:	81a3      	strh	r3, [r4, #12]
20002a22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20002a26:	e033      	b.n	20002a90 <__swsetup_r+0x98>
20002a28:	0758      	lsls	r0, r3, #29
20002a2a:	d512      	bpl.n	20002a52 <__swsetup_r+0x5a>
20002a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
20002a2e:	b141      	cbz	r1, 20002a42 <__swsetup_r+0x4a>
20002a30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
20002a34:	4299      	cmp	r1, r3
20002a36:	d002      	beq.n	20002a3e <__swsetup_r+0x46>
20002a38:	4628      	mov	r0, r5
20002a3a:	f000 f8b9 	bl	20002bb0 <_free_r>
20002a3e:	2300      	movs	r3, #0
20002a40:	6363      	str	r3, [r4, #52]	@ 0x34
20002a42:	89a3      	ldrh	r3, [r4, #12]
20002a44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
20002a48:	81a3      	strh	r3, [r4, #12]
20002a4a:	2300      	movs	r3, #0
20002a4c:	6063      	str	r3, [r4, #4]
20002a4e:	6923      	ldr	r3, [r4, #16]
20002a50:	6023      	str	r3, [r4, #0]
20002a52:	89a3      	ldrh	r3, [r4, #12]
20002a54:	f043 0308 	orr.w	r3, r3, #8
20002a58:	81a3      	strh	r3, [r4, #12]
20002a5a:	6923      	ldr	r3, [r4, #16]
20002a5c:	b94b      	cbnz	r3, 20002a72 <__swsetup_r+0x7a>
20002a5e:	89a3      	ldrh	r3, [r4, #12]
20002a60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
20002a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
20002a68:	d003      	beq.n	20002a72 <__swsetup_r+0x7a>
20002a6a:	4621      	mov	r1, r4
20002a6c:	4628      	mov	r0, r5
20002a6e:	f000 f9d5 	bl	20002e1c <__smakebuf_r>
20002a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002a76:	f013 0201 	ands.w	r2, r3, #1
20002a7a:	d00a      	beq.n	20002a92 <__swsetup_r+0x9a>
20002a7c:	2200      	movs	r2, #0
20002a7e:	60a2      	str	r2, [r4, #8]
20002a80:	6962      	ldr	r2, [r4, #20]
20002a82:	4252      	negs	r2, r2
20002a84:	61a2      	str	r2, [r4, #24]
20002a86:	6922      	ldr	r2, [r4, #16]
20002a88:	b942      	cbnz	r2, 20002a9c <__swsetup_r+0xa4>
20002a8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
20002a8e:	d1c5      	bne.n	20002a1c <__swsetup_r+0x24>
20002a90:	bd38      	pop	{r3, r4, r5, pc}
20002a92:	0799      	lsls	r1, r3, #30
20002a94:	bf58      	it	pl
20002a96:	6962      	ldrpl	r2, [r4, #20]
20002a98:	60a2      	str	r2, [r4, #8]
20002a9a:	e7f4      	b.n	20002a86 <__swsetup_r+0x8e>
20002a9c:	2000      	movs	r0, #0
20002a9e:	e7f7      	b.n	20002a90 <__swsetup_r+0x98>
20002aa0:	20003664 	.word	0x20003664

20002aa4 <memset>:
20002aa4:	4402      	add	r2, r0
20002aa6:	4603      	mov	r3, r0
20002aa8:	4293      	cmp	r3, r2
20002aaa:	d100      	bne.n	20002aae <memset+0xa>
20002aac:	4770      	bx	lr
20002aae:	f803 1b01 	strb.w	r1, [r3], #1
20002ab2:	e7f9      	b.n	20002aa8 <memset+0x4>

20002ab4 <_close_r>:
20002ab4:	b538      	push	{r3, r4, r5, lr}
20002ab6:	4d06      	ldr	r5, [pc, #24]	@ (20002ad0 <_close_r+0x1c>)
20002ab8:	2300      	movs	r3, #0
20002aba:	4604      	mov	r4, r0
20002abc:	4608      	mov	r0, r1
20002abe:	602b      	str	r3, [r5, #0]
20002ac0:	f7fe fdaf 	bl	20001622 <_close>
20002ac4:	1c43      	adds	r3, r0, #1
20002ac6:	d102      	bne.n	20002ace <_close_r+0x1a>
20002ac8:	682b      	ldr	r3, [r5, #0]
20002aca:	b103      	cbz	r3, 20002ace <_close_r+0x1a>
20002acc:	6023      	str	r3, [r4, #0]
20002ace:	bd38      	pop	{r3, r4, r5, pc}
20002ad0:	200039bc 	.word	0x200039bc

20002ad4 <_lseek_r>:
20002ad4:	b538      	push	{r3, r4, r5, lr}
20002ad6:	4d07      	ldr	r5, [pc, #28]	@ (20002af4 <_lseek_r+0x20>)
20002ad8:	4604      	mov	r4, r0
20002ada:	4608      	mov	r0, r1
20002adc:	4611      	mov	r1, r2
20002ade:	2200      	movs	r2, #0
20002ae0:	602a      	str	r2, [r5, #0]
20002ae2:	461a      	mov	r2, r3
20002ae4:	f7fe fdc4 	bl	20001670 <_lseek>
20002ae8:	1c43      	adds	r3, r0, #1
20002aea:	d102      	bne.n	20002af2 <_lseek_r+0x1e>
20002aec:	682b      	ldr	r3, [r5, #0]
20002aee:	b103      	cbz	r3, 20002af2 <_lseek_r+0x1e>
20002af0:	6023      	str	r3, [r4, #0]
20002af2:	bd38      	pop	{r3, r4, r5, pc}
20002af4:	200039bc 	.word	0x200039bc

20002af8 <_read_r>:
20002af8:	b538      	push	{r3, r4, r5, lr}
20002afa:	4d07      	ldr	r5, [pc, #28]	@ (20002b18 <_read_r+0x20>)
20002afc:	4604      	mov	r4, r0
20002afe:	4608      	mov	r0, r1
20002b00:	4611      	mov	r1, r2
20002b02:	2200      	movs	r2, #0
20002b04:	602a      	str	r2, [r5, #0]
20002b06:	461a      	mov	r2, r3
20002b08:	f7fe fd52 	bl	200015b0 <_read>
20002b0c:	1c43      	adds	r3, r0, #1
20002b0e:	d102      	bne.n	20002b16 <_read_r+0x1e>
20002b10:	682b      	ldr	r3, [r5, #0]
20002b12:	b103      	cbz	r3, 20002b16 <_read_r+0x1e>
20002b14:	6023      	str	r3, [r4, #0]
20002b16:	bd38      	pop	{r3, r4, r5, pc}
20002b18:	200039bc 	.word	0x200039bc

20002b1c <_sbrk_r>:
20002b1c:	b538      	push	{r3, r4, r5, lr}
20002b1e:	4d06      	ldr	r5, [pc, #24]	@ (20002b38 <_sbrk_r+0x1c>)
20002b20:	2300      	movs	r3, #0
20002b22:	4604      	mov	r4, r0
20002b24:	4608      	mov	r0, r1
20002b26:	602b      	str	r3, [r5, #0]
20002b28:	f7fe fdb0 	bl	2000168c <_sbrk>
20002b2c:	1c43      	adds	r3, r0, #1
20002b2e:	d102      	bne.n	20002b36 <_sbrk_r+0x1a>
20002b30:	682b      	ldr	r3, [r5, #0]
20002b32:	b103      	cbz	r3, 20002b36 <_sbrk_r+0x1a>
20002b34:	6023      	str	r3, [r4, #0]
20002b36:	bd38      	pop	{r3, r4, r5, pc}
20002b38:	200039bc 	.word	0x200039bc

20002b3c <_write_r>:
20002b3c:	b538      	push	{r3, r4, r5, lr}
20002b3e:	4d07      	ldr	r5, [pc, #28]	@ (20002b5c <_write_r+0x20>)
20002b40:	4604      	mov	r4, r0
20002b42:	4608      	mov	r0, r1
20002b44:	4611      	mov	r1, r2
20002b46:	2200      	movs	r2, #0
20002b48:	602a      	str	r2, [r5, #0]
20002b4a:	461a      	mov	r2, r3
20002b4c:	f7fe fd4d 	bl	200015ea <_write>
20002b50:	1c43      	adds	r3, r0, #1
20002b52:	d102      	bne.n	20002b5a <_write_r+0x1e>
20002b54:	682b      	ldr	r3, [r5, #0]
20002b56:	b103      	cbz	r3, 20002b5a <_write_r+0x1e>
20002b58:	6023      	str	r3, [r4, #0]
20002b5a:	bd38      	pop	{r3, r4, r5, pc}
20002b5c:	200039bc 	.word	0x200039bc

20002b60 <__errno>:
20002b60:	4b01      	ldr	r3, [pc, #4]	@ (20002b68 <__errno+0x8>)
20002b62:	6818      	ldr	r0, [r3, #0]
20002b64:	4770      	bx	lr
20002b66:	bf00      	nop
20002b68:	20003664 	.word	0x20003664

20002b6c <__retarget_lock_init_recursive>:
20002b6c:	4770      	bx	lr

20002b6e <__retarget_lock_acquire_recursive>:
20002b6e:	4770      	bx	lr

20002b70 <__retarget_lock_release_recursive>:
20002b70:	4770      	bx	lr
	...

20002b74 <__assert_func>:
20002b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
20002b76:	4614      	mov	r4, r2
20002b78:	461a      	mov	r2, r3
20002b7a:	4b09      	ldr	r3, [pc, #36]	@ (20002ba0 <__assert_func+0x2c>)
20002b7c:	681b      	ldr	r3, [r3, #0]
20002b7e:	4605      	mov	r5, r0
20002b80:	68d8      	ldr	r0, [r3, #12]
20002b82:	b954      	cbnz	r4, 20002b9a <__assert_func+0x26>
20002b84:	4b07      	ldr	r3, [pc, #28]	@ (20002ba4 <__assert_func+0x30>)
20002b86:	461c      	mov	r4, r3
20002b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
20002b8c:	9100      	str	r1, [sp, #0]
20002b8e:	462b      	mov	r3, r5
20002b90:	4905      	ldr	r1, [pc, #20]	@ (20002ba8 <__assert_func+0x34>)
20002b92:	f000 f90b 	bl	20002dac <fiprintf>
20002b96:	f000 f99f 	bl	20002ed8 <abort>
20002b9a:	4b04      	ldr	r3, [pc, #16]	@ (20002bac <__assert_func+0x38>)
20002b9c:	e7f4      	b.n	20002b88 <__assert_func+0x14>
20002b9e:	bf00      	nop
20002ba0:	20003664 	.word	0x20003664
20002ba4:	20003606 	.word	0x20003606
20002ba8:	200035d8 	.word	0x200035d8
20002bac:	200035cb 	.word	0x200035cb

20002bb0 <_free_r>:
20002bb0:	b538      	push	{r3, r4, r5, lr}
20002bb2:	4605      	mov	r5, r0
20002bb4:	2900      	cmp	r1, #0
20002bb6:	d041      	beq.n	20002c3c <_free_r+0x8c>
20002bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
20002bbc:	1f0c      	subs	r4, r1, #4
20002bbe:	2b00      	cmp	r3, #0
20002bc0:	bfb8      	it	lt
20002bc2:	18e4      	addlt	r4, r4, r3
20002bc4:	f7ff fd2c 	bl	20002620 <__malloc_lock>
20002bc8:	4a1d      	ldr	r2, [pc, #116]	@ (20002c40 <_free_r+0x90>)
20002bca:	6813      	ldr	r3, [r2, #0]
20002bcc:	b933      	cbnz	r3, 20002bdc <_free_r+0x2c>
20002bce:	6063      	str	r3, [r4, #4]
20002bd0:	6014      	str	r4, [r2, #0]
20002bd2:	4628      	mov	r0, r5
20002bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
20002bd8:	f7ff bd28 	b.w	2000262c <__malloc_unlock>
20002bdc:	42a3      	cmp	r3, r4
20002bde:	d908      	bls.n	20002bf2 <_free_r+0x42>
20002be0:	6820      	ldr	r0, [r4, #0]
20002be2:	1821      	adds	r1, r4, r0
20002be4:	428b      	cmp	r3, r1
20002be6:	bf01      	itttt	eq
20002be8:	6819      	ldreq	r1, [r3, #0]
20002bea:	685b      	ldreq	r3, [r3, #4]
20002bec:	1809      	addeq	r1, r1, r0
20002bee:	6021      	streq	r1, [r4, #0]
20002bf0:	e7ed      	b.n	20002bce <_free_r+0x1e>
20002bf2:	461a      	mov	r2, r3
20002bf4:	685b      	ldr	r3, [r3, #4]
20002bf6:	b10b      	cbz	r3, 20002bfc <_free_r+0x4c>
20002bf8:	42a3      	cmp	r3, r4
20002bfa:	d9fa      	bls.n	20002bf2 <_free_r+0x42>
20002bfc:	6811      	ldr	r1, [r2, #0]
20002bfe:	1850      	adds	r0, r2, r1
20002c00:	42a0      	cmp	r0, r4
20002c02:	d10b      	bne.n	20002c1c <_free_r+0x6c>
20002c04:	6820      	ldr	r0, [r4, #0]
20002c06:	4401      	add	r1, r0
20002c08:	1850      	adds	r0, r2, r1
20002c0a:	4283      	cmp	r3, r0
20002c0c:	6011      	str	r1, [r2, #0]
20002c0e:	d1e0      	bne.n	20002bd2 <_free_r+0x22>
20002c10:	6818      	ldr	r0, [r3, #0]
20002c12:	685b      	ldr	r3, [r3, #4]
20002c14:	6053      	str	r3, [r2, #4]
20002c16:	4408      	add	r0, r1
20002c18:	6010      	str	r0, [r2, #0]
20002c1a:	e7da      	b.n	20002bd2 <_free_r+0x22>
20002c1c:	d902      	bls.n	20002c24 <_free_r+0x74>
20002c1e:	230c      	movs	r3, #12
20002c20:	602b      	str	r3, [r5, #0]
20002c22:	e7d6      	b.n	20002bd2 <_free_r+0x22>
20002c24:	6820      	ldr	r0, [r4, #0]
20002c26:	1821      	adds	r1, r4, r0
20002c28:	428b      	cmp	r3, r1
20002c2a:	bf04      	itt	eq
20002c2c:	6819      	ldreq	r1, [r3, #0]
20002c2e:	685b      	ldreq	r3, [r3, #4]
20002c30:	6063      	str	r3, [r4, #4]
20002c32:	bf04      	itt	eq
20002c34:	1809      	addeq	r1, r1, r0
20002c36:	6021      	streq	r1, [r4, #0]
20002c38:	6054      	str	r4, [r2, #4]
20002c3a:	e7ca      	b.n	20002bd2 <_free_r+0x22>
20002c3c:	bd38      	pop	{r3, r4, r5, pc}
20002c3e:	bf00      	nop
20002c40:	2000387c 	.word	0x2000387c

20002c44 <malloc>:
20002c44:	4b02      	ldr	r3, [pc, #8]	@ (20002c50 <malloc+0xc>)
20002c46:	4601      	mov	r1, r0
20002c48:	6818      	ldr	r0, [r3, #0]
20002c4a:	f7ff bc69 	b.w	20002520 <_malloc_r>
20002c4e:	bf00      	nop
20002c50:	20003664 	.word	0x20003664

20002c54 <__sflush_r>:
20002c54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
20002c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20002c5c:	0716      	lsls	r6, r2, #28
20002c5e:	4605      	mov	r5, r0
20002c60:	460c      	mov	r4, r1
20002c62:	d454      	bmi.n	20002d0e <__sflush_r+0xba>
20002c64:	684b      	ldr	r3, [r1, #4]
20002c66:	2b00      	cmp	r3, #0
20002c68:	dc02      	bgt.n	20002c70 <__sflush_r+0x1c>
20002c6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
20002c6c:	2b00      	cmp	r3, #0
20002c6e:	dd48      	ble.n	20002d02 <__sflush_r+0xae>
20002c70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
20002c72:	2e00      	cmp	r6, #0
20002c74:	d045      	beq.n	20002d02 <__sflush_r+0xae>
20002c76:	2300      	movs	r3, #0
20002c78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
20002c7c:	682f      	ldr	r7, [r5, #0]
20002c7e:	6a21      	ldr	r1, [r4, #32]
20002c80:	602b      	str	r3, [r5, #0]
20002c82:	d030      	beq.n	20002ce6 <__sflush_r+0x92>
20002c84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
20002c86:	89a3      	ldrh	r3, [r4, #12]
20002c88:	0759      	lsls	r1, r3, #29
20002c8a:	d505      	bpl.n	20002c98 <__sflush_r+0x44>
20002c8c:	6863      	ldr	r3, [r4, #4]
20002c8e:	1ad2      	subs	r2, r2, r3
20002c90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
20002c92:	b10b      	cbz	r3, 20002c98 <__sflush_r+0x44>
20002c94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
20002c96:	1ad2      	subs	r2, r2, r3
20002c98:	2300      	movs	r3, #0
20002c9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
20002c9c:	6a21      	ldr	r1, [r4, #32]
20002c9e:	4628      	mov	r0, r5
20002ca0:	47b0      	blx	r6
20002ca2:	1c43      	adds	r3, r0, #1
20002ca4:	89a3      	ldrh	r3, [r4, #12]
20002ca6:	d106      	bne.n	20002cb6 <__sflush_r+0x62>
20002ca8:	6829      	ldr	r1, [r5, #0]
20002caa:	291d      	cmp	r1, #29
20002cac:	d82b      	bhi.n	20002d06 <__sflush_r+0xb2>
20002cae:	4a2a      	ldr	r2, [pc, #168]	@ (20002d58 <__sflush_r+0x104>)
20002cb0:	410a      	asrs	r2, r1
20002cb2:	07d6      	lsls	r6, r2, #31
20002cb4:	d427      	bmi.n	20002d06 <__sflush_r+0xb2>
20002cb6:	2200      	movs	r2, #0
20002cb8:	6062      	str	r2, [r4, #4]
20002cba:	04d9      	lsls	r1, r3, #19
20002cbc:	6922      	ldr	r2, [r4, #16]
20002cbe:	6022      	str	r2, [r4, #0]
20002cc0:	d504      	bpl.n	20002ccc <__sflush_r+0x78>
20002cc2:	1c42      	adds	r2, r0, #1
20002cc4:	d101      	bne.n	20002cca <__sflush_r+0x76>
20002cc6:	682b      	ldr	r3, [r5, #0]
20002cc8:	b903      	cbnz	r3, 20002ccc <__sflush_r+0x78>
20002cca:	6560      	str	r0, [r4, #84]	@ 0x54
20002ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
20002cce:	602f      	str	r7, [r5, #0]
20002cd0:	b1b9      	cbz	r1, 20002d02 <__sflush_r+0xae>
20002cd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
20002cd6:	4299      	cmp	r1, r3
20002cd8:	d002      	beq.n	20002ce0 <__sflush_r+0x8c>
20002cda:	4628      	mov	r0, r5
20002cdc:	f7ff ff68 	bl	20002bb0 <_free_r>
20002ce0:	2300      	movs	r3, #0
20002ce2:	6363      	str	r3, [r4, #52]	@ 0x34
20002ce4:	e00d      	b.n	20002d02 <__sflush_r+0xae>
20002ce6:	2301      	movs	r3, #1
20002ce8:	4628      	mov	r0, r5
20002cea:	47b0      	blx	r6
20002cec:	4602      	mov	r2, r0
20002cee:	1c50      	adds	r0, r2, #1
20002cf0:	d1c9      	bne.n	20002c86 <__sflush_r+0x32>
20002cf2:	682b      	ldr	r3, [r5, #0]
20002cf4:	2b00      	cmp	r3, #0
20002cf6:	d0c6      	beq.n	20002c86 <__sflush_r+0x32>
20002cf8:	2b1d      	cmp	r3, #29
20002cfa:	d001      	beq.n	20002d00 <__sflush_r+0xac>
20002cfc:	2b16      	cmp	r3, #22
20002cfe:	d11e      	bne.n	20002d3e <__sflush_r+0xea>
20002d00:	602f      	str	r7, [r5, #0]
20002d02:	2000      	movs	r0, #0
20002d04:	e022      	b.n	20002d4c <__sflush_r+0xf8>
20002d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20002d0a:	b21b      	sxth	r3, r3
20002d0c:	e01b      	b.n	20002d46 <__sflush_r+0xf2>
20002d0e:	690f      	ldr	r7, [r1, #16]
20002d10:	2f00      	cmp	r7, #0
20002d12:	d0f6      	beq.n	20002d02 <__sflush_r+0xae>
20002d14:	0793      	lsls	r3, r2, #30
20002d16:	680e      	ldr	r6, [r1, #0]
20002d18:	bf08      	it	eq
20002d1a:	694b      	ldreq	r3, [r1, #20]
20002d1c:	600f      	str	r7, [r1, #0]
20002d1e:	bf18      	it	ne
20002d20:	2300      	movne	r3, #0
20002d22:	eba6 0807 	sub.w	r8, r6, r7
20002d26:	608b      	str	r3, [r1, #8]
20002d28:	f1b8 0f00 	cmp.w	r8, #0
20002d2c:	dde9      	ble.n	20002d02 <__sflush_r+0xae>
20002d2e:	6a21      	ldr	r1, [r4, #32]
20002d30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
20002d32:	4643      	mov	r3, r8
20002d34:	463a      	mov	r2, r7
20002d36:	4628      	mov	r0, r5
20002d38:	47b0      	blx	r6
20002d3a:	2800      	cmp	r0, #0
20002d3c:	dc08      	bgt.n	20002d50 <__sflush_r+0xfc>
20002d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
20002d46:	81a3      	strh	r3, [r4, #12]
20002d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20002d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20002d50:	4407      	add	r7, r0
20002d52:	eba8 0800 	sub.w	r8, r8, r0
20002d56:	e7e7      	b.n	20002d28 <__sflush_r+0xd4>
20002d58:	dfbffffe 	.word	0xdfbffffe

20002d5c <_fflush_r>:
20002d5c:	b538      	push	{r3, r4, r5, lr}
20002d5e:	690b      	ldr	r3, [r1, #16]
20002d60:	4605      	mov	r5, r0
20002d62:	460c      	mov	r4, r1
20002d64:	b913      	cbnz	r3, 20002d6c <_fflush_r+0x10>
20002d66:	2500      	movs	r5, #0
20002d68:	4628      	mov	r0, r5
20002d6a:	bd38      	pop	{r3, r4, r5, pc}
20002d6c:	b118      	cbz	r0, 20002d76 <_fflush_r+0x1a>
20002d6e:	6a03      	ldr	r3, [r0, #32]
20002d70:	b90b      	cbnz	r3, 20002d76 <_fflush_r+0x1a>
20002d72:	f7ff fd2b 	bl	200027cc <__sinit>
20002d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002d7a:	2b00      	cmp	r3, #0
20002d7c:	d0f3      	beq.n	20002d66 <_fflush_r+0xa>
20002d7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
20002d80:	07d0      	lsls	r0, r2, #31
20002d82:	d404      	bmi.n	20002d8e <_fflush_r+0x32>
20002d84:	0599      	lsls	r1, r3, #22
20002d86:	d402      	bmi.n	20002d8e <_fflush_r+0x32>
20002d88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
20002d8a:	f7ff fef0 	bl	20002b6e <__retarget_lock_acquire_recursive>
20002d8e:	4628      	mov	r0, r5
20002d90:	4621      	mov	r1, r4
20002d92:	f7ff ff5f 	bl	20002c54 <__sflush_r>
20002d96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
20002d98:	07da      	lsls	r2, r3, #31
20002d9a:	4605      	mov	r5, r0
20002d9c:	d4e4      	bmi.n	20002d68 <_fflush_r+0xc>
20002d9e:	89a3      	ldrh	r3, [r4, #12]
20002da0:	059b      	lsls	r3, r3, #22
20002da2:	d4e1      	bmi.n	20002d68 <_fflush_r+0xc>
20002da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
20002da6:	f7ff fee3 	bl	20002b70 <__retarget_lock_release_recursive>
20002daa:	e7dd      	b.n	20002d68 <_fflush_r+0xc>

20002dac <fiprintf>:
20002dac:	b40e      	push	{r1, r2, r3}
20002dae:	b503      	push	{r0, r1, lr}
20002db0:	4601      	mov	r1, r0
20002db2:	ab03      	add	r3, sp, #12
20002db4:	4805      	ldr	r0, [pc, #20]	@ (20002dcc <fiprintf+0x20>)
20002db6:	f853 2b04 	ldr.w	r2, [r3], #4
20002dba:	6800      	ldr	r0, [r0, #0]
20002dbc:	9301      	str	r3, [sp, #4]
20002dbe:	f000 f8bb 	bl	20002f38 <_vfiprintf_r>
20002dc2:	b002      	add	sp, #8
20002dc4:	f85d eb04 	ldr.w	lr, [sp], #4
20002dc8:	b003      	add	sp, #12
20002dca:	4770      	bx	lr
20002dcc:	20003664 	.word	0x20003664

20002dd0 <__swhatbuf_r>:
20002dd0:	b570      	push	{r4, r5, r6, lr}
20002dd2:	460c      	mov	r4, r1
20002dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002dd8:	2900      	cmp	r1, #0
20002dda:	b096      	sub	sp, #88	@ 0x58
20002ddc:	4615      	mov	r5, r2
20002dde:	461e      	mov	r6, r3
20002de0:	da0d      	bge.n	20002dfe <__swhatbuf_r+0x2e>
20002de2:	89a3      	ldrh	r3, [r4, #12]
20002de4:	f013 0f80 	tst.w	r3, #128	@ 0x80
20002de8:	f04f 0100 	mov.w	r1, #0
20002dec:	bf14      	ite	ne
20002dee:	2340      	movne	r3, #64	@ 0x40
20002df0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
20002df4:	2000      	movs	r0, #0
20002df6:	6031      	str	r1, [r6, #0]
20002df8:	602b      	str	r3, [r5, #0]
20002dfa:	b016      	add	sp, #88	@ 0x58
20002dfc:	bd70      	pop	{r4, r5, r6, pc}
20002dfe:	466a      	mov	r2, sp
20002e00:	f000 f848 	bl	20002e94 <_fstat_r>
20002e04:	2800      	cmp	r0, #0
20002e06:	dbec      	blt.n	20002de2 <__swhatbuf_r+0x12>
20002e08:	9901      	ldr	r1, [sp, #4]
20002e0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
20002e0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
20002e12:	4259      	negs	r1, r3
20002e14:	4159      	adcs	r1, r3
20002e16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20002e1a:	e7eb      	b.n	20002df4 <__swhatbuf_r+0x24>

20002e1c <__smakebuf_r>:
20002e1c:	898b      	ldrh	r3, [r1, #12]
20002e1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
20002e20:	079d      	lsls	r5, r3, #30
20002e22:	4606      	mov	r6, r0
20002e24:	460c      	mov	r4, r1
20002e26:	d507      	bpl.n	20002e38 <__smakebuf_r+0x1c>
20002e28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
20002e2c:	6023      	str	r3, [r4, #0]
20002e2e:	6123      	str	r3, [r4, #16]
20002e30:	2301      	movs	r3, #1
20002e32:	6163      	str	r3, [r4, #20]
20002e34:	b003      	add	sp, #12
20002e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002e38:	ab01      	add	r3, sp, #4
20002e3a:	466a      	mov	r2, sp
20002e3c:	f7ff ffc8 	bl	20002dd0 <__swhatbuf_r>
20002e40:	9f00      	ldr	r7, [sp, #0]
20002e42:	4605      	mov	r5, r0
20002e44:	4639      	mov	r1, r7
20002e46:	4630      	mov	r0, r6
20002e48:	f7ff fb6a 	bl	20002520 <_malloc_r>
20002e4c:	b948      	cbnz	r0, 20002e62 <__smakebuf_r+0x46>
20002e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002e52:	059a      	lsls	r2, r3, #22
20002e54:	d4ee      	bmi.n	20002e34 <__smakebuf_r+0x18>
20002e56:	f023 0303 	bic.w	r3, r3, #3
20002e5a:	f043 0302 	orr.w	r3, r3, #2
20002e5e:	81a3      	strh	r3, [r4, #12]
20002e60:	e7e2      	b.n	20002e28 <__smakebuf_r+0xc>
20002e62:	89a3      	ldrh	r3, [r4, #12]
20002e64:	6020      	str	r0, [r4, #0]
20002e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20002e6a:	81a3      	strh	r3, [r4, #12]
20002e6c:	9b01      	ldr	r3, [sp, #4]
20002e6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
20002e72:	b15b      	cbz	r3, 20002e8c <__smakebuf_r+0x70>
20002e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
20002e78:	4630      	mov	r0, r6
20002e7a:	f000 f81d 	bl	20002eb8 <_isatty_r>
20002e7e:	b128      	cbz	r0, 20002e8c <__smakebuf_r+0x70>
20002e80:	89a3      	ldrh	r3, [r4, #12]
20002e82:	f023 0303 	bic.w	r3, r3, #3
20002e86:	f043 0301 	orr.w	r3, r3, #1
20002e8a:	81a3      	strh	r3, [r4, #12]
20002e8c:	89a3      	ldrh	r3, [r4, #12]
20002e8e:	431d      	orrs	r5, r3
20002e90:	81a5      	strh	r5, [r4, #12]
20002e92:	e7cf      	b.n	20002e34 <__smakebuf_r+0x18>

20002e94 <_fstat_r>:
20002e94:	b538      	push	{r3, r4, r5, lr}
20002e96:	4d07      	ldr	r5, [pc, #28]	@ (20002eb4 <_fstat_r+0x20>)
20002e98:	2300      	movs	r3, #0
20002e9a:	4604      	mov	r4, r0
20002e9c:	4608      	mov	r0, r1
20002e9e:	4611      	mov	r1, r2
20002ea0:	602b      	str	r3, [r5, #0]
20002ea2:	f7fe fbca 	bl	2000163a <_fstat>
20002ea6:	1c43      	adds	r3, r0, #1
20002ea8:	d102      	bne.n	20002eb0 <_fstat_r+0x1c>
20002eaa:	682b      	ldr	r3, [r5, #0]
20002eac:	b103      	cbz	r3, 20002eb0 <_fstat_r+0x1c>
20002eae:	6023      	str	r3, [r4, #0]
20002eb0:	bd38      	pop	{r3, r4, r5, pc}
20002eb2:	bf00      	nop
20002eb4:	200039bc 	.word	0x200039bc

20002eb8 <_isatty_r>:
20002eb8:	b538      	push	{r3, r4, r5, lr}
20002eba:	4d06      	ldr	r5, [pc, #24]	@ (20002ed4 <_isatty_r+0x1c>)
20002ebc:	2300      	movs	r3, #0
20002ebe:	4604      	mov	r4, r0
20002ec0:	4608      	mov	r0, r1
20002ec2:	602b      	str	r3, [r5, #0]
20002ec4:	f7fe fbc9 	bl	2000165a <_isatty>
20002ec8:	1c43      	adds	r3, r0, #1
20002eca:	d102      	bne.n	20002ed2 <_isatty_r+0x1a>
20002ecc:	682b      	ldr	r3, [r5, #0]
20002ece:	b103      	cbz	r3, 20002ed2 <_isatty_r+0x1a>
20002ed0:	6023      	str	r3, [r4, #0]
20002ed2:	bd38      	pop	{r3, r4, r5, pc}
20002ed4:	200039bc 	.word	0x200039bc

20002ed8 <abort>:
20002ed8:	b508      	push	{r3, lr}
20002eda:	2006      	movs	r0, #6
20002edc:	f000 fafa 	bl	200034d4 <raise>
20002ee0:	2001      	movs	r0, #1
20002ee2:	f7fe fb5a 	bl	2000159a <_exit>

20002ee6 <__sfputc_r>:
20002ee6:	6893      	ldr	r3, [r2, #8]
20002ee8:	3b01      	subs	r3, #1
20002eea:	2b00      	cmp	r3, #0
20002eec:	b410      	push	{r4}
20002eee:	6093      	str	r3, [r2, #8]
20002ef0:	da08      	bge.n	20002f04 <__sfputc_r+0x1e>
20002ef2:	6994      	ldr	r4, [r2, #24]
20002ef4:	42a3      	cmp	r3, r4
20002ef6:	db01      	blt.n	20002efc <__sfputc_r+0x16>
20002ef8:	290a      	cmp	r1, #10
20002efa:	d103      	bne.n	20002f04 <__sfputc_r+0x1e>
20002efc:	f85d 4b04 	ldr.w	r4, [sp], #4
20002f00:	f7ff bd3b 	b.w	2000297a <__swbuf_r>
20002f04:	6813      	ldr	r3, [r2, #0]
20002f06:	1c58      	adds	r0, r3, #1
20002f08:	6010      	str	r0, [r2, #0]
20002f0a:	7019      	strb	r1, [r3, #0]
20002f0c:	4608      	mov	r0, r1
20002f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
20002f12:	4770      	bx	lr

20002f14 <__sfputs_r>:
20002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002f16:	4606      	mov	r6, r0
20002f18:	460f      	mov	r7, r1
20002f1a:	4614      	mov	r4, r2
20002f1c:	18d5      	adds	r5, r2, r3
20002f1e:	42ac      	cmp	r4, r5
20002f20:	d101      	bne.n	20002f26 <__sfputs_r+0x12>
20002f22:	2000      	movs	r0, #0
20002f24:	e007      	b.n	20002f36 <__sfputs_r+0x22>
20002f26:	f814 1b01 	ldrb.w	r1, [r4], #1
20002f2a:	463a      	mov	r2, r7
20002f2c:	4630      	mov	r0, r6
20002f2e:	f7ff ffda 	bl	20002ee6 <__sfputc_r>
20002f32:	1c43      	adds	r3, r0, #1
20002f34:	d1f3      	bne.n	20002f1e <__sfputs_r+0xa>
20002f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20002f38 <_vfiprintf_r>:
20002f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20002f3c:	460d      	mov	r5, r1
20002f3e:	b09d      	sub	sp, #116	@ 0x74
20002f40:	4614      	mov	r4, r2
20002f42:	4698      	mov	r8, r3
20002f44:	4606      	mov	r6, r0
20002f46:	b118      	cbz	r0, 20002f50 <_vfiprintf_r+0x18>
20002f48:	6a03      	ldr	r3, [r0, #32]
20002f4a:	b90b      	cbnz	r3, 20002f50 <_vfiprintf_r+0x18>
20002f4c:	f7ff fc3e 	bl	200027cc <__sinit>
20002f50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
20002f52:	07d9      	lsls	r1, r3, #31
20002f54:	d405      	bmi.n	20002f62 <_vfiprintf_r+0x2a>
20002f56:	89ab      	ldrh	r3, [r5, #12]
20002f58:	059a      	lsls	r2, r3, #22
20002f5a:	d402      	bmi.n	20002f62 <_vfiprintf_r+0x2a>
20002f5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
20002f5e:	f7ff fe06 	bl	20002b6e <__retarget_lock_acquire_recursive>
20002f62:	89ab      	ldrh	r3, [r5, #12]
20002f64:	071b      	lsls	r3, r3, #28
20002f66:	d501      	bpl.n	20002f6c <_vfiprintf_r+0x34>
20002f68:	692b      	ldr	r3, [r5, #16]
20002f6a:	b99b      	cbnz	r3, 20002f94 <_vfiprintf_r+0x5c>
20002f6c:	4629      	mov	r1, r5
20002f6e:	4630      	mov	r0, r6
20002f70:	f7ff fd42 	bl	200029f8 <__swsetup_r>
20002f74:	b170      	cbz	r0, 20002f94 <_vfiprintf_r+0x5c>
20002f76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
20002f78:	07dc      	lsls	r4, r3, #31
20002f7a:	d504      	bpl.n	20002f86 <_vfiprintf_r+0x4e>
20002f7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20002f80:	b01d      	add	sp, #116	@ 0x74
20002f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20002f86:	89ab      	ldrh	r3, [r5, #12]
20002f88:	0598      	lsls	r0, r3, #22
20002f8a:	d4f7      	bmi.n	20002f7c <_vfiprintf_r+0x44>
20002f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
20002f8e:	f7ff fdef 	bl	20002b70 <__retarget_lock_release_recursive>
20002f92:	e7f3      	b.n	20002f7c <_vfiprintf_r+0x44>
20002f94:	2300      	movs	r3, #0
20002f96:	9309      	str	r3, [sp, #36]	@ 0x24
20002f98:	2320      	movs	r3, #32
20002f9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
20002f9e:	f8cd 800c 	str.w	r8, [sp, #12]
20002fa2:	2330      	movs	r3, #48	@ 0x30
20002fa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 20003154 <_vfiprintf_r+0x21c>
20002fa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
20002fac:	f04f 0901 	mov.w	r9, #1
20002fb0:	4623      	mov	r3, r4
20002fb2:	469a      	mov	sl, r3
20002fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
20002fb8:	b10a      	cbz	r2, 20002fbe <_vfiprintf_r+0x86>
20002fba:	2a25      	cmp	r2, #37	@ 0x25
20002fbc:	d1f9      	bne.n	20002fb2 <_vfiprintf_r+0x7a>
20002fbe:	ebba 0b04 	subs.w	fp, sl, r4
20002fc2:	d00b      	beq.n	20002fdc <_vfiprintf_r+0xa4>
20002fc4:	465b      	mov	r3, fp
20002fc6:	4622      	mov	r2, r4
20002fc8:	4629      	mov	r1, r5
20002fca:	4630      	mov	r0, r6
20002fcc:	f7ff ffa2 	bl	20002f14 <__sfputs_r>
20002fd0:	3001      	adds	r0, #1
20002fd2:	f000 80a7 	beq.w	20003124 <_vfiprintf_r+0x1ec>
20002fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
20002fd8:	445a      	add	r2, fp
20002fda:	9209      	str	r2, [sp, #36]	@ 0x24
20002fdc:	f89a 3000 	ldrb.w	r3, [sl]
20002fe0:	2b00      	cmp	r3, #0
20002fe2:	f000 809f 	beq.w	20003124 <_vfiprintf_r+0x1ec>
20002fe6:	2300      	movs	r3, #0
20002fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
20002fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
20002ff0:	f10a 0a01 	add.w	sl, sl, #1
20002ff4:	9304      	str	r3, [sp, #16]
20002ff6:	9307      	str	r3, [sp, #28]
20002ff8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
20002ffc:	931a      	str	r3, [sp, #104]	@ 0x68
20002ffe:	4654      	mov	r4, sl
20003000:	2205      	movs	r2, #5
20003002:	f814 1b01 	ldrb.w	r1, [r4], #1
20003006:	4853      	ldr	r0, [pc, #332]	@ (20003154 <_vfiprintf_r+0x21c>)
20003008:	f7fd f932 	bl	20000270 <memchr>
2000300c:	9a04      	ldr	r2, [sp, #16]
2000300e:	b9d8      	cbnz	r0, 20003048 <_vfiprintf_r+0x110>
20003010:	06d1      	lsls	r1, r2, #27
20003012:	bf44      	itt	mi
20003014:	2320      	movmi	r3, #32
20003016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
2000301a:	0713      	lsls	r3, r2, #28
2000301c:	bf44      	itt	mi
2000301e:	232b      	movmi	r3, #43	@ 0x2b
20003020:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
20003024:	f89a 3000 	ldrb.w	r3, [sl]
20003028:	2b2a      	cmp	r3, #42	@ 0x2a
2000302a:	d015      	beq.n	20003058 <_vfiprintf_r+0x120>
2000302c:	9a07      	ldr	r2, [sp, #28]
2000302e:	4654      	mov	r4, sl
20003030:	2000      	movs	r0, #0
20003032:	f04f 0c0a 	mov.w	ip, #10
20003036:	4621      	mov	r1, r4
20003038:	f811 3b01 	ldrb.w	r3, [r1], #1
2000303c:	3b30      	subs	r3, #48	@ 0x30
2000303e:	2b09      	cmp	r3, #9
20003040:	d94b      	bls.n	200030da <_vfiprintf_r+0x1a2>
20003042:	b1b0      	cbz	r0, 20003072 <_vfiprintf_r+0x13a>
20003044:	9207      	str	r2, [sp, #28]
20003046:	e014      	b.n	20003072 <_vfiprintf_r+0x13a>
20003048:	eba0 0308 	sub.w	r3, r0, r8
2000304c:	fa09 f303 	lsl.w	r3, r9, r3
20003050:	4313      	orrs	r3, r2
20003052:	9304      	str	r3, [sp, #16]
20003054:	46a2      	mov	sl, r4
20003056:	e7d2      	b.n	20002ffe <_vfiprintf_r+0xc6>
20003058:	9b03      	ldr	r3, [sp, #12]
2000305a:	1d19      	adds	r1, r3, #4
2000305c:	681b      	ldr	r3, [r3, #0]
2000305e:	9103      	str	r1, [sp, #12]
20003060:	2b00      	cmp	r3, #0
20003062:	bfbb      	ittet	lt
20003064:	425b      	neglt	r3, r3
20003066:	f042 0202 	orrlt.w	r2, r2, #2
2000306a:	9307      	strge	r3, [sp, #28]
2000306c:	9307      	strlt	r3, [sp, #28]
2000306e:	bfb8      	it	lt
20003070:	9204      	strlt	r2, [sp, #16]
20003072:	7823      	ldrb	r3, [r4, #0]
20003074:	2b2e      	cmp	r3, #46	@ 0x2e
20003076:	d10a      	bne.n	2000308e <_vfiprintf_r+0x156>
20003078:	7863      	ldrb	r3, [r4, #1]
2000307a:	2b2a      	cmp	r3, #42	@ 0x2a
2000307c:	d132      	bne.n	200030e4 <_vfiprintf_r+0x1ac>
2000307e:	9b03      	ldr	r3, [sp, #12]
20003080:	1d1a      	adds	r2, r3, #4
20003082:	681b      	ldr	r3, [r3, #0]
20003084:	9203      	str	r2, [sp, #12]
20003086:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
2000308a:	3402      	adds	r4, #2
2000308c:	9305      	str	r3, [sp, #20]
2000308e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 20003164 <_vfiprintf_r+0x22c>
20003092:	7821      	ldrb	r1, [r4, #0]
20003094:	2203      	movs	r2, #3
20003096:	4650      	mov	r0, sl
20003098:	f7fd f8ea 	bl	20000270 <memchr>
2000309c:	b138      	cbz	r0, 200030ae <_vfiprintf_r+0x176>
2000309e:	9b04      	ldr	r3, [sp, #16]
200030a0:	eba0 000a 	sub.w	r0, r0, sl
200030a4:	2240      	movs	r2, #64	@ 0x40
200030a6:	4082      	lsls	r2, r0
200030a8:	4313      	orrs	r3, r2
200030aa:	3401      	adds	r4, #1
200030ac:	9304      	str	r3, [sp, #16]
200030ae:	f814 1b01 	ldrb.w	r1, [r4], #1
200030b2:	4829      	ldr	r0, [pc, #164]	@ (20003158 <_vfiprintf_r+0x220>)
200030b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
200030b8:	2206      	movs	r2, #6
200030ba:	f7fd f8d9 	bl	20000270 <memchr>
200030be:	2800      	cmp	r0, #0
200030c0:	d03f      	beq.n	20003142 <_vfiprintf_r+0x20a>
200030c2:	4b26      	ldr	r3, [pc, #152]	@ (2000315c <_vfiprintf_r+0x224>)
200030c4:	bb1b      	cbnz	r3, 2000310e <_vfiprintf_r+0x1d6>
200030c6:	9b03      	ldr	r3, [sp, #12]
200030c8:	3307      	adds	r3, #7
200030ca:	f023 0307 	bic.w	r3, r3, #7
200030ce:	3308      	adds	r3, #8
200030d0:	9303      	str	r3, [sp, #12]
200030d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
200030d4:	443b      	add	r3, r7
200030d6:	9309      	str	r3, [sp, #36]	@ 0x24
200030d8:	e76a      	b.n	20002fb0 <_vfiprintf_r+0x78>
200030da:	fb0c 3202 	mla	r2, ip, r2, r3
200030de:	460c      	mov	r4, r1
200030e0:	2001      	movs	r0, #1
200030e2:	e7a8      	b.n	20003036 <_vfiprintf_r+0xfe>
200030e4:	2300      	movs	r3, #0
200030e6:	3401      	adds	r4, #1
200030e8:	9305      	str	r3, [sp, #20]
200030ea:	4619      	mov	r1, r3
200030ec:	f04f 0c0a 	mov.w	ip, #10
200030f0:	4620      	mov	r0, r4
200030f2:	f810 2b01 	ldrb.w	r2, [r0], #1
200030f6:	3a30      	subs	r2, #48	@ 0x30
200030f8:	2a09      	cmp	r2, #9
200030fa:	d903      	bls.n	20003104 <_vfiprintf_r+0x1cc>
200030fc:	2b00      	cmp	r3, #0
200030fe:	d0c6      	beq.n	2000308e <_vfiprintf_r+0x156>
20003100:	9105      	str	r1, [sp, #20]
20003102:	e7c4      	b.n	2000308e <_vfiprintf_r+0x156>
20003104:	fb0c 2101 	mla	r1, ip, r1, r2
20003108:	4604      	mov	r4, r0
2000310a:	2301      	movs	r3, #1
2000310c:	e7f0      	b.n	200030f0 <_vfiprintf_r+0x1b8>
2000310e:	ab03      	add	r3, sp, #12
20003110:	9300      	str	r3, [sp, #0]
20003112:	462a      	mov	r2, r5
20003114:	4b12      	ldr	r3, [pc, #72]	@ (20003160 <_vfiprintf_r+0x228>)
20003116:	a904      	add	r1, sp, #16
20003118:	4630      	mov	r0, r6
2000311a:	f3af 8000 	nop.w
2000311e:	4607      	mov	r7, r0
20003120:	1c78      	adds	r0, r7, #1
20003122:	d1d6      	bne.n	200030d2 <_vfiprintf_r+0x19a>
20003124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
20003126:	07d9      	lsls	r1, r3, #31
20003128:	d405      	bmi.n	20003136 <_vfiprintf_r+0x1fe>
2000312a:	89ab      	ldrh	r3, [r5, #12]
2000312c:	059a      	lsls	r2, r3, #22
2000312e:	d402      	bmi.n	20003136 <_vfiprintf_r+0x1fe>
20003130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
20003132:	f7ff fd1d 	bl	20002b70 <__retarget_lock_release_recursive>
20003136:	89ab      	ldrh	r3, [r5, #12]
20003138:	065b      	lsls	r3, r3, #25
2000313a:	f53f af1f 	bmi.w	20002f7c <_vfiprintf_r+0x44>
2000313e:	9809      	ldr	r0, [sp, #36]	@ 0x24
20003140:	e71e      	b.n	20002f80 <_vfiprintf_r+0x48>
20003142:	ab03      	add	r3, sp, #12
20003144:	9300      	str	r3, [sp, #0]
20003146:	462a      	mov	r2, r5
20003148:	4b05      	ldr	r3, [pc, #20]	@ (20003160 <_vfiprintf_r+0x228>)
2000314a:	a904      	add	r1, sp, #16
2000314c:	4630      	mov	r0, r6
2000314e:	f000 f879 	bl	20003244 <_printf_i>
20003152:	e7e4      	b.n	2000311e <_vfiprintf_r+0x1e6>
20003154:	20003607 	.word	0x20003607
20003158:	20003611 	.word	0x20003611
2000315c:	00000000 	.word	0x00000000
20003160:	20002f15 	.word	0x20002f15
20003164:	2000360d 	.word	0x2000360d

20003168 <_printf_common>:
20003168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000316c:	4616      	mov	r6, r2
2000316e:	4698      	mov	r8, r3
20003170:	688a      	ldr	r2, [r1, #8]
20003172:	690b      	ldr	r3, [r1, #16]
20003174:	f8dd 9020 	ldr.w	r9, [sp, #32]
20003178:	4293      	cmp	r3, r2
2000317a:	bfb8      	it	lt
2000317c:	4613      	movlt	r3, r2
2000317e:	6033      	str	r3, [r6, #0]
20003180:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
20003184:	4607      	mov	r7, r0
20003186:	460c      	mov	r4, r1
20003188:	b10a      	cbz	r2, 2000318e <_printf_common+0x26>
2000318a:	3301      	adds	r3, #1
2000318c:	6033      	str	r3, [r6, #0]
2000318e:	6823      	ldr	r3, [r4, #0]
20003190:	0699      	lsls	r1, r3, #26
20003192:	bf42      	ittt	mi
20003194:	6833      	ldrmi	r3, [r6, #0]
20003196:	3302      	addmi	r3, #2
20003198:	6033      	strmi	r3, [r6, #0]
2000319a:	6825      	ldr	r5, [r4, #0]
2000319c:	f015 0506 	ands.w	r5, r5, #6
200031a0:	d106      	bne.n	200031b0 <_printf_common+0x48>
200031a2:	f104 0a19 	add.w	sl, r4, #25
200031a6:	68e3      	ldr	r3, [r4, #12]
200031a8:	6832      	ldr	r2, [r6, #0]
200031aa:	1a9b      	subs	r3, r3, r2
200031ac:	42ab      	cmp	r3, r5
200031ae:	dc26      	bgt.n	200031fe <_printf_common+0x96>
200031b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
200031b4:	6822      	ldr	r2, [r4, #0]
200031b6:	3b00      	subs	r3, #0
200031b8:	bf18      	it	ne
200031ba:	2301      	movne	r3, #1
200031bc:	0692      	lsls	r2, r2, #26
200031be:	d42b      	bmi.n	20003218 <_printf_common+0xb0>
200031c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
200031c4:	4641      	mov	r1, r8
200031c6:	4638      	mov	r0, r7
200031c8:	47c8      	blx	r9
200031ca:	3001      	adds	r0, #1
200031cc:	d01e      	beq.n	2000320c <_printf_common+0xa4>
200031ce:	6823      	ldr	r3, [r4, #0]
200031d0:	6922      	ldr	r2, [r4, #16]
200031d2:	f003 0306 	and.w	r3, r3, #6
200031d6:	2b04      	cmp	r3, #4
200031d8:	bf02      	ittt	eq
200031da:	68e5      	ldreq	r5, [r4, #12]
200031dc:	6833      	ldreq	r3, [r6, #0]
200031de:	1aed      	subeq	r5, r5, r3
200031e0:	68a3      	ldr	r3, [r4, #8]
200031e2:	bf0c      	ite	eq
200031e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
200031e8:	2500      	movne	r5, #0
200031ea:	4293      	cmp	r3, r2
200031ec:	bfc4      	itt	gt
200031ee:	1a9b      	subgt	r3, r3, r2
200031f0:	18ed      	addgt	r5, r5, r3
200031f2:	2600      	movs	r6, #0
200031f4:	341a      	adds	r4, #26
200031f6:	42b5      	cmp	r5, r6
200031f8:	d11a      	bne.n	20003230 <_printf_common+0xc8>
200031fa:	2000      	movs	r0, #0
200031fc:	e008      	b.n	20003210 <_printf_common+0xa8>
200031fe:	2301      	movs	r3, #1
20003200:	4652      	mov	r2, sl
20003202:	4641      	mov	r1, r8
20003204:	4638      	mov	r0, r7
20003206:	47c8      	blx	r9
20003208:	3001      	adds	r0, #1
2000320a:	d103      	bne.n	20003214 <_printf_common+0xac>
2000320c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20003210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20003214:	3501      	adds	r5, #1
20003216:	e7c6      	b.n	200031a6 <_printf_common+0x3e>
20003218:	18e1      	adds	r1, r4, r3
2000321a:	1c5a      	adds	r2, r3, #1
2000321c:	2030      	movs	r0, #48	@ 0x30
2000321e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
20003222:	4422      	add	r2, r4
20003224:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
20003228:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
2000322c:	3302      	adds	r3, #2
2000322e:	e7c7      	b.n	200031c0 <_printf_common+0x58>
20003230:	2301      	movs	r3, #1
20003232:	4622      	mov	r2, r4
20003234:	4641      	mov	r1, r8
20003236:	4638      	mov	r0, r7
20003238:	47c8      	blx	r9
2000323a:	3001      	adds	r0, #1
2000323c:	d0e6      	beq.n	2000320c <_printf_common+0xa4>
2000323e:	3601      	adds	r6, #1
20003240:	e7d9      	b.n	200031f6 <_printf_common+0x8e>
	...

20003244 <_printf_i>:
20003244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
20003248:	7e0f      	ldrb	r7, [r1, #24]
2000324a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
2000324c:	2f78      	cmp	r7, #120	@ 0x78
2000324e:	4691      	mov	r9, r2
20003250:	4680      	mov	r8, r0
20003252:	460c      	mov	r4, r1
20003254:	469a      	mov	sl, r3
20003256:	f101 0243 	add.w	r2, r1, #67	@ 0x43
2000325a:	d807      	bhi.n	2000326c <_printf_i+0x28>
2000325c:	2f62      	cmp	r7, #98	@ 0x62
2000325e:	d80a      	bhi.n	20003276 <_printf_i+0x32>
20003260:	2f00      	cmp	r7, #0
20003262:	f000 80d2 	beq.w	2000340a <_printf_i+0x1c6>
20003266:	2f58      	cmp	r7, #88	@ 0x58
20003268:	f000 80b9 	beq.w	200033de <_printf_i+0x19a>
2000326c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
20003270:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
20003274:	e03a      	b.n	200032ec <_printf_i+0xa8>
20003276:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
2000327a:	2b15      	cmp	r3, #21
2000327c:	d8f6      	bhi.n	2000326c <_printf_i+0x28>
2000327e:	a101      	add	r1, pc, #4	@ (adr r1, 20003284 <_printf_i+0x40>)
20003280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
20003284:	200032dd 	.word	0x200032dd
20003288:	200032f1 	.word	0x200032f1
2000328c:	2000326d 	.word	0x2000326d
20003290:	2000326d 	.word	0x2000326d
20003294:	2000326d 	.word	0x2000326d
20003298:	2000326d 	.word	0x2000326d
2000329c:	200032f1 	.word	0x200032f1
200032a0:	2000326d 	.word	0x2000326d
200032a4:	2000326d 	.word	0x2000326d
200032a8:	2000326d 	.word	0x2000326d
200032ac:	2000326d 	.word	0x2000326d
200032b0:	200033f1 	.word	0x200033f1
200032b4:	2000331b 	.word	0x2000331b
200032b8:	200033ab 	.word	0x200033ab
200032bc:	2000326d 	.word	0x2000326d
200032c0:	2000326d 	.word	0x2000326d
200032c4:	20003413 	.word	0x20003413
200032c8:	2000326d 	.word	0x2000326d
200032cc:	2000331b 	.word	0x2000331b
200032d0:	2000326d 	.word	0x2000326d
200032d4:	2000326d 	.word	0x2000326d
200032d8:	200033b3 	.word	0x200033b3
200032dc:	6833      	ldr	r3, [r6, #0]
200032de:	1d1a      	adds	r2, r3, #4
200032e0:	681b      	ldr	r3, [r3, #0]
200032e2:	6032      	str	r2, [r6, #0]
200032e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
200032e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
200032ec:	2301      	movs	r3, #1
200032ee:	e09d      	b.n	2000342c <_printf_i+0x1e8>
200032f0:	6833      	ldr	r3, [r6, #0]
200032f2:	6820      	ldr	r0, [r4, #0]
200032f4:	1d19      	adds	r1, r3, #4
200032f6:	6031      	str	r1, [r6, #0]
200032f8:	0606      	lsls	r6, r0, #24
200032fa:	d501      	bpl.n	20003300 <_printf_i+0xbc>
200032fc:	681d      	ldr	r5, [r3, #0]
200032fe:	e003      	b.n	20003308 <_printf_i+0xc4>
20003300:	0645      	lsls	r5, r0, #25
20003302:	d5fb      	bpl.n	200032fc <_printf_i+0xb8>
20003304:	f9b3 5000 	ldrsh.w	r5, [r3]
20003308:	2d00      	cmp	r5, #0
2000330a:	da03      	bge.n	20003314 <_printf_i+0xd0>
2000330c:	232d      	movs	r3, #45	@ 0x2d
2000330e:	426d      	negs	r5, r5
20003310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
20003314:	4859      	ldr	r0, [pc, #356]	@ (2000347c <_printf_i+0x238>)
20003316:	230a      	movs	r3, #10
20003318:	e011      	b.n	2000333e <_printf_i+0xfa>
2000331a:	6821      	ldr	r1, [r4, #0]
2000331c:	6833      	ldr	r3, [r6, #0]
2000331e:	0608      	lsls	r0, r1, #24
20003320:	f853 5b04 	ldr.w	r5, [r3], #4
20003324:	d402      	bmi.n	2000332c <_printf_i+0xe8>
20003326:	0649      	lsls	r1, r1, #25
20003328:	bf48      	it	mi
2000332a:	b2ad      	uxthmi	r5, r5
2000332c:	2f6f      	cmp	r7, #111	@ 0x6f
2000332e:	4853      	ldr	r0, [pc, #332]	@ (2000347c <_printf_i+0x238>)
20003330:	6033      	str	r3, [r6, #0]
20003332:	bf14      	ite	ne
20003334:	230a      	movne	r3, #10
20003336:	2308      	moveq	r3, #8
20003338:	2100      	movs	r1, #0
2000333a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
2000333e:	6866      	ldr	r6, [r4, #4]
20003340:	60a6      	str	r6, [r4, #8]
20003342:	2e00      	cmp	r6, #0
20003344:	bfa2      	ittt	ge
20003346:	6821      	ldrge	r1, [r4, #0]
20003348:	f021 0104 	bicge.w	r1, r1, #4
2000334c:	6021      	strge	r1, [r4, #0]
2000334e:	b90d      	cbnz	r5, 20003354 <_printf_i+0x110>
20003350:	2e00      	cmp	r6, #0
20003352:	d04b      	beq.n	200033ec <_printf_i+0x1a8>
20003354:	4616      	mov	r6, r2
20003356:	fbb5 f1f3 	udiv	r1, r5, r3
2000335a:	fb03 5711 	mls	r7, r3, r1, r5
2000335e:	5dc7      	ldrb	r7, [r0, r7]
20003360:	f806 7d01 	strb.w	r7, [r6, #-1]!
20003364:	462f      	mov	r7, r5
20003366:	42bb      	cmp	r3, r7
20003368:	460d      	mov	r5, r1
2000336a:	d9f4      	bls.n	20003356 <_printf_i+0x112>
2000336c:	2b08      	cmp	r3, #8
2000336e:	d10b      	bne.n	20003388 <_printf_i+0x144>
20003370:	6823      	ldr	r3, [r4, #0]
20003372:	07df      	lsls	r7, r3, #31
20003374:	d508      	bpl.n	20003388 <_printf_i+0x144>
20003376:	6923      	ldr	r3, [r4, #16]
20003378:	6861      	ldr	r1, [r4, #4]
2000337a:	4299      	cmp	r1, r3
2000337c:	bfde      	ittt	le
2000337e:	2330      	movle	r3, #48	@ 0x30
20003380:	f806 3c01 	strble.w	r3, [r6, #-1]
20003384:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
20003388:	1b92      	subs	r2, r2, r6
2000338a:	6122      	str	r2, [r4, #16]
2000338c:	f8cd a000 	str.w	sl, [sp]
20003390:	464b      	mov	r3, r9
20003392:	aa03      	add	r2, sp, #12
20003394:	4621      	mov	r1, r4
20003396:	4640      	mov	r0, r8
20003398:	f7ff fee6 	bl	20003168 <_printf_common>
2000339c:	3001      	adds	r0, #1
2000339e:	d14a      	bne.n	20003436 <_printf_i+0x1f2>
200033a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
200033a4:	b004      	add	sp, #16
200033a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200033aa:	6823      	ldr	r3, [r4, #0]
200033ac:	f043 0320 	orr.w	r3, r3, #32
200033b0:	6023      	str	r3, [r4, #0]
200033b2:	4833      	ldr	r0, [pc, #204]	@ (20003480 <_printf_i+0x23c>)
200033b4:	2778      	movs	r7, #120	@ 0x78
200033b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
200033ba:	6823      	ldr	r3, [r4, #0]
200033bc:	6831      	ldr	r1, [r6, #0]
200033be:	061f      	lsls	r7, r3, #24
200033c0:	f851 5b04 	ldr.w	r5, [r1], #4
200033c4:	d402      	bmi.n	200033cc <_printf_i+0x188>
200033c6:	065f      	lsls	r7, r3, #25
200033c8:	bf48      	it	mi
200033ca:	b2ad      	uxthmi	r5, r5
200033cc:	6031      	str	r1, [r6, #0]
200033ce:	07d9      	lsls	r1, r3, #31
200033d0:	bf44      	itt	mi
200033d2:	f043 0320 	orrmi.w	r3, r3, #32
200033d6:	6023      	strmi	r3, [r4, #0]
200033d8:	b11d      	cbz	r5, 200033e2 <_printf_i+0x19e>
200033da:	2310      	movs	r3, #16
200033dc:	e7ac      	b.n	20003338 <_printf_i+0xf4>
200033de:	4827      	ldr	r0, [pc, #156]	@ (2000347c <_printf_i+0x238>)
200033e0:	e7e9      	b.n	200033b6 <_printf_i+0x172>
200033e2:	6823      	ldr	r3, [r4, #0]
200033e4:	f023 0320 	bic.w	r3, r3, #32
200033e8:	6023      	str	r3, [r4, #0]
200033ea:	e7f6      	b.n	200033da <_printf_i+0x196>
200033ec:	4616      	mov	r6, r2
200033ee:	e7bd      	b.n	2000336c <_printf_i+0x128>
200033f0:	6833      	ldr	r3, [r6, #0]
200033f2:	6825      	ldr	r5, [r4, #0]
200033f4:	6961      	ldr	r1, [r4, #20]
200033f6:	1d18      	adds	r0, r3, #4
200033f8:	6030      	str	r0, [r6, #0]
200033fa:	062e      	lsls	r6, r5, #24
200033fc:	681b      	ldr	r3, [r3, #0]
200033fe:	d501      	bpl.n	20003404 <_printf_i+0x1c0>
20003400:	6019      	str	r1, [r3, #0]
20003402:	e002      	b.n	2000340a <_printf_i+0x1c6>
20003404:	0668      	lsls	r0, r5, #25
20003406:	d5fb      	bpl.n	20003400 <_printf_i+0x1bc>
20003408:	8019      	strh	r1, [r3, #0]
2000340a:	2300      	movs	r3, #0
2000340c:	6123      	str	r3, [r4, #16]
2000340e:	4616      	mov	r6, r2
20003410:	e7bc      	b.n	2000338c <_printf_i+0x148>
20003412:	6833      	ldr	r3, [r6, #0]
20003414:	1d1a      	adds	r2, r3, #4
20003416:	6032      	str	r2, [r6, #0]
20003418:	681e      	ldr	r6, [r3, #0]
2000341a:	6862      	ldr	r2, [r4, #4]
2000341c:	2100      	movs	r1, #0
2000341e:	4630      	mov	r0, r6
20003420:	f7fc ff26 	bl	20000270 <memchr>
20003424:	b108      	cbz	r0, 2000342a <_printf_i+0x1e6>
20003426:	1b80      	subs	r0, r0, r6
20003428:	6060      	str	r0, [r4, #4]
2000342a:	6863      	ldr	r3, [r4, #4]
2000342c:	6123      	str	r3, [r4, #16]
2000342e:	2300      	movs	r3, #0
20003430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
20003434:	e7aa      	b.n	2000338c <_printf_i+0x148>
20003436:	6923      	ldr	r3, [r4, #16]
20003438:	4632      	mov	r2, r6
2000343a:	4649      	mov	r1, r9
2000343c:	4640      	mov	r0, r8
2000343e:	47d0      	blx	sl
20003440:	3001      	adds	r0, #1
20003442:	d0ad      	beq.n	200033a0 <_printf_i+0x15c>
20003444:	6823      	ldr	r3, [r4, #0]
20003446:	079b      	lsls	r3, r3, #30
20003448:	d413      	bmi.n	20003472 <_printf_i+0x22e>
2000344a:	68e0      	ldr	r0, [r4, #12]
2000344c:	9b03      	ldr	r3, [sp, #12]
2000344e:	4298      	cmp	r0, r3
20003450:	bfb8      	it	lt
20003452:	4618      	movlt	r0, r3
20003454:	e7a6      	b.n	200033a4 <_printf_i+0x160>
20003456:	2301      	movs	r3, #1
20003458:	4632      	mov	r2, r6
2000345a:	4649      	mov	r1, r9
2000345c:	4640      	mov	r0, r8
2000345e:	47d0      	blx	sl
20003460:	3001      	adds	r0, #1
20003462:	d09d      	beq.n	200033a0 <_printf_i+0x15c>
20003464:	3501      	adds	r5, #1
20003466:	68e3      	ldr	r3, [r4, #12]
20003468:	9903      	ldr	r1, [sp, #12]
2000346a:	1a5b      	subs	r3, r3, r1
2000346c:	42ab      	cmp	r3, r5
2000346e:	dcf2      	bgt.n	20003456 <_printf_i+0x212>
20003470:	e7eb      	b.n	2000344a <_printf_i+0x206>
20003472:	2500      	movs	r5, #0
20003474:	f104 0619 	add.w	r6, r4, #25
20003478:	e7f5      	b.n	20003466 <_printf_i+0x222>
2000347a:	bf00      	nop
2000347c:	20003618 	.word	0x20003618
20003480:	20003629 	.word	0x20003629

20003484 <_raise_r>:
20003484:	291f      	cmp	r1, #31
20003486:	b538      	push	{r3, r4, r5, lr}
20003488:	4605      	mov	r5, r0
2000348a:	460c      	mov	r4, r1
2000348c:	d904      	bls.n	20003498 <_raise_r+0x14>
2000348e:	2316      	movs	r3, #22
20003490:	6003      	str	r3, [r0, #0]
20003492:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20003496:	bd38      	pop	{r3, r4, r5, pc}
20003498:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
2000349a:	b112      	cbz	r2, 200034a2 <_raise_r+0x1e>
2000349c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
200034a0:	b94b      	cbnz	r3, 200034b6 <_raise_r+0x32>
200034a2:	4628      	mov	r0, r5
200034a4:	f000 f830 	bl	20003508 <_getpid_r>
200034a8:	4622      	mov	r2, r4
200034aa:	4601      	mov	r1, r0
200034ac:	4628      	mov	r0, r5
200034ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
200034b2:	f000 b817 	b.w	200034e4 <_kill_r>
200034b6:	2b01      	cmp	r3, #1
200034b8:	d00a      	beq.n	200034d0 <_raise_r+0x4c>
200034ba:	1c59      	adds	r1, r3, #1
200034bc:	d103      	bne.n	200034c6 <_raise_r+0x42>
200034be:	2316      	movs	r3, #22
200034c0:	6003      	str	r3, [r0, #0]
200034c2:	2001      	movs	r0, #1
200034c4:	e7e7      	b.n	20003496 <_raise_r+0x12>
200034c6:	2100      	movs	r1, #0
200034c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
200034cc:	4620      	mov	r0, r4
200034ce:	4798      	blx	r3
200034d0:	2000      	movs	r0, #0
200034d2:	e7e0      	b.n	20003496 <_raise_r+0x12>

200034d4 <raise>:
200034d4:	4b02      	ldr	r3, [pc, #8]	@ (200034e0 <raise+0xc>)
200034d6:	4601      	mov	r1, r0
200034d8:	6818      	ldr	r0, [r3, #0]
200034da:	f7ff bfd3 	b.w	20003484 <_raise_r>
200034de:	bf00      	nop
200034e0:	20003664 	.word	0x20003664

200034e4 <_kill_r>:
200034e4:	b538      	push	{r3, r4, r5, lr}
200034e6:	4d07      	ldr	r5, [pc, #28]	@ (20003504 <_kill_r+0x20>)
200034e8:	2300      	movs	r3, #0
200034ea:	4604      	mov	r4, r0
200034ec:	4608      	mov	r0, r1
200034ee:	4611      	mov	r1, r2
200034f0:	602b      	str	r3, [r5, #0]
200034f2:	f7fe f842 	bl	2000157a <_kill>
200034f6:	1c43      	adds	r3, r0, #1
200034f8:	d102      	bne.n	20003500 <_kill_r+0x1c>
200034fa:	682b      	ldr	r3, [r5, #0]
200034fc:	b103      	cbz	r3, 20003500 <_kill_r+0x1c>
200034fe:	6023      	str	r3, [r4, #0]
20003500:	bd38      	pop	{r3, r4, r5, pc}
20003502:	bf00      	nop
20003504:	200039bc 	.word	0x200039bc

20003508 <_getpid_r>:
20003508:	f7fe b82f 	b.w	2000156a <_getpid>

2000350c <_init>:
2000350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000350e:	bf00      	nop
20003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003512:	bc08      	pop	{r3}
20003514:	469e      	mov	lr, r3
20003516:	4770      	bx	lr

20003518 <_fini>:
20003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000351a:	bf00      	nop
2000351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000351e:	bc08      	pop	{r3}
20003520:	469e      	mov	lr, r3
20003522:	4770      	bx	lr
